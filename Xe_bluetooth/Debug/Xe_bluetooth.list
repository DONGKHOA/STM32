
Xe_bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d18  08004d18  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08004d18  08004d18  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d18  08004d18  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08004d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000028  08004d48  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  08004d48  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa08  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a38  00000000  00000000  0002aa59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002c498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002d0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b83  00000000  00000000  0002dc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c089  00000000  00000000  000447c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000864e2  00000000  00000000  0005084c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6d2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000358c  00000000  00000000  000d6d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08004cd8 	.word	0x08004cd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08004cd8 	.word	0x08004cd8

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_d2uiz>:
 8000aa4:	004a      	lsls	r2, r1, #1
 8000aa6:	d211      	bcs.n	8000acc <__aeabi_d2uiz+0x28>
 8000aa8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aac:	d211      	bcs.n	8000ad2 <__aeabi_d2uiz+0x2e>
 8000aae:	d50d      	bpl.n	8000acc <__aeabi_d2uiz+0x28>
 8000ab0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab8:	d40e      	bmi.n	8000ad8 <__aeabi_d2uiz+0x34>
 8000aba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d102      	bne.n	8000ade <__aeabi_d2uiz+0x3a>
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	4770      	bx	lr
 8000ade:	f04f 0000 	mov.w	r0, #0
 8000ae2:	4770      	bx	lr

08000ae4 <__aeabi_d2f>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aec:	bf24      	itt	cs
 8000aee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af6:	d90d      	bls.n	8000b14 <__aeabi_d2f+0x30>
 8000af8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000afc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b0c:	bf08      	it	eq
 8000b0e:	f020 0001 	biceq.w	r0, r0, #1
 8000b12:	4770      	bx	lr
 8000b14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b18:	d121      	bne.n	8000b5e <__aeabi_d2f+0x7a>
 8000b1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1e:	bfbc      	itt	lt
 8000b20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	4770      	bxlt	lr
 8000b26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2e:	f1c2 0218 	rsb	r2, r2, #24
 8000b32:	f1c2 0c20 	rsb	ip, r2, #32
 8000b36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3e:	bf18      	it	ne
 8000b40:	f040 0001 	orrne.w	r0, r0, #1
 8000b44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b50:	ea40 000c 	orr.w	r0, r0, ip
 8000b54:	fa23 f302 	lsr.w	r3, r3, r2
 8000b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b5c:	e7cc      	b.n	8000af8 <__aeabi_d2f+0x14>
 8000b5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b62:	d107      	bne.n	8000b74 <__aeabi_d2f+0x90>
 8000b64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b68:	bf1e      	ittt	ne
 8000b6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b72:	4770      	bxne	lr
 8000b74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_frsub>:
 8000b84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b88:	e002      	b.n	8000b90 <__addsf3>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_fsub>:
 8000b8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b90 <__addsf3>:
 8000b90:	0042      	lsls	r2, r0, #1
 8000b92:	bf1f      	itttt	ne
 8000b94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b98:	ea92 0f03 	teqne	r2, r3
 8000b9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba4:	d06a      	beq.n	8000c7c <__addsf3+0xec>
 8000ba6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000baa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bae:	bfc1      	itttt	gt
 8000bb0:	18d2      	addgt	r2, r2, r3
 8000bb2:	4041      	eorgt	r1, r0
 8000bb4:	4048      	eorgt	r0, r1
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	bfb8      	it	lt
 8000bba:	425b      	neglt	r3, r3
 8000bbc:	2b19      	cmp	r3, #25
 8000bbe:	bf88      	it	hi
 8000bc0:	4770      	bxhi	lr
 8000bc2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4240      	negne	r0, r0
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bde:	bf18      	it	ne
 8000be0:	4249      	negne	r1, r1
 8000be2:	ea92 0f03 	teq	r2, r3
 8000be6:	d03f      	beq.n	8000c68 <__addsf3+0xd8>
 8000be8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bec:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf0:	eb10 000c 	adds.w	r0, r0, ip
 8000bf4:	f1c3 0320 	rsb	r3, r3, #32
 8000bf8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bfc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	d502      	bpl.n	8000c08 <__addsf3+0x78>
 8000c02:	4249      	negs	r1, r1
 8000c04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c0c:	d313      	bcc.n	8000c36 <__addsf3+0xa6>
 8000c0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c12:	d306      	bcc.n	8000c22 <__addsf3+0x92>
 8000c14:	0840      	lsrs	r0, r0, #1
 8000c16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1a:	f102 0201 	add.w	r2, r2, #1
 8000c1e:	2afe      	cmp	r2, #254	; 0xfe
 8000c20:	d251      	bcs.n	8000cc6 <__addsf3+0x136>
 8000c22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2a:	bf08      	it	eq
 8000c2c:	f020 0001 	biceq.w	r0, r0, #1
 8000c30:	ea40 0003 	orr.w	r0, r0, r3
 8000c34:	4770      	bx	lr
 8000c36:	0049      	lsls	r1, r1, #1
 8000c38:	eb40 0000 	adc.w	r0, r0, r0
 8000c3c:	3a01      	subs	r2, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c44:	d2ed      	bcs.n	8000c22 <__addsf3+0x92>
 8000c46:	fab0 fc80 	clz	ip, r0
 8000c4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c56:	bfaa      	itet	ge
 8000c58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c5c:	4252      	neglt	r2, r2
 8000c5e:	4318      	orrge	r0, r3
 8000c60:	bfbc      	itt	lt
 8000c62:	40d0      	lsrlt	r0, r2
 8000c64:	4318      	orrlt	r0, r3
 8000c66:	4770      	bx	lr
 8000c68:	f092 0f00 	teq	r2, #0
 8000c6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c70:	bf06      	itte	eq
 8000c72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c76:	3201      	addeq	r2, #1
 8000c78:	3b01      	subne	r3, #1
 8000c7a:	e7b5      	b.n	8000be8 <__addsf3+0x58>
 8000c7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c84:	bf18      	it	ne
 8000c86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8a:	d021      	beq.n	8000cd0 <__addsf3+0x140>
 8000c8c:	ea92 0f03 	teq	r2, r3
 8000c90:	d004      	beq.n	8000c9c <__addsf3+0x10c>
 8000c92:	f092 0f00 	teq	r2, #0
 8000c96:	bf08      	it	eq
 8000c98:	4608      	moveq	r0, r1
 8000c9a:	4770      	bx	lr
 8000c9c:	ea90 0f01 	teq	r0, r1
 8000ca0:	bf1c      	itt	ne
 8000ca2:	2000      	movne	r0, #0
 8000ca4:	4770      	bxne	lr
 8000ca6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000caa:	d104      	bne.n	8000cb6 <__addsf3+0x126>
 8000cac:	0040      	lsls	r0, r0, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb4:	4770      	bx	lr
 8000cb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cba:	bf3c      	itt	cc
 8000cbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc0:	4770      	bxcc	lr
 8000cc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	4770      	bx	lr
 8000cd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd4:	bf16      	itet	ne
 8000cd6:	4608      	movne	r0, r1
 8000cd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cdc:	4601      	movne	r1, r0
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	bf06      	itte	eq
 8000ce2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ce6:	ea90 0f01 	teqeq	r0, r1
 8000cea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cee:	4770      	bx	lr

08000cf0 <__aeabi_ui2f>:
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e004      	b.n	8000d00 <__aeabi_i2f+0x8>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_i2f>:
 8000cf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cfc:	bf48      	it	mi
 8000cfe:	4240      	negmi	r0, r0
 8000d00:	ea5f 0c00 	movs.w	ip, r0
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d0c:	4601      	mov	r1, r0
 8000d0e:	f04f 0000 	mov.w	r0, #0
 8000d12:	e01c      	b.n	8000d4e <__aeabi_l2f+0x2a>

08000d14 <__aeabi_ul2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e00a      	b.n	8000d38 <__aeabi_l2f+0x14>
 8000d22:	bf00      	nop

08000d24 <__aeabi_l2f>:
 8000d24:	ea50 0201 	orrs.w	r2, r0, r1
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d30:	d502      	bpl.n	8000d38 <__aeabi_l2f+0x14>
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	ea5f 0c01 	movs.w	ip, r1
 8000d3c:	bf02      	ittt	eq
 8000d3e:	4684      	moveq	ip, r0
 8000d40:	4601      	moveq	r1, r0
 8000d42:	2000      	moveq	r0, #0
 8000d44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d48:	bf08      	it	eq
 8000d4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d52:	fabc f28c 	clz	r2, ip
 8000d56:	3a08      	subs	r2, #8
 8000d58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d5c:	db10      	blt.n	8000d80 <__aeabi_l2f+0x5c>
 8000d5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d62:	4463      	add	r3, ip
 8000d64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d70:	fa20 f202 	lsr.w	r2, r0, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	f020 0001 	biceq.w	r0, r0, #1
 8000d7e:	4770      	bx	lr
 8000d80:	f102 0220 	add.w	r2, r2, #32
 8000d84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d90:	fa21 f202 	lsr.w	r2, r1, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9e:	4770      	bx	lr

08000da0 <__gesf2>:
 8000da0:	f04f 3cff 	mov.w	ip, #4294967295
 8000da4:	e006      	b.n	8000db4 <__cmpsf2+0x4>
 8000da6:	bf00      	nop

08000da8 <__lesf2>:
 8000da8:	f04f 0c01 	mov.w	ip, #1
 8000dac:	e002      	b.n	8000db4 <__cmpsf2+0x4>
 8000dae:	bf00      	nop

08000db0 <__cmpsf2>:
 8000db0:	f04f 0c01 	mov.w	ip, #1
 8000db4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000db8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc4:	bf18      	it	ne
 8000dc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dca:	d011      	beq.n	8000df0 <__cmpsf2+0x40>
 8000dcc:	b001      	add	sp, #4
 8000dce:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dd2:	bf18      	it	ne
 8000dd4:	ea90 0f01 	teqne	r0, r1
 8000dd8:	bf58      	it	pl
 8000dda:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dde:	bf88      	it	hi
 8000de0:	17c8      	asrhi	r0, r1, #31
 8000de2:	bf38      	it	cc
 8000de4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000de8:	bf18      	it	ne
 8000dea:	f040 0001 	orrne.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000df4:	d102      	bne.n	8000dfc <__cmpsf2+0x4c>
 8000df6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dfa:	d105      	bne.n	8000e08 <__cmpsf2+0x58>
 8000dfc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e00:	d1e4      	bne.n	8000dcc <__cmpsf2+0x1c>
 8000e02:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e06:	d0e1      	beq.n	8000dcc <__cmpsf2+0x1c>
 8000e08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <__aeabi_cfrcmple>:
 8000e10:	4684      	mov	ip, r0
 8000e12:	4608      	mov	r0, r1
 8000e14:	4661      	mov	r1, ip
 8000e16:	e7ff      	b.n	8000e18 <__aeabi_cfcmpeq>

08000e18 <__aeabi_cfcmpeq>:
 8000e18:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e1a:	f7ff ffc9 	bl	8000db0 <__cmpsf2>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	bf48      	it	mi
 8000e22:	f110 0f00 	cmnmi.w	r0, #0
 8000e26:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e28 <__aeabi_fcmpeq>:
 8000e28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e2c:	f7ff fff4 	bl	8000e18 <__aeabi_cfcmpeq>
 8000e30:	bf0c      	ite	eq
 8000e32:	2001      	moveq	r0, #1
 8000e34:	2000      	movne	r0, #0
 8000e36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3a:	bf00      	nop

08000e3c <__aeabi_fcmplt>:
 8000e3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e40:	f7ff ffea 	bl	8000e18 <__aeabi_cfcmpeq>
 8000e44:	bf34      	ite	cc
 8000e46:	2001      	movcc	r0, #1
 8000e48:	2000      	movcs	r0, #0
 8000e4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4e:	bf00      	nop

08000e50 <__aeabi_fcmple>:
 8000e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e54:	f7ff ffe0 	bl	8000e18 <__aeabi_cfcmpeq>
 8000e58:	bf94      	ite	ls
 8000e5a:	2001      	movls	r0, #1
 8000e5c:	2000      	movhi	r0, #0
 8000e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e62:	bf00      	nop

08000e64 <__aeabi_fcmpge>:
 8000e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e68:	f7ff ffd2 	bl	8000e10 <__aeabi_cfrcmple>
 8000e6c:	bf94      	ite	ls
 8000e6e:	2001      	movls	r0, #1
 8000e70:	2000      	movhi	r0, #0
 8000e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e76:	bf00      	nop

08000e78 <__aeabi_fcmpgt>:
 8000e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e7c:	f7ff ffc8 	bl	8000e10 <__aeabi_cfrcmple>
 8000e80:	bf34      	ite	cc
 8000e82:	2001      	movcc	r0, #1
 8000e84:	2000      	movcs	r0, #0
 8000e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8a:	bf00      	nop

08000e8c <__aeabi_f2iz>:
 8000e8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e94:	d30f      	bcc.n	8000eb6 <__aeabi_f2iz+0x2a>
 8000e96:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e9e:	d90d      	bls.n	8000ebc <__aeabi_f2iz+0x30>
 8000ea0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ea8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000eac:	fa23 f002 	lsr.w	r0, r3, r2
 8000eb0:	bf18      	it	ne
 8000eb2:	4240      	negne	r0, r0
 8000eb4:	4770      	bx	lr
 8000eb6:	f04f 0000 	mov.w	r0, #0
 8000eba:	4770      	bx	lr
 8000ebc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ec0:	d101      	bne.n	8000ec6 <__aeabi_f2iz+0x3a>
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	d105      	bne.n	8000ed2 <__aeabi_f2iz+0x46>
 8000ec6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f04f 0000 	mov.w	r0, #0
 8000ed6:	4770      	bx	lr

08000ed8 <delay_us>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t us){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->CNT = 0;
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <delay_us+0x34>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim4);
 8000eea:	4808      	ldr	r0, [pc, #32]	; (8000f0c <delay_us+0x34>)
 8000eec:	f002 fafe 	bl	80034ec <HAL_TIM_Base_Start>
	while(htim4.Instance->CNT < us);
 8000ef0:	bf00      	nop
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <delay_us+0x34>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d3f9      	bcc.n	8000ef2 <delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim4);
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <delay_us+0x34>)
 8000f00:	f002 fb3e 	bl	8003580 <HAL_TIM_Base_Stop>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000011c 	.word	0x2000011c

08000f10 <get_distance>:

uint8_t get_distance()
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1a:	4825      	ldr	r0, [pc, #148]	; (8000fb0 <get_distance+0xa0>)
 8000f1c:	f001 fe63 	bl	8002be6 <HAL_GPIO_WritePin>
	delay_us(10);
 8000f20:	200a      	movs	r0, #10
 8000f22:	f7ff ffd9 	bl	8000ed8 <delay_us>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2c:	4820      	ldr	r0, [pc, #128]	; (8000fb0 <get_distance+0xa0>)
 8000f2e:	f001 fe5a 	bl	8002be6 <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0);
 8000f32:	bf00      	nop
 8000f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f38:	481d      	ldr	r0, [pc, #116]	; (8000fb0 <get_distance+0xa0>)
 8000f3a:	f001 fe3d 	bl	8002bb8 <HAL_GPIO_ReadPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f7      	beq.n	8000f34 <get_distance+0x24>

	HAL_TIM_Base_Start(&htim4);
 8000f44:	481b      	ldr	r0, [pc, #108]	; (8000fb4 <get_distance+0xa4>)
 8000f46:	f002 fad1 	bl	80034ec <HAL_TIM_Base_Start>

	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0)
 8000f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4e:	4818      	ldr	r0, [pc, #96]	; (8000fb0 <get_distance+0xa0>)
 8000f50:	f001 fe32 	bl	8002bb8 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d117      	bne.n	8000f8a <get_distance+0x7a>
		{
			HAL_TIM_Base_Stop(&htim4);
 8000f5a:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <get_distance+0xa4>)
 8000f5c:	f002 fb10 	bl	8003580 <HAL_TIM_Base_Stop>
			break;
 8000f60:	bf00      	nop
		{
			HAL_TIM_Base_Stop(&htim4);
			return 0;
		}
	}
	return 0.017 * htim4.Instance->CNT;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <get_distance+0xa4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fae7 	bl	800053c <__aeabi_ui2d>
 8000f6e:	a30e      	add	r3, pc, #56	; (adr r3, 8000fa8 <get_distance+0x98>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff fb5c 	bl	8000630 <__aeabi_dmul>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fd90 	bl	8000aa4 <__aeabi_d2uiz>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	e009      	b.n	8000f9e <get_distance+0x8e>
		if(htim4.Instance->CNT > 171600)
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <get_distance+0xa4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <get_distance+0xa8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d9d9      	bls.n	8000f4a <get_distance+0x3a>
			HAL_TIM_Base_Stop(&htim4);
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <get_distance+0xa4>)
 8000f98:	f002 faf2 	bl	8003580 <HAL_TIM_Base_Stop>
			return 0;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	b020c49c 	.word	0xb020c49c
 8000fac:	3f916872 	.word	0x3f916872
 8000fb0:	40010c00 	.word	0x40010c00
 8000fb4:	2000011c 	.word	0x2000011c
 8000fb8:	00029e50 	.word	0x00029e50
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <cal_pid>:

void cal_pid()
{
 8000fc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fc4:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - time >= 1000)
 8000fc6:	f001 faab 	bl	8002520 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	4b9c      	ldr	r3, [pc, #624]	; (8001240 <cal_pid+0x280>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fd6:	d36c      	bcc.n	80010b2 <cal_pid+0xf2>
	{
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		rate_1 =(en_counter_1 - pre_en_counter_1)/374.0;
 8000fd8:	4b9a      	ldr	r3, [pc, #616]	; (8001244 <cal_pid+0x284>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b99      	ldr	r3, [pc, #612]	; (8001248 <cal_pid+0x288>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fab7 	bl	800055c <__aeabi_i2d>
 8000fee:	a392      	add	r3, pc, #584	; (adr r3, 8001238 <cal_pid+0x278>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff fc46 	bl	8000884 <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fd70 	bl	8000ae4 <__aeabi_d2f>
 8001004:	4603      	mov	r3, r0
 8001006:	4a91      	ldr	r2, [pc, #580]	; (800124c <cal_pid+0x28c>)
 8001008:	6013      	str	r3, [r2, #0]
		rate_60_1 = rate_1 * 15;
 800100a:	4b90      	ldr	r3, [pc, #576]	; (800124c <cal_pid+0x28c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4990      	ldr	r1, [pc, #576]	; (8001250 <cal_pid+0x290>)
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f89d 	bl	8000150 <__aeabi_fmul>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b8e      	ldr	r3, [pc, #568]	; (8001254 <cal_pid+0x294>)
 800101c:	601a      	str	r2, [r3, #0]
		rate_2 =(en_counter_2 - pre_encounter_2)/374.0;
 800101e:	4b8e      	ldr	r3, [pc, #568]	; (8001258 <cal_pid+0x298>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b21b      	sxth	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	4b8d      	ldr	r3, [pc, #564]	; (800125c <cal_pid+0x29c>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	b21b      	sxth	r3, r3
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa94 	bl	800055c <__aeabi_i2d>
 8001034:	a380      	add	r3, pc, #512	; (adr r3, 8001238 <cal_pid+0x278>)
 8001036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103a:	f7ff fc23 	bl	8000884 <__aeabi_ddiv>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fd4d 	bl	8000ae4 <__aeabi_d2f>
 800104a:	4603      	mov	r3, r0
 800104c:	4a84      	ldr	r2, [pc, #528]	; (8001260 <cal_pid+0x2a0>)
 800104e:	6013      	str	r3, [r2, #0]
		rate_60_2 = rate_2 * 15;
 8001050:	4b83      	ldr	r3, [pc, #524]	; (8001260 <cal_pid+0x2a0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	497e      	ldr	r1, [pc, #504]	; (8001250 <cal_pid+0x290>)
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f87a 	bl	8000150 <__aeabi_fmul>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b80      	ldr	r3, [pc, #512]	; (8001264 <cal_pid+0x2a4>)
 8001062:	601a      	str	r2, [r3, #0]

		pre_en_counter_1 = en_counter_1;
 8001064:	4b77      	ldr	r3, [pc, #476]	; (8001244 <cal_pid+0x284>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b77      	ldr	r3, [pc, #476]	; (8001248 <cal_pid+0x288>)
 800106c:	801a      	strh	r2, [r3, #0]
		pre_encounter_2 = en_counter_2;
 800106e:	4b7a      	ldr	r3, [pc, #488]	; (8001258 <cal_pid+0x298>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b79      	ldr	r3, [pc, #484]	; (800125c <cal_pid+0x29c>)
 8001076:	801a      	strh	r2, [r3, #0]

		error_1 = first_val - rate_60_1;
 8001078:	4b7b      	ldr	r3, [pc, #492]	; (8001268 <cal_pid+0x2a8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a75      	ldr	r2, [pc, #468]	; (8001254 <cal_pid+0x294>)
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fd82 	bl	8000b8c <__aeabi_fsub>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b77      	ldr	r3, [pc, #476]	; (800126c <cal_pid+0x2ac>)
 800108e:	601a      	str	r2, [r3, #0]
		error_2 = first_val - rate_60_2;
 8001090:	4b75      	ldr	r3, [pc, #468]	; (8001268 <cal_pid+0x2a8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a73      	ldr	r2, [pc, #460]	; (8001264 <cal_pid+0x2a4>)
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fd76 	bl	8000b8c <__aeabi_fsub>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b72      	ldr	r3, [pc, #456]	; (8001270 <cal_pid+0x2b0>)
 80010a6:	601a      	str	r2, [r3, #0]

		time = HAL_GetTick();
 80010a8:	f001 fa3a 	bl	8002520 <HAL_GetTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a64      	ldr	r2, [pc, #400]	; (8001240 <cal_pid+0x280>)
 80010b0:	6013      	str	r3, [r2, #0]
	}
	en_counter_2 = __HAL_TIM_GET_COUNTER(&htim3);
 80010b2:	4b70      	ldr	r3, [pc, #448]	; (8001274 <cal_pid+0x2b4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	4b67      	ldr	r3, [pc, #412]	; (8001258 <cal_pid+0x298>)
 80010bc:	801a      	strh	r2, [r3, #0]
	en_counter_1 = __HAL_TIM_GET_COUNTER(&htim2);
 80010be:	4b6e      	ldr	r3, [pc, #440]	; (8001278 <cal_pid+0x2b8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	4b5f      	ldr	r3, [pc, #380]	; (8001244 <cal_pid+0x284>)
 80010c8:	801a      	strh	r2, [r3, #0]

	P_1 = error_1;
 80010ca:	4b68      	ldr	r3, [pc, #416]	; (800126c <cal_pid+0x2ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a6b      	ldr	r2, [pc, #428]	; (800127c <cal_pid+0x2bc>)
 80010d0:	6013      	str	r3, [r2, #0]
	I_1 = pre_error_1 + error_1;
 80010d2:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <cal_pid+0x2c0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a65      	ldr	r2, [pc, #404]	; (800126c <cal_pid+0x2ac>)
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fd57 	bl	8000b90 <__addsf3>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b67      	ldr	r3, [pc, #412]	; (8001284 <cal_pid+0x2c4>)
 80010e8:	601a      	str	r2, [r3, #0]
	D_1 = error_1 - 2*pre_error_1 + pre_pre_error_2;
 80010ea:	4b60      	ldr	r3, [pc, #384]	; (800126c <cal_pid+0x2ac>)
 80010ec:	681c      	ldr	r4, [r3, #0]
 80010ee:	4b64      	ldr	r3, [pc, #400]	; (8001280 <cal_pid+0x2c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fd4b 	bl	8000b90 <__addsf3>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4619      	mov	r1, r3
 80010fe:	4620      	mov	r0, r4
 8001100:	f7ff fd44 	bl	8000b8c <__aeabi_fsub>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b5f      	ldr	r3, [pc, #380]	; (8001288 <cal_pid+0x2c8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f7ff fd3e 	bl	8000b90 <__addsf3>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b5c      	ldr	r3, [pc, #368]	; (800128c <cal_pid+0x2cc>)
 800111a:	601a      	str	r2, [r3, #0]
	PID_val_1 = (Kp1 * P_1) + (Ki1 *0.5 * I_1) + (Kd1 *D_1);
 800111c:	4b5c      	ldr	r3, [pc, #368]	; (8001290 <cal_pid+0x2d0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a56      	ldr	r2, [pc, #344]	; (800127c <cal_pid+0x2bc>)
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f812 	bl	8000150 <__aeabi_fmul>
 800112c:	4603      	mov	r3, r0
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa26 	bl	8000580 <__aeabi_f2d>
 8001134:	4604      	mov	r4, r0
 8001136:	460d      	mov	r5, r1
 8001138:	4b56      	ldr	r3, [pc, #344]	; (8001294 <cal_pid+0x2d4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fa1f 	bl	8000580 <__aeabi_f2d>
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	4b54      	ldr	r3, [pc, #336]	; (8001298 <cal_pid+0x2d8>)
 8001148:	f7ff fa72 	bl	8000630 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4690      	mov	r8, r2
 8001152:	4699      	mov	r9, r3
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <cal_pid+0x2c4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fa11 	bl	8000580 <__aeabi_f2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4640      	mov	r0, r8
 8001164:	4649      	mov	r1, r9
 8001166:	f7ff fa63 	bl	8000630 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
 8001172:	f7ff f8a7 	bl	80002c4 <__adddf3>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4614      	mov	r4, r2
 800117c:	461d      	mov	r5, r3
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <cal_pid+0x2dc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a42      	ldr	r2, [pc, #264]	; (800128c <cal_pid+0x2cc>)
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7fe ffe1 	bl	8000150 <__aeabi_fmul>
 800118e:	4603      	mov	r3, r0
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9f5 	bl	8000580 <__aeabi_f2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4620      	mov	r0, r4
 800119c:	4629      	mov	r1, r5
 800119e:	f7ff f891 	bl	80002c4 <__adddf3>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fc9b 	bl	8000ae4 <__aeabi_d2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a3b      	ldr	r2, [pc, #236]	; (80012a0 <cal_pid+0x2e0>)
 80011b2:	6013      	str	r3, [r2, #0]
	pre_pre_error_1 = pre_error_1;
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <cal_pid+0x2c0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a3a      	ldr	r2, [pc, #232]	; (80012a4 <cal_pid+0x2e4>)
 80011ba:	6013      	str	r3, [r2, #0]
	pre_error_1 = error_1;
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <cal_pid+0x2ac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a2f      	ldr	r2, [pc, #188]	; (8001280 <cal_pid+0x2c0>)
 80011c2:	6013      	str	r3, [r2, #0]
	pre_PID_val_1 = PID_val_1;
 80011c4:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <cal_pid+0x2e0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a37      	ldr	r2, [pc, #220]	; (80012a8 <cal_pid+0x2e8>)
 80011ca:	6013      	str	r3, [r2, #0]
	P_2 = error_2;
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <cal_pid+0x2b0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a36      	ldr	r2, [pc, #216]	; (80012ac <cal_pid+0x2ec>)
 80011d2:	6013      	str	r3, [r2, #0]
	I_2 = pre_error_2 + error_2;
 80011d4:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <cal_pid+0x2f0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a25      	ldr	r2, [pc, #148]	; (8001270 <cal_pid+0x2b0>)
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fcd6 	bl	8000b90 <__addsf3>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <cal_pid+0x2f4>)
 80011ea:	601a      	str	r2, [r3, #0]
	D_2 = error_2 - 2*pre_error_2 + pre_pre_error_2;
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <cal_pid+0x2b0>)
 80011ee:	681c      	ldr	r4, [r3, #0]
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <cal_pid+0x2f0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fcca 	bl	8000b90 <__addsf3>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4619      	mov	r1, r3
 8001200:	4620      	mov	r0, r4
 8001202:	f7ff fcc3 	bl	8000b8c <__aeabi_fsub>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <cal_pid+0x2c8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	4610      	mov	r0, r2
 8001212:	f7ff fcbd 	bl	8000b90 <__addsf3>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <cal_pid+0x2f8>)
 800121c:	601a      	str	r2, [r3, #0]
	PID_val_2 = (Kp2 * P_2) + (Ki2 * I_2) + (Kd2 *D_2);
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <cal_pid+0x2fc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a22      	ldr	r2, [pc, #136]	; (80012ac <cal_pid+0x2ec>)
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7fe ff91 	bl	8000150 <__aeabi_fmul>
 800122e:	4603      	mov	r3, r0
 8001230:	e046      	b.n	80012c0 <cal_pid+0x300>
 8001232:	bf00      	nop
 8001234:	f3af 8000 	nop.w
 8001238:	00000000 	.word	0x00000000
 800123c:	40776000 	.word	0x40776000
 8001240:	20000598 	.word	0x20000598
 8001244:	2000059c 	.word	0x2000059c
 8001248:	200005a0 	.word	0x200005a0
 800124c:	200005a4 	.word	0x200005a4
 8001250:	41700000 	.word	0x41700000
 8001254:	200005ac 	.word	0x200005ac
 8001258:	2000059e 	.word	0x2000059e
 800125c:	200005a2 	.word	0x200005a2
 8001260:	200005a8 	.word	0x200005a8
 8001264:	200005b0 	.word	0x200005b0
 8001268:	20000010 	.word	0x20000010
 800126c:	200005cc 	.word	0x200005cc
 8001270:	200005d8 	.word	0x200005d8
 8001274:	200000d4 	.word	0x200000d4
 8001278:	2000008c 	.word	0x2000008c
 800127c:	200005e4 	.word	0x200005e4
 8001280:	200005d0 	.word	0x200005d0
 8001284:	200005ec 	.word	0x200005ec
 8001288:	200005e0 	.word	0x200005e0
 800128c:	200005f4 	.word	0x200005f4
 8001290:	20000000 	.word	0x20000000
 8001294:	200005b4 	.word	0x200005b4
 8001298:	3fe00000 	.word	0x3fe00000
 800129c:	20000008 	.word	0x20000008
 80012a0:	200005bc 	.word	0x200005bc
 80012a4:	200005d4 	.word	0x200005d4
 80012a8:	200005c0 	.word	0x200005c0
 80012ac:	200005e8 	.word	0x200005e8
 80012b0:	200005dc 	.word	0x200005dc
 80012b4:	200005f0 	.word	0x200005f0
 80012b8:	200005f8 	.word	0x200005f8
 80012bc:	20000004 	.word	0x20000004
 80012c0:	461c      	mov	r4, r3
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <cal_pid+0x360>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <cal_pid+0x364>)
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7fe ff3f 	bl	8000150 <__aeabi_fmul>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4619      	mov	r1, r3
 80012d6:	4620      	mov	r0, r4
 80012d8:	f7ff fc5a 	bl	8000b90 <__addsf3>
 80012dc:	4603      	mov	r3, r0
 80012de:	461c      	mov	r4, r3
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <cal_pid+0x368>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a11      	ldr	r2, [pc, #68]	; (800132c <cal_pid+0x36c>)
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7fe ff30 	bl	8000150 <__aeabi_fmul>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4620      	mov	r0, r4
 80012f6:	f7ff fc4b 	bl	8000b90 <__addsf3>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <cal_pid+0x370>)
 8001300:	601a      	str	r2, [r3, #0]
	pre_pre_error_1 = pre_error_1;
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <cal_pid+0x374>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <cal_pid+0x378>)
 8001308:	6013      	str	r3, [r2, #0]
	pre_error_2 = error_2;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <cal_pid+0x37c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <cal_pid+0x380>)
 8001310:	6013      	str	r3, [r2, #0]
	pre_PID_val_2 = PID_val_2;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <cal_pid+0x370>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <cal_pid+0x384>)
 8001318:	6013      	str	r3, [r2, #0]
}
 800131a:	bf00      	nop
 800131c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001320:	200005b8 	.word	0x200005b8
 8001324:	200005f0 	.word	0x200005f0
 8001328:	2000000c 	.word	0x2000000c
 800132c:	200005f8 	.word	0x200005f8
 8001330:	200005c4 	.word	0x200005c4
 8001334:	200005d0 	.word	0x200005d0
 8001338:	200005d4 	.word	0x200005d4
 800133c:	200005d8 	.word	0x200005d8
 8001340:	200005dc 	.word	0x200005dc
 8001344:	200005c8 	.word	0x200005c8

08001348 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart3.Instance)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_UART_RxCpltCallback+0x84>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d133      	bne.n	80013c4 <HAL_UART_RxCpltCallback+0x7c>
	{
		if(UART_num == 0)
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_UART_RxCpltCallback+0x88>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10d      	bne.n	8001380 <HAL_UART_RxCpltCallback+0x38>
		{
			UART_buffer[UART_num] = Rx_Buff;
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_UART_RxCpltCallback+0x88>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_UART_RxCpltCallback+0x8c>)
 800136c:	7819      	ldrb	r1, [r3, #0]
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HAL_UART_RxCpltCallback+0x90>)
 8001370:	5499      	strb	r1, [r3, r2]
			UART_num++;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_UART_RxCpltCallback+0x88>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_UART_RxCpltCallback+0x88>)
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	e01c      	b.n	80013ba <HAL_UART_RxCpltCallback+0x72>
		}
		else
		{
			UART_buffer[UART_num] = Rx_Buff;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_UART_RxCpltCallback+0x88>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_UART_RxCpltCallback+0x8c>)
 8001388:	7819      	ldrb	r1, [r3, #0]
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_UART_RxCpltCallback+0x90>)
 800138c:	5499      	strb	r1, [r3, r2]
			if(UART_buffer[UART_num] == UART_buffer[UART_num - 1])
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_UART_RxCpltCallback+0x88>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_UART_RxCpltCallback+0x90>)
 8001396:	5c9a      	ldrb	r2, [r3, r2]
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_UART_RxCpltCallback+0x88>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	490e      	ldr	r1, [pc, #56]	; (80013d8 <HAL_UART_RxCpltCallback+0x90>)
 80013a0:	5ccb      	ldrb	r3, [r1, r3]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d106      	bne.n	80013b4 <HAL_UART_RxCpltCallback+0x6c>
			{
				UART_num++;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_UART_RxCpltCallback+0x88>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_UART_RxCpltCallback+0x88>)
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	e002      	b.n	80013ba <HAL_UART_RxCpltCallback+0x72>
			}
			else
			{
				UART_num = 0;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_UART_RxCpltCallback+0x88>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(huart, &Rx_Buff, 1);
 80013ba:	2201      	movs	r2, #1
 80013bc:	4905      	ldr	r1, [pc, #20]	; (80013d4 <HAL_UART_RxCpltCallback+0x8c>)
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f003 f850 	bl	8004464 <HAL_UART_Receive_IT>
	}
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000164 	.word	0x20000164
 80013d0:	20000594 	.word	0x20000594
 80013d4:	200001a8 	.word	0x200001a8
 80013d8:	200001ac 	.word	0x200001ac
 80013dc:	00000000 	.word	0x00000000

080013e0 <ham_chuyen>:
void ham_chuyen()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	if(error_1  < 0)
 80013e4:	4b4c      	ldr	r3, [pc, #304]	; (8001518 <ham_chuyen+0x138>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f04f 0100 	mov.w	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fd25 	bl	8000e3c <__aeabi_fcmplt>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00f      	beq.n	8001418 <ham_chuyen+0x38>
	{
		PID_1 = first_val - PID_val_1;
 80013f8:	4b48      	ldr	r3, [pc, #288]	; (800151c <ham_chuyen+0x13c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a48      	ldr	r2, [pc, #288]	; (8001520 <ham_chuyen+0x140>)
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fbc2 	bl	8000b8c <__aeabi_fsub>
 8001408:	4603      	mov	r3, r0
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fd3e 	bl	8000e8c <__aeabi_f2iz>
 8001410:	4603      	mov	r3, r0
 8001412:	4a44      	ldr	r2, [pc, #272]	; (8001524 <ham_chuyen+0x144>)
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00e      	b.n	8001436 <ham_chuyen+0x56>
	}
	else
	{
		PID_1 = first_val + PID_val_1;
 8001418:	4b40      	ldr	r3, [pc, #256]	; (800151c <ham_chuyen+0x13c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a40      	ldr	r2, [pc, #256]	; (8001520 <ham_chuyen+0x140>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fbb4 	bl	8000b90 <__addsf3>
 8001428:	4603      	mov	r3, r0
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fd2e 	bl	8000e8c <__aeabi_f2iz>
 8001430:	4603      	mov	r3, r0
 8001432:	4a3c      	ldr	r2, [pc, #240]	; (8001524 <ham_chuyen+0x144>)
 8001434:	6013      	str	r3, [r2, #0]
	}
	if(error_2 < 0)
 8001436:	4b3c      	ldr	r3, [pc, #240]	; (8001528 <ham_chuyen+0x148>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f04f 0100 	mov.w	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fcfc 	bl	8000e3c <__aeabi_fcmplt>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00f      	beq.n	800146a <ham_chuyen+0x8a>
	{
		PID_2 = first_val - PID_val_2;
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <ham_chuyen+0x13c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a37      	ldr	r2, [pc, #220]	; (800152c <ham_chuyen+0x14c>)
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fb99 	bl	8000b8c <__aeabi_fsub>
 800145a:	4603      	mov	r3, r0
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fd15 	bl	8000e8c <__aeabi_f2iz>
 8001462:	4603      	mov	r3, r0
 8001464:	4a32      	ldr	r2, [pc, #200]	; (8001530 <ham_chuyen+0x150>)
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	e00e      	b.n	8001488 <ham_chuyen+0xa8>
	}
	else
	{
		PID_2 = first_val + PID_val_2;
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <ham_chuyen+0x13c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a2f      	ldr	r2, [pc, #188]	; (800152c <ham_chuyen+0x14c>)
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb8b 	bl	8000b90 <__addsf3>
 800147a:	4603      	mov	r3, r0
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fd05 	bl	8000e8c <__aeabi_f2iz>
 8001482:	4603      	mov	r3, r0
 8001484:	4a2a      	ldr	r2, [pc, #168]	; (8001530 <ham_chuyen+0x150>)
 8001486:	6013      	str	r3, [r2, #0]
	}
	PWM1 = (PID_1 + 86.602)/0.3664;
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <ham_chuyen+0x144>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f865 	bl	800055c <__aeabi_i2d>
 8001492:	a31b      	add	r3, pc, #108	; (adr r3, 8001500 <ham_chuyen+0x120>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7fe ff14 	bl	80002c4 <__adddf3>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	a318      	add	r3, pc, #96	; (adr r3, 8001508 <ham_chuyen+0x128>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff f9eb 	bl	8000884 <__aeabi_ddiv>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff facd 	bl	8000a54 <__aeabi_d2iz>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a1d      	ldr	r2, [pc, #116]	; (8001534 <ham_chuyen+0x154>)
 80014be:	6013      	str	r3, [r2, #0]
	PWM2 = (PID_2 + 84.177)/0.3664;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <ham_chuyen+0x150>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f849 	bl	800055c <__aeabi_i2d>
 80014ca:	a311      	add	r3, pc, #68	; (adr r3, 8001510 <ham_chuyen+0x130>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	f7fe fef8 	bl	80002c4 <__adddf3>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	a30a      	add	r3, pc, #40	; (adr r3, 8001508 <ham_chuyen+0x128>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff f9cf 	bl	8000884 <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fab1 	bl	8000a54 <__aeabi_d2iz>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a10      	ldr	r2, [pc, #64]	; (8001538 <ham_chuyen+0x158>)
 80014f6:	6013      	str	r3, [r2, #0]

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	f3af 8000 	nop.w
 8001500:	2b020c4a 	.word	0x2b020c4a
 8001504:	4055a687 	.word	0x4055a687
 8001508:	fc504817 	.word	0xfc504817
 800150c:	3fd77318 	.word	0x3fd77318
 8001510:	f7ced917 	.word	0xf7ced917
 8001514:	40550b53 	.word	0x40550b53
 8001518:	200005cc 	.word	0x200005cc
 800151c:	20000010 	.word	0x20000010
 8001520:	200005bc 	.word	0x200005bc
 8001524:	200005fc 	.word	0x200005fc
 8001528:	200005d8 	.word	0x200005d8
 800152c:	200005c4 	.word	0x200005c4
 8001530:	20000600 	.word	0x20000600
 8001534:	20000604 	.word	0x20000604
 8001538:	20000608 	.word	0x20000608

0800153c <UART_Handle>:
void UART_Handle()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	if(get_distance() <= s)
 8001540:	f7ff fce6 	bl	8000f10 <get_distance>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	4ba9      	ldr	r3, [pc, #676]	; (80017f0 <UART_Handle+0x2b4>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d803      	bhi.n	8001558 <UART_Handle+0x1c>
	{
		condition = 0;
 8001550:	4ba8      	ldr	r3, [pc, #672]	; (80017f4 <UART_Handle+0x2b8>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e002      	b.n	800155e <UART_Handle+0x22>
	}
	else
	{
		condition = 1;
 8001558:	4ba6      	ldr	r3, [pc, #664]	; (80017f4 <UART_Handle+0x2b8>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]
	}
	if (condition == 0)
 800155e:	4ba5      	ldr	r3, [pc, #660]	; (80017f4 <UART_Handle+0x2b8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 8150 	bne.w	8001808 <UART_Handle+0x2cc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800156e:	48a2      	ldr	r0, [pc, #648]	; (80017f8 <UART_Handle+0x2bc>)
 8001570:	f001 fb39 	bl	8002be6 <HAL_GPIO_WritePin>
		switch((char)UART_buffer[0])
 8001574:	4ba1      	ldr	r3, [pc, #644]	; (80017fc <UART_Handle+0x2c0>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	3b42      	subs	r3, #66	; 0x42
 800157a:	2b10      	cmp	r3, #16
 800157c:	f200 8122 	bhi.w	80017c4 <UART_Handle+0x288>
 8001580:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <UART_Handle+0x4c>)
 8001582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001586:	bf00      	nop
 8001588:	08001613 	.word	0x08001613
 800158c:	080017c5 	.word	0x080017c5
 8001590:	080017c5 	.word	0x080017c5
 8001594:	080017c5 	.word	0x080017c5
 8001598:	080015cd 	.word	0x080015cd
 800159c:	08001749 	.word	0x08001749
 80015a0:	08001787 	.word	0x08001787
 80015a4:	080016cd 	.word	0x080016cd
 80015a8:	0800170b 	.word	0x0800170b
 80015ac:	080017c5 	.word	0x080017c5
 80015b0:	08001651 	.word	0x08001651
 80015b4:	080017c5 	.word	0x080017c5
 80015b8:	080017c5 	.word	0x080017c5
 80015bc:	080017c5 	.word	0x080017c5
 80015c0:	080017c5 	.word	0x080017c5
 80015c4:	080017c5 	.word	0x080017c5
 80015c8:	0800168f 	.word	0x0800168f
					{
					case 'F':
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2104      	movs	r1, #4
 80015d0:	488b      	ldr	r0, [pc, #556]	; (8001800 <UART_Handle+0x2c4>)
 80015d2:	f001 fb08 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2108      	movs	r1, #8
 80015da:	4889      	ldr	r0, [pc, #548]	; (8001800 <UART_Handle+0x2c4>)
 80015dc:	f001 fb03 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2110      	movs	r1, #16
 80015e4:	4886      	ldr	r0, [pc, #536]	; (8001800 <UART_Handle+0x2c4>)
 80015e6:	f001 fafe 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2120      	movs	r1, #32
 80015ee:	4884      	ldr	r0, [pc, #528]	; (8001800 <UART_Handle+0x2c4>)
 80015f0:	f001 faf9 	bl	8002be6 <HAL_GPIO_WritePin>
							cal_pid();
 80015f4:	f7ff fce4 	bl	8000fc0 <cal_pid>
							ham_chuyen();
 80015f8:	f7ff fef2 	bl	80013e0 <ham_chuyen>
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80015fc:	4b81      	ldr	r3, [pc, #516]	; (8001804 <UART_Handle+0x2c8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001604:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001606:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <UART_Handle+0x2c8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800160e:	639a      	str	r2, [r3, #56]	; 0x38
						break;
 8001610:	e0fb      	b.n	800180a <UART_Handle+0x2ce>
					case 'B':
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	2104      	movs	r1, #4
 8001616:	487a      	ldr	r0, [pc, #488]	; (8001800 <UART_Handle+0x2c4>)
 8001618:	f001 fae5 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2108      	movs	r1, #8
 8001620:	4877      	ldr	r0, [pc, #476]	; (8001800 <UART_Handle+0x2c4>)
 8001622:	f001 fae0 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001626:	2201      	movs	r2, #1
 8001628:	2110      	movs	r1, #16
 800162a:	4875      	ldr	r0, [pc, #468]	; (8001800 <UART_Handle+0x2c4>)
 800162c:	f001 fadb 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2120      	movs	r1, #32
 8001634:	4872      	ldr	r0, [pc, #456]	; (8001800 <UART_Handle+0x2c4>)
 8001636:	f001 fad6 	bl	8002be6 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800163a:	4b72      	ldr	r3, [pc, #456]	; (8001804 <UART_Handle+0x2c8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001642:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,960);
 8001644:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <UART_Handle+0x2c8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
						break;
 800164e:	e0dc      	b.n	800180a <UART_Handle+0x2ce>
					case 'L':
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2104      	movs	r1, #4
 8001654:	486a      	ldr	r0, [pc, #424]	; (8001800 <UART_Handle+0x2c4>)
 8001656:	f001 fac6 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800165a:	2201      	movs	r2, #1
 800165c:	2108      	movs	r1, #8
 800165e:	4868      	ldr	r0, [pc, #416]	; (8001800 <UART_Handle+0x2c4>)
 8001660:	f001 fac1 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2110      	movs	r1, #16
 8001668:	4865      	ldr	r0, [pc, #404]	; (8001800 <UART_Handle+0x2c4>)
 800166a:	f001 fabc 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2120      	movs	r1, #32
 8001672:	4863      	ldr	r0, [pc, #396]	; (8001800 <UART_Handle+0x2c4>)
 8001674:	f001 fab7 	bl	8002be6 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001678:	4b62      	ldr	r3, [pc, #392]	; (8001804 <UART_Handle+0x2c8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001680:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001682:	4b60      	ldr	r3, [pc, #384]	; (8001804 <UART_Handle+0x2c8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800168a:	639a      	str	r2, [r3, #56]	; 0x38
						break;
 800168c:	e0bd      	b.n	800180a <UART_Handle+0x2ce>
					case 'R':
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2104      	movs	r1, #4
 8001692:	485b      	ldr	r0, [pc, #364]	; (8001800 <UART_Handle+0x2c4>)
 8001694:	f001 faa7 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2108      	movs	r1, #8
 800169c:	4858      	ldr	r0, [pc, #352]	; (8001800 <UART_Handle+0x2c4>)
 800169e:	f001 faa2 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2110      	movs	r1, #16
 80016a6:	4856      	ldr	r0, [pc, #344]	; (8001800 <UART_Handle+0x2c4>)
 80016a8:	f001 fa9d 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2120      	movs	r1, #32
 80016b0:	4853      	ldr	r0, [pc, #332]	; (8001800 <UART_Handle+0x2c4>)
 80016b2:	f001 fa98 	bl	8002be6 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <UART_Handle+0x2c8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80016c0:	4b50      	ldr	r3, [pc, #320]	; (8001804 <UART_Handle+0x2c8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016c8:	639a      	str	r2, [r3, #56]	; 0x38
						break;
 80016ca:	e09e      	b.n	800180a <UART_Handle+0x2ce>

					case 'I':
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2104      	movs	r1, #4
 80016d0:	484b      	ldr	r0, [pc, #300]	; (8001800 <UART_Handle+0x2c4>)
 80016d2:	f001 fa88 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80016d6:	2201      	movs	r2, #1
 80016d8:	2108      	movs	r1, #8
 80016da:	4849      	ldr	r0, [pc, #292]	; (8001800 <UART_Handle+0x2c4>)
 80016dc:	f001 fa83 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2110      	movs	r1, #16
 80016e4:	4846      	ldr	r0, [pc, #280]	; (8001800 <UART_Handle+0x2c4>)
 80016e6:	f001 fa7e 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2120      	movs	r1, #32
 80016ee:	4844      	ldr	r0, [pc, #272]	; (8001800 <UART_Handle+0x2c4>)
 80016f0:	f001 fa79 	bl	8002be6 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,700);
 80016f4:	4b43      	ldr	r3, [pc, #268]	; (8001804 <UART_Handle+0x2c8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80016fc:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <UART_Handle+0x2c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001706:	639a      	str	r2, [r3, #56]	; 0x38
						break;
 8001708:	e07f      	b.n	800180a <UART_Handle+0x2ce>
					case 'J':
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800170a:	2201      	movs	r2, #1
 800170c:	2104      	movs	r1, #4
 800170e:	483c      	ldr	r0, [pc, #240]	; (8001800 <UART_Handle+0x2c4>)
 8001710:	f001 fa69 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2108      	movs	r1, #8
 8001718:	4839      	ldr	r0, [pc, #228]	; (8001800 <UART_Handle+0x2c4>)
 800171a:	f001 fa64 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800171e:	2201      	movs	r2, #1
 8001720:	2110      	movs	r1, #16
 8001722:	4837      	ldr	r0, [pc, #220]	; (8001800 <UART_Handle+0x2c4>)
 8001724:	f001 fa5f 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2120      	movs	r1, #32
 800172c:	4834      	ldr	r0, [pc, #208]	; (8001800 <UART_Handle+0x2c4>)
 800172e:	f001 fa5a 	bl	8002be6 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,700);
 8001732:	4b34      	ldr	r3, [pc, #208]	; (8001804 <UART_Handle+0x2c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800173a:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800173c:	4b31      	ldr	r3, [pc, #196]	; (8001804 <UART_Handle+0x2c8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001744:	639a      	str	r2, [r3, #56]	; 0x38
						break;
 8001746:	e060      	b.n	800180a <UART_Handle+0x2ce>
					case 'G':
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2104      	movs	r1, #4
 800174c:	482c      	ldr	r0, [pc, #176]	; (8001800 <UART_Handle+0x2c4>)
 800174e:	f001 fa4a 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001752:	2201      	movs	r2, #1
 8001754:	2108      	movs	r1, #8
 8001756:	482a      	ldr	r0, [pc, #168]	; (8001800 <UART_Handle+0x2c4>)
 8001758:	f001 fa45 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2110      	movs	r1, #16
 8001760:	4827      	ldr	r0, [pc, #156]	; (8001800 <UART_Handle+0x2c4>)
 8001762:	f001 fa40 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001766:	2201      	movs	r2, #1
 8001768:	2120      	movs	r1, #32
 800176a:	4825      	ldr	r0, [pc, #148]	; (8001800 <UART_Handle+0x2c4>)
 800176c:	f001 fa3b 	bl	8002be6 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <UART_Handle+0x2c8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001778:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,700);
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <UART_Handle+0x2c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001782:	639a      	str	r2, [r3, #56]	; 0x38
						break;
 8001784:	e041      	b.n	800180a <UART_Handle+0x2ce>
					case 'H':
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001786:	2201      	movs	r2, #1
 8001788:	2104      	movs	r1, #4
 800178a:	481d      	ldr	r0, [pc, #116]	; (8001800 <UART_Handle+0x2c4>)
 800178c:	f001 fa2b 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2108      	movs	r1, #8
 8001794:	481a      	ldr	r0, [pc, #104]	; (8001800 <UART_Handle+0x2c4>)
 8001796:	f001 fa26 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800179a:	2201      	movs	r2, #1
 800179c:	2110      	movs	r1, #16
 800179e:	4818      	ldr	r0, [pc, #96]	; (8001800 <UART_Handle+0x2c4>)
 80017a0:	f001 fa21 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2120      	movs	r1, #32
 80017a8:	4815      	ldr	r0, [pc, #84]	; (8001800 <UART_Handle+0x2c4>)
 80017aa:	f001 fa1c 	bl	8002be6 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <UART_Handle+0x2c8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,700);
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <UART_Handle+0x2c8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
						break;
 80017c2:	e022      	b.n	800180a <UART_Handle+0x2ce>
					default:
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2104      	movs	r1, #4
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <UART_Handle+0x2c4>)
 80017ca:	f001 fa0c 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2108      	movs	r1, #8
 80017d2:	480b      	ldr	r0, [pc, #44]	; (8001800 <UART_Handle+0x2c4>)
 80017d4:	f001 fa07 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2110      	movs	r1, #16
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <UART_Handle+0x2c4>)
 80017de:	f001 fa02 	bl	8002be6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2120      	movs	r1, #32
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <UART_Handle+0x2c4>)
 80017e8:	f001 f9fd 	bl	8002be6 <HAL_GPIO_WritePin>
						break;
 80017ec:	e00d      	b.n	800180a <UART_Handle+0x2ce>
 80017ee:	bf00      	nop
 80017f0:	20000014 	.word	0x20000014
 80017f4:	20000018 	.word	0x20000018
 80017f8:	40010c00 	.word	0x40010c00
 80017fc:	200001ac 	.word	0x200001ac
 8001800:	40010800 	.word	0x40010800
 8001804:	20000044 	.word	0x20000044
					}
	}
 8001808:	bf00      	nop
	if (condition ==1)
 800180a:	4ba8      	ldr	r3, [pc, #672]	; (8001aac <UART_Handle+0x570>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	f040 8149 	bne.w	8001aa6 <UART_Handle+0x56a>
	{
 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800181a:	48a5      	ldr	r0, [pc, #660]	; (8001ab0 <UART_Handle+0x574>)
 800181c:	f001 f9e3 	bl	8002be6 <HAL_GPIO_WritePin>
		switch((char)UART_buffer[0])
 8001820:	4ba4      	ldr	r3, [pc, #656]	; (8001ab4 <UART_Handle+0x578>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	3b42      	subs	r3, #66	; 0x42
 8001826:	2b10      	cmp	r3, #16
 8001828:	f200 8128 	bhi.w	8001a7c <UART_Handle+0x540>
 800182c:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <UART_Handle+0x2f8>)
 800182e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001832:	bf00      	nop
 8001834:	080018cb 	.word	0x080018cb
 8001838:	08001a7d 	.word	0x08001a7d
 800183c:	08001a7d 	.word	0x08001a7d
 8001840:	08001a7d 	.word	0x08001a7d
 8001844:	08001879 	.word	0x08001879
 8001848:	08001a01 	.word	0x08001a01
 800184c:	08001a3f 	.word	0x08001a3f
 8001850:	08001985 	.word	0x08001985
 8001854:	080019c3 	.word	0x080019c3
 8001858:	08001a7d 	.word	0x08001a7d
 800185c:	08001909 	.word	0x08001909
 8001860:	08001a7d 	.word	0x08001a7d
 8001864:	08001a7d 	.word	0x08001a7d
 8001868:	08001a7d 	.word	0x08001a7d
 800186c:	08001a7d 	.word	0x08001a7d
 8001870:	08001a7d 	.word	0x08001a7d
 8001874:	08001947 	.word	0x08001947
			{
			case 'F':
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800187e:	488e      	ldr	r0, [pc, #568]	; (8001ab8 <UART_Handle+0x57c>)
 8001880:	f001 f9b1 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2104      	movs	r1, #4
 8001888:	488c      	ldr	r0, [pc, #560]	; (8001abc <UART_Handle+0x580>)
 800188a:	f001 f9ac 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800188e:	2201      	movs	r2, #1
 8001890:	2108      	movs	r1, #8
 8001892:	488a      	ldr	r0, [pc, #552]	; (8001abc <UART_Handle+0x580>)
 8001894:	f001 f9a7 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2110      	movs	r1, #16
 800189c:	4887      	ldr	r0, [pc, #540]	; (8001abc <UART_Handle+0x580>)
 800189e:	f001 f9a2 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80018a2:	2201      	movs	r2, #1
 80018a4:	2120      	movs	r1, #32
 80018a6:	4885      	ldr	r0, [pc, #532]	; (8001abc <UART_Handle+0x580>)
 80018a8:	f001 f99d 	bl	8002be6 <HAL_GPIO_WritePin>
					cal_pid();
 80018ac:	f7ff fb88 	bl	8000fc0 <cal_pid>
					ham_chuyen();
 80018b0:	f7ff fd96 	bl	80013e0 <ham_chuyen>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,PWM2);
 80018b4:	4b82      	ldr	r3, [pc, #520]	; (8001ac0 <UART_Handle+0x584>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b82      	ldr	r3, [pc, #520]	; (8001ac4 <UART_Handle+0x588>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,PWM1);
 80018be:	4b82      	ldr	r3, [pc, #520]	; (8001ac8 <UART_Handle+0x58c>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <UART_Handle+0x588>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38


				break;
 80018c8:	e0ee      	b.n	8001aa8 <UART_Handle+0x56c>
			case 'B':
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2104      	movs	r1, #4
 80018ce:	487b      	ldr	r0, [pc, #492]	; (8001abc <UART_Handle+0x580>)
 80018d0:	f001 f989 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2108      	movs	r1, #8
 80018d8:	4878      	ldr	r0, [pc, #480]	; (8001abc <UART_Handle+0x580>)
 80018da:	f001 f984 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80018de:	2201      	movs	r2, #1
 80018e0:	2110      	movs	r1, #16
 80018e2:	4876      	ldr	r0, [pc, #472]	; (8001abc <UART_Handle+0x580>)
 80018e4:	f001 f97f 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2120      	movs	r1, #32
 80018ec:	4873      	ldr	r0, [pc, #460]	; (8001abc <UART_Handle+0x580>)
 80018ee:	f001 f97a 	bl	8002be6 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80018f2:	4b74      	ldr	r3, [pc, #464]	; (8001ac4 <UART_Handle+0x588>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,960);
 80018fc:	4b71      	ldr	r3, [pc, #452]	; (8001ac4 <UART_Handle+0x588>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001904:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001906:	e0cf      	b.n	8001aa8 <UART_Handle+0x56c>
			case 'L':
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2104      	movs	r1, #4
 800190c:	486b      	ldr	r0, [pc, #428]	; (8001abc <UART_Handle+0x580>)
 800190e:	f001 f96a 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001912:	2201      	movs	r2, #1
 8001914:	2108      	movs	r1, #8
 8001916:	4869      	ldr	r0, [pc, #420]	; (8001abc <UART_Handle+0x580>)
 8001918:	f001 f965 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2110      	movs	r1, #16
 8001920:	4866      	ldr	r0, [pc, #408]	; (8001abc <UART_Handle+0x580>)
 8001922:	f001 f960 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2120      	movs	r1, #32
 800192a:	4864      	ldr	r0, [pc, #400]	; (8001abc <UART_Handle+0x580>)
 800192c:	f001 f95b 	bl	8002be6 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001930:	4b64      	ldr	r3, [pc, #400]	; (8001ac4 <UART_Handle+0x588>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001938:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800193a:	4b62      	ldr	r3, [pc, #392]	; (8001ac4 <UART_Handle+0x588>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001942:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001944:	e0b0      	b.n	8001aa8 <UART_Handle+0x56c>
			case 'R':
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2104      	movs	r1, #4
 800194a:	485c      	ldr	r0, [pc, #368]	; (8001abc <UART_Handle+0x580>)
 800194c:	f001 f94b 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2108      	movs	r1, #8
 8001954:	4859      	ldr	r0, [pc, #356]	; (8001abc <UART_Handle+0x580>)
 8001956:	f001 f946 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2110      	movs	r1, #16
 800195e:	4857      	ldr	r0, [pc, #348]	; (8001abc <UART_Handle+0x580>)
 8001960:	f001 f941 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001964:	2201      	movs	r2, #1
 8001966:	2120      	movs	r1, #32
 8001968:	4854      	ldr	r0, [pc, #336]	; (8001abc <UART_Handle+0x580>)
 800196a:	f001 f93c 	bl	8002be6 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800196e:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <UART_Handle+0x588>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001976:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001978:	4b52      	ldr	r3, [pc, #328]	; (8001ac4 <UART_Handle+0x588>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001980:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001982:	e091      	b.n	8001aa8 <UART_Handle+0x56c>

			case 'I':
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2104      	movs	r1, #4
 8001988:	484c      	ldr	r0, [pc, #304]	; (8001abc <UART_Handle+0x580>)
 800198a:	f001 f92c 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800198e:	2201      	movs	r2, #1
 8001990:	2108      	movs	r1, #8
 8001992:	484a      	ldr	r0, [pc, #296]	; (8001abc <UART_Handle+0x580>)
 8001994:	f001 f927 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2110      	movs	r1, #16
 800199c:	4847      	ldr	r0, [pc, #284]	; (8001abc <UART_Handle+0x580>)
 800199e:	f001 f922 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80019a2:	2201      	movs	r2, #1
 80019a4:	2120      	movs	r1, #32
 80019a6:	4845      	ldr	r0, [pc, #276]	; (8001abc <UART_Handle+0x580>)
 80019a8:	f001 f91d 	bl	8002be6 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,700);
 80019ac:	4b45      	ldr	r3, [pc, #276]	; (8001ac4 <UART_Handle+0x588>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <UART_Handle+0x588>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019be:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80019c0:	e072      	b.n	8001aa8 <UART_Handle+0x56c>
			case 'J':
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2104      	movs	r1, #4
 80019c6:	483d      	ldr	r0, [pc, #244]	; (8001abc <UART_Handle+0x580>)
 80019c8:	f001 f90d 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2108      	movs	r1, #8
 80019d0:	483a      	ldr	r0, [pc, #232]	; (8001abc <UART_Handle+0x580>)
 80019d2:	f001 f908 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80019d6:	2201      	movs	r2, #1
 80019d8:	2110      	movs	r1, #16
 80019da:	4838      	ldr	r0, [pc, #224]	; (8001abc <UART_Handle+0x580>)
 80019dc:	f001 f903 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2120      	movs	r1, #32
 80019e4:	4835      	ldr	r0, [pc, #212]	; (8001abc <UART_Handle+0x580>)
 80019e6:	f001 f8fe 	bl	8002be6 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,700);
 80019ea:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <UART_Handle+0x588>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <UART_Handle+0x588>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80019fe:	e053      	b.n	8001aa8 <UART_Handle+0x56c>
			case 'G':
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2104      	movs	r1, #4
 8001a04:	482d      	ldr	r0, [pc, #180]	; (8001abc <UART_Handle+0x580>)
 8001a06:	f001 f8ee 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2108      	movs	r1, #8
 8001a0e:	482b      	ldr	r0, [pc, #172]	; (8001abc <UART_Handle+0x580>)
 8001a10:	f001 f8e9 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2110      	movs	r1, #16
 8001a18:	4828      	ldr	r0, [pc, #160]	; (8001abc <UART_Handle+0x580>)
 8001a1a:	f001 f8e4 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2120      	movs	r1, #32
 8001a22:	4826      	ldr	r0, [pc, #152]	; (8001abc <UART_Handle+0x580>)
 8001a24:	f001 f8df 	bl	8002be6 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <UART_Handle+0x588>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a30:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,700);
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <UART_Handle+0x588>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001a3a:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001a3c:	e034      	b.n	8001aa8 <UART_Handle+0x56c>
			case 'H':
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2104      	movs	r1, #4
 8001a42:	481e      	ldr	r0, [pc, #120]	; (8001abc <UART_Handle+0x580>)
 8001a44:	f001 f8cf 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	481b      	ldr	r0, [pc, #108]	; (8001abc <UART_Handle+0x580>)
 8001a4e:	f001 f8ca 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001a52:	2201      	movs	r2, #1
 8001a54:	2110      	movs	r1, #16
 8001a56:	4819      	ldr	r0, [pc, #100]	; (8001abc <UART_Handle+0x580>)
 8001a58:	f001 f8c5 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2120      	movs	r1, #32
 8001a60:	4816      	ldr	r0, [pc, #88]	; (8001abc <UART_Handle+0x580>)
 8001a62:	f001 f8c0 	bl	8002be6 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <UART_Handle+0x588>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,700);
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <UART_Handle+0x588>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001a7a:	e015      	b.n	8001aa8 <UART_Handle+0x56c>
			default:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2104      	movs	r1, #4
 8001a80:	480e      	ldr	r0, [pc, #56]	; (8001abc <UART_Handle+0x580>)
 8001a82:	f001 f8b0 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2108      	movs	r1, #8
 8001a8a:	480c      	ldr	r0, [pc, #48]	; (8001abc <UART_Handle+0x580>)
 8001a8c:	f001 f8ab 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2110      	movs	r1, #16
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <UART_Handle+0x580>)
 8001a96:	f001 f8a6 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	4807      	ldr	r0, [pc, #28]	; (8001abc <UART_Handle+0x580>)
 8001aa0:	f001 f8a1 	bl	8002be6 <HAL_GPIO_WritePin>
				break;
 8001aa4:	e000      	b.n	8001aa8 <UART_Handle+0x56c>
			}
	}
 8001aa6:	bf00      	nop
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000018 	.word	0x20000018
 8001ab0:	40010c00 	.word	0x40010c00
 8001ab4:	200001ac 	.word	0x200001ac
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	20000608 	.word	0x20000608
 8001ac4:	20000044 	.word	0x20000044
 8001ac8:	20000604 	.word	0x20000604

08001acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad0:	f000 fcce 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad4:	f000 f82e 	bl	8001b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad8:	f000 fa60 	bl	8001f9c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001adc:	f000 f86a 	bl	8001bb4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ae0:	f000 f914 	bl	8001d0c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ae4:	f000 f966 	bl	8001db4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001ae8:	f000 fa2e 	bl	8001f48 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001aec:	f000 f9b6 	bl	8001e5c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &Rx_Buff, 1);
 8001af0:	2201      	movs	r2, #1
 8001af2:	490b      	ldr	r1, [pc, #44]	; (8001b20 <main+0x54>)
 8001af4:	480b      	ldr	r0, [pc, #44]	; (8001b24 <main+0x58>)
 8001af6:	f002 fcb5 	bl	8004464 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001afa:	2100      	movs	r1, #0
 8001afc:	480a      	ldr	r0, [pc, #40]	; (8001b28 <main+0x5c>)
 8001afe:	f001 fdbd 	bl	800367c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b02:	2104      	movs	r1, #4
 8001b04:	4808      	ldr	r0, [pc, #32]	; (8001b28 <main+0x5c>)
 8001b06:	f001 fdb9 	bl	800367c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001b0a:	213c      	movs	r1, #60	; 0x3c
 8001b0c:	4807      	ldr	r0, [pc, #28]	; (8001b2c <main+0x60>)
 8001b0e:	f001 fef9 	bl	8003904 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b12:	213c      	movs	r1, #60	; 0x3c
 8001b14:	4806      	ldr	r0, [pc, #24]	; (8001b30 <main+0x64>)
 8001b16:	f001 fef5 	bl	8003904 <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UART_Handle();
 8001b1a:	f7ff fd0f 	bl	800153c <UART_Handle>
 8001b1e:	e7fc      	b.n	8001b1a <main+0x4e>
 8001b20:	200001a8 	.word	0x200001a8
 8001b24:	20000164 	.word	0x20000164
 8001b28:	20000044 	.word	0x20000044
 8001b2c:	2000008c 	.word	0x2000008c
 8001b30:	200000d4 	.word	0x200000d4

08001b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b090      	sub	sp, #64	; 0x40
 8001b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3a:	f107 0318 	add.w	r3, r7, #24
 8001b3e:	2228      	movs	r2, #40	; 0x28
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 f8c0 	bl	8004cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b56:	2302      	movs	r3, #2
 8001b58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b5e:	2310      	movs	r3, #16
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b62:	2302      	movs	r3, #2
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b66:	2300      	movs	r3, #0
 8001b68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8001b6a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 f84f 	bl	8002c18 <HAL_RCC_OscConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001b80:	f000 fa9c 	bl	80020bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b84:	230f      	movs	r3, #15
 8001b86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 fabd 	bl	800311c <HAL_RCC_ClockConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001ba8:	f000 fa88 	bl	80020bc <Error_Handler>
  }
}
 8001bac:	bf00      	nop
 8001bae:	3740      	adds	r7, #64	; 0x40
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b096      	sub	sp, #88	; 0x58
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	615a      	str	r2, [r3, #20]
 8001be4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2220      	movs	r2, #32
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 f86b 	bl	8004cc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bf2:	4b44      	ldr	r3, [pc, #272]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001bf4:	4a44      	ldr	r2, [pc, #272]	; (8001d08 <MX_TIM1_Init+0x154>)
 8001bf6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bf8:	4b42      	ldr	r3, [pc, #264]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001c04:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001c06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c12:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c18:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c1e:	4839      	ldr	r0, [pc, #228]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001c20:	f001 fc14 	bl	800344c <HAL_TIM_Base_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001c2a:	f000 fa47 	bl	80020bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4832      	ldr	r0, [pc, #200]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001c3c:	f001 ffae 	bl	8003b9c <HAL_TIM_ConfigClockSource>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c46:	f000 fa39 	bl	80020bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c4a:	482e      	ldr	r0, [pc, #184]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001c4c:	f001 fcbe 	bl	80035cc <HAL_TIM_PWM_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c56:	f000 fa31 	bl	80020bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c66:	4619      	mov	r1, r3
 8001c68:	4826      	ldr	r0, [pc, #152]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001c6a:	f002 faff 	bl	800426c <HAL_TIMEx_MasterConfigSynchronization>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c74:	f000 fa22 	bl	80020bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c78:	2360      	movs	r3, #96	; 0x60
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c84:	2300      	movs	r3, #0
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4819      	ldr	r0, [pc, #100]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001c9e:	f001 febf 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001ca8:	f000 fa08 	bl	80020bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4813      	ldr	r0, [pc, #76]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001cb6:	f001 feb3 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001cc0:	f000 f9fc 	bl	80020bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4807      	ldr	r0, [pc, #28]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001ce8:	f002 fb1e 	bl	8004328 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001cf2:	f000 f9e3 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cf6:	4803      	ldr	r0, [pc, #12]	; (8001d04 <MX_TIM1_Init+0x150>)
 8001cf8:	f000 fab2 	bl	8002260 <HAL_TIM_MspPostInit>

}
 8001cfc:	bf00      	nop
 8001cfe:	3758      	adds	r7, #88	; 0x58
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000044 	.word	0x20000044
 8001d08:	40012c00 	.word	0x40012c00

08001d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	; 0x30
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	2224      	movs	r2, #36	; 0x24
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 ffd4 	bl	8004cc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <MX_TIM2_Init+0xa4>)
 8001d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d30:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <MX_TIM2_Init+0xa4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d36:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <MX_TIM2_Init+0xa4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <MX_TIM2_Init+0xa4>)
 8001d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <MX_TIM2_Init+0xa4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <MX_TIM2_Init+0xa4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d50:	2303      	movs	r3, #3
 8001d52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <MX_TIM2_Init+0xa4>)
 8001d7c:	f001 fd20 	bl	80037c0 <HAL_TIM_Encoder_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d86:	f000 f999 	bl	80020bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4806      	ldr	r0, [pc, #24]	; (8001db0 <MX_TIM2_Init+0xa4>)
 8001d98:	f002 fa68 	bl	800426c <HAL_TIMEx_MasterConfigSynchronization>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001da2:	f000 f98b 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	3730      	adds	r7, #48	; 0x30
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000008c 	.word	0x2000008c

08001db4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	2224      	movs	r2, #36	; 0x24
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 ff80 	bl	8004cc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dd0:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <MX_TIM3_Init+0xa0>)
 8001dd2:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <MX_TIM3_Init+0xa4>)
 8001dd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <MX_TIM3_Init+0xa0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <MX_TIM3_Init+0xa0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <MX_TIM3_Init+0xa0>)
 8001de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <MX_TIM3_Init+0xa0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <MX_TIM3_Init+0xa0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001df6:	2303      	movs	r3, #3
 8001df8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	4619      	mov	r1, r3
 8001e20:	480c      	ldr	r0, [pc, #48]	; (8001e54 <MX_TIM3_Init+0xa0>)
 8001e22:	f001 fccd 	bl	80037c0 <HAL_TIM_Encoder_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e2c:	f000 f946 	bl	80020bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	; (8001e54 <MX_TIM3_Init+0xa0>)
 8001e3e:	f002 fa15 	bl	800426c <HAL_TIMEx_MasterConfigSynchronization>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e48:	f000 f938 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	3730      	adds	r7, #48	; 0x30
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200000d4 	.word	0x200000d4
 8001e58:	40000400 	.word	0x40000400

08001e5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08e      	sub	sp, #56	; 0x38
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
 8001e88:	615a      	str	r2, [r3, #20]
 8001e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <MX_TIM4_Init+0xe4>)
 8001e8e:	4a2d      	ldr	r2, [pc, #180]	; (8001f44 <MX_TIM4_Init+0xe8>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20-1;
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <MX_TIM4_Init+0xe4>)
 8001e94:	2213      	movs	r2, #19
 8001e96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <MX_TIM4_Init+0xe4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001e9e:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <MX_TIM4_Init+0xe4>)
 8001ea0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ea4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <MX_TIM4_Init+0xe4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <MX_TIM4_Init+0xe4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eb2:	4823      	ldr	r0, [pc, #140]	; (8001f40 <MX_TIM4_Init+0xe4>)
 8001eb4:	f001 faca 	bl	800344c <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ebe:	f000 f8fd 	bl	80020bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	481c      	ldr	r0, [pc, #112]	; (8001f40 <MX_TIM4_Init+0xe4>)
 8001ed0:	f001 fe64 	bl	8003b9c <HAL_TIM_ConfigClockSource>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001eda:	f000 f8ef 	bl	80020bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ede:	4818      	ldr	r0, [pc, #96]	; (8001f40 <MX_TIM4_Init+0xe4>)
 8001ee0:	f001 fb74 	bl	80035cc <HAL_TIM_PWM_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001eea:	f000 f8e7 	bl	80020bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	4619      	mov	r1, r3
 8001efc:	4810      	ldr	r0, [pc, #64]	; (8001f40 <MX_TIM4_Init+0xe4>)
 8001efe:	f002 f9b5 	bl	800426c <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f08:	f000 f8d8 	bl	80020bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0c:	2360      	movs	r3, #96	; 0x60
 8001f0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4619      	mov	r1, r3
 8001f22:	4807      	ldr	r0, [pc, #28]	; (8001f40 <MX_TIM4_Init+0xe4>)
 8001f24:	f001 fd7c 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f2e:	f000 f8c5 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f32:	4803      	ldr	r0, [pc, #12]	; (8001f40 <MX_TIM4_Init+0xe4>)
 8001f34:	f000 f994 	bl	8002260 <HAL_TIM_MspPostInit>

}
 8001f38:	bf00      	nop
 8001f3a:	3738      	adds	r7, #56	; 0x38
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2000011c 	.word	0x2000011c
 8001f44:	40000800 	.word	0x40000800

08001f48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <MX_USART3_UART_Init+0x50>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <MX_USART3_UART_Init+0x4c>)
 8001f80:	f002 fa23 	bl	80043ca <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f8a:	f000 f897 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000164 	.word	0x20000164
 8001f98:	40004800 	.word	0x40004800

08001f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <MX_GPIO_Init+0x110>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a3d      	ldr	r2, [pc, #244]	; (80020ac <MX_GPIO_Init+0x110>)
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	6193      	str	r3, [r2, #24]
 8001fbc:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <MX_GPIO_Init+0x110>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc8:	4b38      	ldr	r3, [pc, #224]	; (80020ac <MX_GPIO_Init+0x110>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a37      	ldr	r2, [pc, #220]	; (80020ac <MX_GPIO_Init+0x110>)
 8001fce:	f043 0320 	orr.w	r3, r3, #32
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <MX_GPIO_Init+0x110>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	4b32      	ldr	r3, [pc, #200]	; (80020ac <MX_GPIO_Init+0x110>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a31      	ldr	r2, [pc, #196]	; (80020ac <MX_GPIO_Init+0x110>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <MX_GPIO_Init+0x110>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff8:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <MX_GPIO_Init+0x110>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	; (80020ac <MX_GPIO_Init+0x110>)
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	4b29      	ldr	r3, [pc, #164]	; (80020ac <MX_GPIO_Init+0x110>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002016:	4826      	ldr	r0, [pc, #152]	; (80020b0 <MX_GPIO_Init+0x114>)
 8002018:	f000 fde5 	bl	8002be6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800201c:	2200      	movs	r2, #0
 800201e:	213c      	movs	r1, #60	; 0x3c
 8002020:	4824      	ldr	r0, [pc, #144]	; (80020b4 <MX_GPIO_Init+0x118>)
 8002022:	f000 fde0 	bl	8002be6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800202c:	4822      	ldr	r0, [pc, #136]	; (80020b8 <MX_GPIO_Init+0x11c>)
 800202e:	f000 fdda 	bl	8002be6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002032:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002038:	2301      	movs	r3, #1
 800203a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2302      	movs	r3, #2
 8002042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	4619      	mov	r1, r3
 800204a:	4819      	ldr	r0, [pc, #100]	; (80020b0 <MX_GPIO_Init+0x114>)
 800204c:	f000 fc30 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002050:	233c      	movs	r3, #60	; 0x3c
 8002052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2302      	movs	r3, #2
 800205e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4619      	mov	r1, r3
 8002066:	4813      	ldr	r0, [pc, #76]	; (80020b4 <MX_GPIO_Init+0x118>)
 8002068:	f000 fc22 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800206c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2302      	movs	r3, #2
 800207c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0310 	add.w	r3, r7, #16
 8002082:	4619      	mov	r1, r3
 8002084:	480c      	ldr	r0, [pc, #48]	; (80020b8 <MX_GPIO_Init+0x11c>)
 8002086:	f000 fc13 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800208a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800208e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	4806      	ldr	r0, [pc, #24]	; (80020b8 <MX_GPIO_Init+0x11c>)
 80020a0:	f000 fc06 	bl	80028b0 <HAL_GPIO_Init>

}
 80020a4:	bf00      	nop
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40011000 	.word	0x40011000
 80020b4:	40010800 	.word	0x40010800
 80020b8:	40010c00 	.word	0x40010c00

080020bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c0:	b672      	cpsid	i
}
 80020c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <Error_Handler+0x8>
	...

080020c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_MspInit+0x5c>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	4a14      	ldr	r2, [pc, #80]	; (8002124 <HAL_MspInit+0x5c>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6193      	str	r3, [r2, #24]
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_MspInit+0x5c>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_MspInit+0x5c>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_MspInit+0x5c>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	61d3      	str	r3, [r2, #28]
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_MspInit+0x5c>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_MspInit+0x60>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_MspInit+0x60>)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000

0800212c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a12      	ldr	r2, [pc, #72]	; (8002184 <HAL_TIM_Base_MspInit+0x58>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d10c      	bne.n	8002158 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_TIM_Base_MspInit+0x5c>)
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	4a11      	ldr	r2, [pc, #68]	; (8002188 <HAL_TIM_Base_MspInit+0x5c>)
 8002144:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002148:	6193      	str	r3, [r2, #24]
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_TIM_Base_MspInit+0x5c>)
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002156:	e010      	b.n	800217a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_TIM_Base_MspInit+0x60>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10b      	bne.n	800217a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_TIM_Base_MspInit+0x5c>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4a08      	ldr	r2, [pc, #32]	; (8002188 <HAL_TIM_Base_MspInit+0x5c>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	61d3      	str	r3, [r2, #28]
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_TIM_Base_MspInit+0x5c>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	40012c00 	.word	0x40012c00
 8002188:	40021000 	.word	0x40021000
 800218c:	40000800 	.word	0x40000800

08002190 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0318 	add.w	r3, r7, #24
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ae:	d124      	bne.n	80021fa <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b0:	4b28      	ldr	r3, [pc, #160]	; (8002254 <HAL_TIM_Encoder_MspInit+0xc4>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	4a27      	ldr	r2, [pc, #156]	; (8002254 <HAL_TIM_Encoder_MspInit+0xc4>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	61d3      	str	r3, [r2, #28]
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_TIM_Encoder_MspInit+0xc4>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_TIM_Encoder_MspInit+0xc4>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4a21      	ldr	r2, [pc, #132]	; (8002254 <HAL_TIM_Encoder_MspInit+0xc4>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6193      	str	r3, [r2, #24]
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <HAL_TIM_Encoder_MspInit+0xc4>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021e0:	2303      	movs	r3, #3
 80021e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ec:	f107 0318 	add.w	r3, r7, #24
 80021f0:	4619      	mov	r1, r3
 80021f2:	4819      	ldr	r0, [pc, #100]	; (8002258 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021f4:	f000 fb5c 	bl	80028b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021f8:	e028      	b.n	800224c <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM3)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_TIM_Encoder_MspInit+0xcc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d123      	bne.n	800224c <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4a12      	ldr	r2, [pc, #72]	; (8002254 <HAL_TIM_Encoder_MspInit+0xc4>)
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	61d3      	str	r3, [r2, #28]
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_TIM_Encoder_MspInit+0xc4>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_TIM_Encoder_MspInit+0xc4>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002234:	23c0      	movs	r3, #192	; 0xc0
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800223c:	2301      	movs	r3, #1
 800223e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	f107 0318 	add.w	r3, r7, #24
 8002244:	4619      	mov	r1, r3
 8002246:	4804      	ldr	r0, [pc, #16]	; (8002258 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002248:	f000 fb32 	bl	80028b0 <HAL_GPIO_Init>
}
 800224c:	bf00      	nop
 800224e:	3728      	adds	r7, #40	; 0x28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	40010800 	.word	0x40010800
 800225c:	40000400 	.word	0x40000400

08002260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1f      	ldr	r2, [pc, #124]	; (80022f8 <HAL_TIM_MspPostInit+0x98>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d119      	bne.n	80022b4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_TIM_MspPostInit+0x9c>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <HAL_TIM_MspPostInit+0x9c>)
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	6193      	str	r3, [r2, #24]
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_TIM_MspPostInit+0x9c>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002298:	f44f 7340 	mov.w	r3, #768	; 0x300
 800229c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f107 0310 	add.w	r3, r7, #16
 80022aa:	4619      	mov	r1, r3
 80022ac:	4814      	ldr	r0, [pc, #80]	; (8002300 <HAL_TIM_MspPostInit+0xa0>)
 80022ae:	f000 faff 	bl	80028b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022b2:	e01c      	b.n	80022ee <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_TIM_MspPostInit+0xa4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d117      	bne.n	80022ee <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_TIM_MspPostInit+0x9c>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_TIM_MspPostInit+0x9c>)
 80022c4:	f043 0308 	orr.w	r3, r3, #8
 80022c8:	6193      	str	r3, [r2, #24]
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <HAL_TIM_MspPostInit+0x9c>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022d6:	2340      	movs	r3, #64	; 0x40
 80022d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2302      	movs	r3, #2
 80022e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0310 	add.w	r3, r7, #16
 80022e6:	4619      	mov	r1, r3
 80022e8:	4807      	ldr	r0, [pc, #28]	; (8002308 <HAL_TIM_MspPostInit+0xa8>)
 80022ea:	f000 fae1 	bl	80028b0 <HAL_GPIO_Init>
}
 80022ee:	bf00      	nop
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40012c00 	.word	0x40012c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010800 	.word	0x40010800
 8002304:	40000800 	.word	0x40000800
 8002308:	40010c00 	.word	0x40010c00

0800230c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_UART_MspInit+0x9c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d139      	bne.n	80023a0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800232c:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <HAL_UART_MspInit+0xa0>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a1e      	ldr	r2, [pc, #120]	; (80023ac <HAL_UART_MspInit+0xa0>)
 8002332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002336:	61d3      	str	r3, [r2, #28]
 8002338:	4b1c      	ldr	r3, [pc, #112]	; (80023ac <HAL_UART_MspInit+0xa0>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_UART_MspInit+0xa0>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_UART_MspInit+0xa0>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <HAL_UART_MspInit+0xa0>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800235c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002360:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	f107 0310 	add.w	r3, r7, #16
 800236e:	4619      	mov	r1, r3
 8002370:	480f      	ldr	r0, [pc, #60]	; (80023b0 <HAL_UART_MspInit+0xa4>)
 8002372:	f000 fa9d 	bl	80028b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002376:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800237a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	4619      	mov	r1, r3
 800238a:	4809      	ldr	r0, [pc, #36]	; (80023b0 <HAL_UART_MspInit+0xa4>)
 800238c:	f000 fa90 	bl	80028b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	2100      	movs	r1, #0
 8002394:	2027      	movs	r0, #39	; 0x27
 8002396:	f000 f9a4 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800239a:	2027      	movs	r0, #39	; 0x27
 800239c:	f000 f9bd 	bl	800271a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023a0:	bf00      	nop
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40004800 	.word	0x40004800
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40010c00 	.word	0x40010c00

080023b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <NMI_Handler+0x4>

080023ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <HardFault_Handler+0x4>

080023c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <MemManage_Handler+0x4>

080023c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <BusFault_Handler+0x4>

080023cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <UsageFault_Handler+0x4>

080023d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fa:	f000 f87f 	bl	80024fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <USART3_IRQHandler+0x10>)
 800240a:	f002 f85b 	bl	80044c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000164 	.word	0x20000164

08002418 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002424:	480c      	ldr	r0, [pc, #48]	; (8002458 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002426:	490d      	ldr	r1, [pc, #52]	; (800245c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800242c:	e002      	b.n	8002434 <LoopCopyDataInit>

0800242e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002432:	3304      	adds	r3, #4

08002434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002438:	d3f9      	bcc.n	800242e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800243c:	4c0a      	ldr	r4, [pc, #40]	; (8002468 <LoopFillZerobss+0x22>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002440:	e001      	b.n	8002446 <LoopFillZerobss>

08002442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002444:	3204      	adds	r2, #4

08002446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002448:	d3fb      	bcc.n	8002442 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800244a:	f7ff ffe5 	bl	8002418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244e:	f002 fc17 	bl	8004c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002452:	f7ff fb3b 	bl	8001acc <main>
  bx lr
 8002456:	4770      	bx	lr
  ldr r0, =_sdata
 8002458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800245c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002460:	08004d20 	.word	0x08004d20
  ldr r2, =_sbss
 8002464:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002468:	20000610 	.word	0x20000610

0800246c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC1_2_IRQHandler>
	...

08002470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_Init+0x28>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_Init+0x28>)
 800247a:	f043 0310 	orr.w	r3, r3, #16
 800247e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002480:	2003      	movs	r0, #3
 8002482:	f000 f923 	bl	80026cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002486:	200f      	movs	r0, #15
 8002488:	f000 f808 	bl	800249c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800248c:	f7ff fe1c 	bl	80020c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40022000 	.word	0x40022000

0800249c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_InitTick+0x54>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_InitTick+0x58>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	4619      	mov	r1, r3
 80024ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f93b 	bl	8002736 <HAL_SYSTICK_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00e      	b.n	80024e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b0f      	cmp	r3, #15
 80024ce:	d80a      	bhi.n	80024e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d0:	2200      	movs	r2, #0
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f000 f903 	bl	80026e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024dc:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <HAL_InitTick+0x5c>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e000      	b.n	80024e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2000001c 	.word	0x2000001c
 80024f4:	20000024 	.word	0x20000024
 80024f8:	20000020 	.word	0x20000020

080024fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_IncTick+0x1c>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_IncTick+0x20>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4413      	add	r3, r2
 800250c:	4a03      	ldr	r2, [pc, #12]	; (800251c <HAL_IncTick+0x20>)
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	20000024 	.word	0x20000024
 800251c:	2000060c 	.word	0x2000060c

08002520 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return uwTick;
 8002524:	4b02      	ldr	r3, [pc, #8]	; (8002530 <HAL_GetTick+0x10>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	2000060c 	.word	0x2000060c

08002534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db0b      	blt.n	80025c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4906      	ldr	r1, [pc, #24]	; (80025cc <__NVIC_EnableIRQ+0x34>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db0a      	blt.n	80025fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	490c      	ldr	r1, [pc, #48]	; (800261c <__NVIC_SetPriority+0x4c>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	440b      	add	r3, r1
 80025f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f8:	e00a      	b.n	8002610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4908      	ldr	r1, [pc, #32]	; (8002620 <__NVIC_SetPriority+0x50>)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3b04      	subs	r3, #4
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	440b      	add	r3, r1
 800260e:	761a      	strb	r2, [r3, #24]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f1c3 0307 	rsb	r3, r3, #7
 800263e:	2b04      	cmp	r3, #4
 8002640:	bf28      	it	cs
 8002642:	2304      	movcs	r3, #4
 8002644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3304      	adds	r3, #4
 800264a:	2b06      	cmp	r3, #6
 800264c:	d902      	bls.n	8002654 <NVIC_EncodePriority+0x30>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3b03      	subs	r3, #3
 8002652:	e000      	b.n	8002656 <NVIC_EncodePriority+0x32>
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	f04f 32ff 	mov.w	r2, #4294967295
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	401a      	ands	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800266c:	f04f 31ff 	mov.w	r1, #4294967295
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43d9      	mvns	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	4313      	orrs	r3, r2
         );
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002698:	d301      	bcc.n	800269e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269a:	2301      	movs	r3, #1
 800269c:	e00f      	b.n	80026be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <SysTick_Config+0x40>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a6:	210f      	movs	r1, #15
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f7ff ff90 	bl	80025d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <SysTick_Config+0x40>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <SysTick_Config+0x40>)
 80026b8:	2207      	movs	r2, #7
 80026ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	e000e010 	.word	0xe000e010

080026cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff2d 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f4:	f7ff ff42 	bl	800257c <__NVIC_GetPriorityGrouping>
 80026f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	f7ff ff90 	bl	8002624 <NVIC_EncodePriority>
 8002704:	4602      	mov	r2, r0
 8002706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff5f 	bl	80025d0 <__NVIC_SetPriority>
}
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff35 	bl	8002598 <__NVIC_EnableIRQ>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ffa2 	bl	8002688 <SysTick_Config>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002760:	2b02      	cmp	r3, #2
 8002762:	d008      	beq.n	8002776 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2204      	movs	r2, #4
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e020      	b.n	80027b8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 020e 	bic.w	r2, r2, #14
 8002784:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	2101      	movs	r1, #1
 80027a0:	fa01 f202 	lsl.w	r2, r1, r2
 80027a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d005      	beq.n	80027e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2204      	movs	r2, #4
 80027de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	e051      	b.n	800288a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 020e 	bic.w	r2, r2, #14
 80027f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a22      	ldr	r2, [pc, #136]	; (8002894 <HAL_DMA_Abort_IT+0xd0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d029      	beq.n	8002864 <HAL_DMA_Abort_IT+0xa0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a20      	ldr	r2, [pc, #128]	; (8002898 <HAL_DMA_Abort_IT+0xd4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d022      	beq.n	8002860 <HAL_DMA_Abort_IT+0x9c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1f      	ldr	r2, [pc, #124]	; (800289c <HAL_DMA_Abort_IT+0xd8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01a      	beq.n	800285a <HAL_DMA_Abort_IT+0x96>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <HAL_DMA_Abort_IT+0xdc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d012      	beq.n	8002854 <HAL_DMA_Abort_IT+0x90>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1c      	ldr	r2, [pc, #112]	; (80028a4 <HAL_DMA_Abort_IT+0xe0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00a      	beq.n	800284e <HAL_DMA_Abort_IT+0x8a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1a      	ldr	r2, [pc, #104]	; (80028a8 <HAL_DMA_Abort_IT+0xe4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d102      	bne.n	8002848 <HAL_DMA_Abort_IT+0x84>
 8002842:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002846:	e00e      	b.n	8002866 <HAL_DMA_Abort_IT+0xa2>
 8002848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800284c:	e00b      	b.n	8002866 <HAL_DMA_Abort_IT+0xa2>
 800284e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002852:	e008      	b.n	8002866 <HAL_DMA_Abort_IT+0xa2>
 8002854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002858:	e005      	b.n	8002866 <HAL_DMA_Abort_IT+0xa2>
 800285a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800285e:	e002      	b.n	8002866 <HAL_DMA_Abort_IT+0xa2>
 8002860:	2310      	movs	r3, #16
 8002862:	e000      	b.n	8002866 <HAL_DMA_Abort_IT+0xa2>
 8002864:	2301      	movs	r3, #1
 8002866:	4a11      	ldr	r2, [pc, #68]	; (80028ac <HAL_DMA_Abort_IT+0xe8>)
 8002868:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4798      	blx	r3
    } 
  }
  return status;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40020008 	.word	0x40020008
 8002898:	4002001c 	.word	0x4002001c
 800289c:	40020030 	.word	0x40020030
 80028a0:	40020044 	.word	0x40020044
 80028a4:	40020058 	.word	0x40020058
 80028a8:	4002006c 	.word	0x4002006c
 80028ac:	40020000 	.word	0x40020000

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b08b      	sub	sp, #44	; 0x2c
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c2:	e169      	b.n	8002b98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028c4:	2201      	movs	r2, #1
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	429a      	cmp	r2, r3
 80028de:	f040 8158 	bne.w	8002b92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4a9a      	ldr	r2, [pc, #616]	; (8002b50 <HAL_GPIO_Init+0x2a0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d05e      	beq.n	80029aa <HAL_GPIO_Init+0xfa>
 80028ec:	4a98      	ldr	r2, [pc, #608]	; (8002b50 <HAL_GPIO_Init+0x2a0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d875      	bhi.n	80029de <HAL_GPIO_Init+0x12e>
 80028f2:	4a98      	ldr	r2, [pc, #608]	; (8002b54 <HAL_GPIO_Init+0x2a4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d058      	beq.n	80029aa <HAL_GPIO_Init+0xfa>
 80028f8:	4a96      	ldr	r2, [pc, #600]	; (8002b54 <HAL_GPIO_Init+0x2a4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d86f      	bhi.n	80029de <HAL_GPIO_Init+0x12e>
 80028fe:	4a96      	ldr	r2, [pc, #600]	; (8002b58 <HAL_GPIO_Init+0x2a8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d052      	beq.n	80029aa <HAL_GPIO_Init+0xfa>
 8002904:	4a94      	ldr	r2, [pc, #592]	; (8002b58 <HAL_GPIO_Init+0x2a8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d869      	bhi.n	80029de <HAL_GPIO_Init+0x12e>
 800290a:	4a94      	ldr	r2, [pc, #592]	; (8002b5c <HAL_GPIO_Init+0x2ac>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d04c      	beq.n	80029aa <HAL_GPIO_Init+0xfa>
 8002910:	4a92      	ldr	r2, [pc, #584]	; (8002b5c <HAL_GPIO_Init+0x2ac>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d863      	bhi.n	80029de <HAL_GPIO_Init+0x12e>
 8002916:	4a92      	ldr	r2, [pc, #584]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d046      	beq.n	80029aa <HAL_GPIO_Init+0xfa>
 800291c:	4a90      	ldr	r2, [pc, #576]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d85d      	bhi.n	80029de <HAL_GPIO_Init+0x12e>
 8002922:	2b12      	cmp	r3, #18
 8002924:	d82a      	bhi.n	800297c <HAL_GPIO_Init+0xcc>
 8002926:	2b12      	cmp	r3, #18
 8002928:	d859      	bhi.n	80029de <HAL_GPIO_Init+0x12e>
 800292a:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <HAL_GPIO_Init+0x80>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	080029ab 	.word	0x080029ab
 8002934:	08002985 	.word	0x08002985
 8002938:	08002997 	.word	0x08002997
 800293c:	080029d9 	.word	0x080029d9
 8002940:	080029df 	.word	0x080029df
 8002944:	080029df 	.word	0x080029df
 8002948:	080029df 	.word	0x080029df
 800294c:	080029df 	.word	0x080029df
 8002950:	080029df 	.word	0x080029df
 8002954:	080029df 	.word	0x080029df
 8002958:	080029df 	.word	0x080029df
 800295c:	080029df 	.word	0x080029df
 8002960:	080029df 	.word	0x080029df
 8002964:	080029df 	.word	0x080029df
 8002968:	080029df 	.word	0x080029df
 800296c:	080029df 	.word	0x080029df
 8002970:	080029df 	.word	0x080029df
 8002974:	0800298d 	.word	0x0800298d
 8002978:	080029a1 	.word	0x080029a1
 800297c:	4a79      	ldr	r2, [pc, #484]	; (8002b64 <HAL_GPIO_Init+0x2b4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002982:	e02c      	b.n	80029de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	623b      	str	r3, [r7, #32]
          break;
 800298a:	e029      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	3304      	adds	r3, #4
 8002992:	623b      	str	r3, [r7, #32]
          break;
 8002994:	e024      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	3308      	adds	r3, #8
 800299c:	623b      	str	r3, [r7, #32]
          break;
 800299e:	e01f      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	330c      	adds	r3, #12
 80029a6:	623b      	str	r3, [r7, #32]
          break;
 80029a8:	e01a      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d102      	bne.n	80029b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029b2:	2304      	movs	r3, #4
 80029b4:	623b      	str	r3, [r7, #32]
          break;
 80029b6:	e013      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d105      	bne.n	80029cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c0:	2308      	movs	r3, #8
 80029c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	611a      	str	r2, [r3, #16]
          break;
 80029ca:	e009      	b.n	80029e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029cc:	2308      	movs	r3, #8
 80029ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	615a      	str	r2, [r3, #20]
          break;
 80029d6:	e003      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d8:	2300      	movs	r3, #0
 80029da:	623b      	str	r3, [r7, #32]
          break;
 80029dc:	e000      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          break;
 80029de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2bff      	cmp	r3, #255	; 0xff
 80029e4:	d801      	bhi.n	80029ea <HAL_GPIO_Init+0x13a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	e001      	b.n	80029ee <HAL_GPIO_Init+0x13e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2bff      	cmp	r3, #255	; 0xff
 80029f4:	d802      	bhi.n	80029fc <HAL_GPIO_Init+0x14c>
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	e002      	b.n	8002a02 <HAL_GPIO_Init+0x152>
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	3b08      	subs	r3, #8
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	210f      	movs	r1, #15
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	401a      	ands	r2, r3
 8002a14:	6a39      	ldr	r1, [r7, #32]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80b1 	beq.w	8002b92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a30:	4b4d      	ldr	r3, [pc, #308]	; (8002b68 <HAL_GPIO_Init+0x2b8>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	4a4c      	ldr	r2, [pc, #304]	; (8002b68 <HAL_GPIO_Init+0x2b8>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6193      	str	r3, [r2, #24]
 8002a3c:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <HAL_GPIO_Init+0x2b8>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a48:	4a48      	ldr	r2, [pc, #288]	; (8002b6c <HAL_GPIO_Init+0x2bc>)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	220f      	movs	r2, #15
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <HAL_GPIO_Init+0x2c0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d013      	beq.n	8002a9c <HAL_GPIO_Init+0x1ec>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a3f      	ldr	r2, [pc, #252]	; (8002b74 <HAL_GPIO_Init+0x2c4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00d      	beq.n	8002a98 <HAL_GPIO_Init+0x1e8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a3e      	ldr	r2, [pc, #248]	; (8002b78 <HAL_GPIO_Init+0x2c8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d007      	beq.n	8002a94 <HAL_GPIO_Init+0x1e4>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a3d      	ldr	r2, [pc, #244]	; (8002b7c <HAL_GPIO_Init+0x2cc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <HAL_GPIO_Init+0x1e0>
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e006      	b.n	8002a9e <HAL_GPIO_Init+0x1ee>
 8002a90:	2304      	movs	r3, #4
 8002a92:	e004      	b.n	8002a9e <HAL_GPIO_Init+0x1ee>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e002      	b.n	8002a9e <HAL_GPIO_Init+0x1ee>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_GPIO_Init+0x1ee>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa0:	f002 0203 	and.w	r2, r2, #3
 8002aa4:	0092      	lsls	r2, r2, #2
 8002aa6:	4093      	lsls	r3, r2
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aae:	492f      	ldr	r1, [pc, #188]	; (8002b6c <HAL_GPIO_Init+0x2bc>)
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	492c      	ldr	r1, [pc, #176]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
 8002ad4:	e006      	b.n	8002ae4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ad6:	4b2a      	ldr	r3, [pc, #168]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	4928      	ldr	r1, [pc, #160]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d006      	beq.n	8002afe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002af0:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	4922      	ldr	r1, [pc, #136]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]
 8002afc:	e006      	b.n	8002b0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	491e      	ldr	r1, [pc, #120]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d006      	beq.n	8002b26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	4918      	ldr	r1, [pc, #96]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b26:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	4914      	ldr	r1, [pc, #80]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d021      	beq.n	8002b84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	490e      	ldr	r1, [pc, #56]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60cb      	str	r3, [r1, #12]
 8002b4c:	e021      	b.n	8002b92 <HAL_GPIO_Init+0x2e2>
 8002b4e:	bf00      	nop
 8002b50:	10320000 	.word	0x10320000
 8002b54:	10310000 	.word	0x10310000
 8002b58:	10220000 	.word	0x10220000
 8002b5c:	10210000 	.word	0x10210000
 8002b60:	10120000 	.word	0x10120000
 8002b64:	10110000 	.word	0x10110000
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40010800 	.word	0x40010800
 8002b74:	40010c00 	.word	0x40010c00
 8002b78:	40011000 	.word	0x40011000
 8002b7c:	40011400 	.word	0x40011400
 8002b80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	4909      	ldr	r1, [pc, #36]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	3301      	adds	r3, #1
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f47f ae8e 	bne.w	80028c4 <HAL_GPIO_Init+0x14>
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	372c      	adds	r7, #44	; 0x2c
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	887b      	ldrh	r3, [r7, #2]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	e001      	b.n	8002bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	807b      	strh	r3, [r7, #2]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bf6:	787b      	ldrb	r3, [r7, #1]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bfc:	887a      	ldrh	r2, [r7, #2]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c02:	e003      	b.n	8002c0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	041a      	lsls	r2, r3, #16
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	611a      	str	r2, [r3, #16]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e272      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c38:	4b92      	ldr	r3, [pc, #584]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d00c      	beq.n	8002c5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c44:	4b8f      	ldr	r3, [pc, #572]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d112      	bne.n	8002c76 <HAL_RCC_OscConfig+0x5e>
 8002c50:	4b8c      	ldr	r3, [pc, #560]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5c:	d10b      	bne.n	8002c76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5e:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d06c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x12c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d168      	bne.n	8002d44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e24c      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x76>
 8002c80:	4b80      	ldr	r3, [pc, #512]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a7f      	ldr	r2, [pc, #508]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e02e      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x98>
 8002c96:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a7a      	ldr	r2, [pc, #488]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b78      	ldr	r3, [pc, #480]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a77      	ldr	r2, [pc, #476]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01d      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xbc>
 8002cba:	4b72      	ldr	r3, [pc, #456]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a71      	ldr	r2, [pc, #452]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a6e      	ldr	r2, [pc, #440]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002cd4:	4b6b      	ldr	r3, [pc, #428]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a6a      	ldr	r2, [pc, #424]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b68      	ldr	r3, [pc, #416]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a67      	ldr	r2, [pc, #412]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7ff fc14 	bl	8002520 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7ff fc10 	bl	8002520 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e200      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b5d      	ldr	r3, [pc, #372]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xe4>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7ff fc00 	bl	8002520 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7ff fbfc 	bl	8002520 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1ec      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x10c>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d063      	beq.n	8002e1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d52:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d5e:	4b49      	ldr	r3, [pc, #292]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d11c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x18c>
 8002d6a:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d116      	bne.n	8002da4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	4b43      	ldr	r3, [pc, #268]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_RCC_OscConfig+0x176>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e1c0      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8e:	4b3d      	ldr	r3, [pc, #244]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4939      	ldr	r1, [pc, #228]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	e03a      	b.n	8002e1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dac:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7ff fbb5 	bl	8002520 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7ff fbb1 	bl	8002520 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e1a1      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4927      	ldr	r1, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
 8002dec:	e015      	b.n	8002e1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7ff fb94 	bl	8002520 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfc:	f7ff fb90 	bl	8002520 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e180      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d03a      	beq.n	8002e9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d019      	beq.n	8002e62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <HAL_RCC_OscConfig+0x274>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7ff fb74 	bl	8002520 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7ff fb70 	bl	8002520 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e160      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f000 fad8 	bl	8003410 <RCC_Delay>
 8002e60:	e01c      	b.n	8002e9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_RCC_OscConfig+0x274>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7ff fb5a 	bl	8002520 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6e:	e00f      	b.n	8002e90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e70:	f7ff fb56 	bl	8002520 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d908      	bls.n	8002e90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e146      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	42420000 	.word	0x42420000
 8002e8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	4b92      	ldr	r3, [pc, #584]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e9      	bne.n	8002e70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80a6 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eae:	4b8b      	ldr	r3, [pc, #556]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10d      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	4b88      	ldr	r3, [pc, #544]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4a87      	ldr	r2, [pc, #540]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	61d3      	str	r3, [r2, #28]
 8002ec6:	4b85      	ldr	r3, [pc, #532]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	4b82      	ldr	r3, [pc, #520]	; (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d118      	bne.n	8002f14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee2:	4b7f      	ldr	r3, [pc, #508]	; (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a7e      	ldr	r2, [pc, #504]	; (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eee:	f7ff fb17 	bl	8002520 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef6:	f7ff fb13 	bl	8002520 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b64      	cmp	r3, #100	; 0x64
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e103      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	4b75      	ldr	r3, [pc, #468]	; (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x312>
 8002f1c:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6213      	str	r3, [r2, #32]
 8002f28:	e02d      	b.n	8002f86 <HAL_RCC_OscConfig+0x36e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x334>
 8002f32:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a69      	ldr	r2, [pc, #420]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a66      	ldr	r2, [pc, #408]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	6213      	str	r3, [r2, #32]
 8002f4a:	e01c      	b.n	8002f86 <HAL_RCC_OscConfig+0x36e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d10c      	bne.n	8002f6e <HAL_RCC_OscConfig+0x356>
 8002f54:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a60      	ldr	r2, [pc, #384]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6213      	str	r3, [r2, #32]
 8002f60:	4b5e      	ldr	r3, [pc, #376]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	4a5d      	ldr	r2, [pc, #372]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6213      	str	r3, [r2, #32]
 8002f6c:	e00b      	b.n	8002f86 <HAL_RCC_OscConfig+0x36e>
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a5a      	ldr	r2, [pc, #360]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6213      	str	r3, [r2, #32]
 8002f7a:	4b58      	ldr	r3, [pc, #352]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a57      	ldr	r2, [pc, #348]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d015      	beq.n	8002fba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7ff fac7 	bl	8002520 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7ff fac3 	bl	8002520 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0b1      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	4b4b      	ldr	r3, [pc, #300]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ee      	beq.n	8002f96 <HAL_RCC_OscConfig+0x37e>
 8002fb8:	e014      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fba:	f7ff fab1 	bl	8002520 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc2:	f7ff faad 	bl	8002520 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e09b      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd8:	4b40      	ldr	r3, [pc, #256]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ee      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d105      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fea:	4b3c      	ldr	r3, [pc, #240]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8087 	beq.w	800310e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003000:	4b36      	ldr	r3, [pc, #216]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b08      	cmp	r3, #8
 800300a:	d061      	beq.n	80030d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d146      	bne.n	80030a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003014:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7ff fa81 	bl	8002520 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003022:	f7ff fa7d 	bl	8002520 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e06d      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f0      	bne.n	8003022 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d108      	bne.n	800305c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	4921      	ldr	r1, [pc, #132]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305c:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a19      	ldr	r1, [r3, #32]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	430b      	orrs	r3, r1
 800306e:	491b      	ldr	r1, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7ff fa51 	bl	8002520 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7ff fa4d 	bl	8002520 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e03d      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x46a>
 80030a0:	e035      	b.n	800310e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7ff fa3a 	bl	8002520 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7ff fa36 	bl	8002520 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e026      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x498>
 80030ce:	e01e      	b.n	800310e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e019      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
 80030e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_OscConfig+0x500>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000

0800311c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0d0      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003130:	4b6a      	ldr	r3, [pc, #424]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d910      	bls.n	8003160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b67      	ldr	r3, [pc, #412]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 0207 	bic.w	r2, r3, #7
 8003146:	4965      	ldr	r1, [pc, #404]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b63      	ldr	r3, [pc, #396]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0b8      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d020      	beq.n	80031ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003178:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003182:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003190:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a52      	ldr	r2, [pc, #328]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800319a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319c:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	494d      	ldr	r1, [pc, #308]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d040      	beq.n	800323c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d115      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e07f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031da:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e073      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e06b      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031fa:	4b39      	ldr	r3, [pc, #228]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f023 0203 	bic.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4936      	ldr	r1, [pc, #216]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800320c:	f7ff f988 	bl	8002520 <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	e00a      	b.n	800322a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003214:	f7ff f984 	bl	8002520 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e053      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 020c 	and.w	r2, r3, #12
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	429a      	cmp	r2, r3
 800323a:	d1eb      	bne.n	8003214 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800323c:	4b27      	ldr	r3, [pc, #156]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d210      	bcs.n	800326c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0207 	bic.w	r2, r3, #7
 8003252:	4922      	ldr	r1, [pc, #136]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e032      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4916      	ldr	r1, [pc, #88]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	490e      	ldr	r1, [pc, #56]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032aa:	f000 f821 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80032ae:	4602      	mov	r2, r0
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	490a      	ldr	r1, [pc, #40]	; (80032e4 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	5ccb      	ldrb	r3, [r1, r3]
 80032be:	fa22 f303 	lsr.w	r3, r2, r3
 80032c2:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <HAL_RCC_ClockConfig+0x1cc>)
 80032c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1d0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f8e6 	bl	800249c <HAL_InitTick>

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40022000 	.word	0x40022000
 80032e0:	40021000 	.word	0x40021000
 80032e4:	08004d00 	.word	0x08004d00
 80032e8:	2000001c 	.word	0x2000001c
 80032ec:	20000020 	.word	0x20000020

080032f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	b490      	push	{r4, r7}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032f6:	4b29      	ldr	r3, [pc, #164]	; (800339c <HAL_RCC_GetSysClockFreq+0xac>)
 80032f8:	1d3c      	adds	r4, r7, #4
 80032fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003300:	f240 2301 	movw	r3, #513	; 0x201
 8003304:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800331a:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b04      	cmp	r3, #4
 8003328:	d002      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x40>
 800332a:	2b08      	cmp	r3, #8
 800332c:	d003      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x46>
 800332e:	e02b      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003332:	623b      	str	r3, [r7, #32]
      break;
 8003334:	e02b      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	0c9b      	lsrs	r3, r3, #18
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	3328      	adds	r3, #40	; 0x28
 8003340:	443b      	add	r3, r7
 8003342:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003346:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003352:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0c5b      	lsrs	r3, r3, #17
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	3328      	adds	r3, #40	; 0x28
 800335e:	443b      	add	r3, r7
 8003360:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003364:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800336a:	fb03 f202 	mul.w	r2, r3, r2
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	e004      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	4a0b      	ldr	r2, [pc, #44]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	623b      	str	r3, [r7, #32]
      break;
 8003386:	e002      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800338a:	623b      	str	r3, [r7, #32]
      break;
 800338c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338e:	6a3b      	ldr	r3, [r7, #32]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3728      	adds	r7, #40	; 0x28
 8003394:	46bd      	mov	sp, r7
 8003396:	bc90      	pop	{r4, r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	08004cf0 	.word	0x08004cf0
 80033a0:	40021000 	.word	0x40021000
 80033a4:	007a1200 	.word	0x007a1200
 80033a8:	003d0900 	.word	0x003d0900

080033ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b0:	4b02      	ldr	r3, [pc, #8]	; (80033bc <HAL_RCC_GetHCLKFreq+0x10>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	2000001c 	.word	0x2000001c

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c4:	f7ff fff2 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	08004d10 	.word	0x08004d10

080033e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033ec:	f7ff ffde 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	0adb      	lsrs	r3, r3, #11
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4903      	ldr	r1, [pc, #12]	; (800340c <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	08004d10 	.word	0x08004d10

08003410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <RCC_Delay+0x34>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <RCC_Delay+0x38>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	0a5b      	lsrs	r3, r3, #9
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800342c:	bf00      	nop
  }
  while (Delay --);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1e5a      	subs	r2, r3, #1
 8003432:	60fa      	str	r2, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f9      	bne.n	800342c <RCC_Delay+0x1c>
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	2000001c 	.word	0x2000001c
 8003448:	10624dd3 	.word	0x10624dd3

0800344c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e041      	b.n	80034e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fe fe5a 	bl	800212c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 fc4a 	bl	8003d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d001      	beq.n	8003504 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e032      	b.n	800356a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a18      	ldr	r2, [pc, #96]	; (8003574 <HAL_TIM_Base_Start+0x88>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00e      	beq.n	8003534 <HAL_TIM_Base_Start+0x48>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351e:	d009      	beq.n	8003534 <HAL_TIM_Base_Start+0x48>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <HAL_TIM_Base_Start+0x8c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIM_Base_Start+0x48>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a13      	ldr	r2, [pc, #76]	; (800357c <HAL_TIM_Base_Start+0x90>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b06      	cmp	r3, #6
 8003544:	d010      	beq.n	8003568 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003556:	e007      	b.n	8003568 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800

08003580 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a1a      	ldr	r2, [r3, #32]
 800358e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10f      	bne.n	80035b8 <HAL_TIM_Base_Stop+0x38>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a1a      	ldr	r2, [r3, #32]
 800359e:	f240 4344 	movw	r3, #1092	; 0x444
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d107      	bne.n	80035b8 <HAL_TIM_Base_Stop+0x38>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e041      	b.n	8003662 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f839 	bl	800366a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	4619      	mov	r1, r3
 800360a:	4610      	mov	r0, r2
 800360c:	f000 fb8a 	bl	8003d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_TIM_PWM_Start+0x24>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e022      	b.n	80036e6 <HAL_TIM_PWM_Start+0x6a>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d109      	bne.n	80036ba <HAL_TIM_PWM_Start+0x3e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	bf14      	ite	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	2300      	moveq	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	e015      	b.n	80036e6 <HAL_TIM_PWM_Start+0x6a>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d109      	bne.n	80036d4 <HAL_TIM_PWM_Start+0x58>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e008      	b.n	80036e6 <HAL_TIM_PWM_Start+0x6a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e05e      	b.n	80037ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_PWM_Start+0x82>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036fc:	e013      	b.n	8003726 <HAL_TIM_PWM_Start+0xaa>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d104      	bne.n	800370e <HAL_TIM_PWM_Start+0x92>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800370c:	e00b      	b.n	8003726 <HAL_TIM_PWM_Start+0xaa>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d104      	bne.n	800371e <HAL_TIM_PWM_Start+0xa2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800371c:	e003      	b.n	8003726 <HAL_TIM_PWM_Start+0xaa>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2201      	movs	r2, #1
 800372c:	6839      	ldr	r1, [r7, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fd78 	bl	8004224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <HAL_TIM_PWM_Start+0x138>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d107      	bne.n	800374e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <HAL_TIM_PWM_Start+0x138>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_TIM_PWM_Start+0xfa>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d009      	beq.n	8003776 <HAL_TIM_PWM_Start+0xfa>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <HAL_TIM_PWM_Start+0x13c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_TIM_PWM_Start+0xfa>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a12      	ldr	r2, [pc, #72]	; (80037bc <HAL_TIM_PWM_Start+0x140>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d111      	bne.n	800379a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b06      	cmp	r3, #6
 8003786:	d010      	beq.n	80037aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003798:	e007      	b.n	80037aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40000800 	.word	0x40000800

080037c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e093      	b.n	80038fc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fe fcd1 	bl	8002190 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003804:	f023 0307 	bic.w	r3, r3, #7
 8003808:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f000 fa85 	bl	8003d24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	4313      	orrs	r3, r2
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003860:	f023 030c 	bic.w	r3, r3, #12
 8003864:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800386c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	021b      	lsls	r3, r3, #8
 800387c:	4313      	orrs	r3, r2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	011a      	lsls	r2, r3, #4
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	031b      	lsls	r3, r3, #12
 8003890:	4313      	orrs	r3, r2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800389e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	4313      	orrs	r3, r2
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003914:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800391c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003924:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800392c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d110      	bne.n	8003956 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d102      	bne.n	8003940 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800393a:	7b7b      	ldrb	r3, [r7, #13]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d001      	beq.n	8003944 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e069      	b.n	8003a18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003954:	e031      	b.n	80039ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b04      	cmp	r3, #4
 800395a:	d110      	bne.n	800397e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800395c:	7bbb      	ldrb	r3, [r7, #14]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d102      	bne.n	8003968 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003962:	7b3b      	ldrb	r3, [r7, #12]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d001      	beq.n	800396c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e055      	b.n	8003a18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800397c:	e01d      	b.n	80039ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d108      	bne.n	8003996 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003984:	7bbb      	ldrb	r3, [r7, #14]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d105      	bne.n	8003996 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800398a:	7b7b      	ldrb	r3, [r7, #13]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d102      	bne.n	8003996 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003990:	7b3b      	ldrb	r3, [r7, #12]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d001      	beq.n	800399a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e03e      	b.n	8003a18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2202      	movs	r2, #2
 80039ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_TIM_Encoder_Start+0xc4>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d008      	beq.n	80039d8 <HAL_TIM_Encoder_Start+0xd4>
 80039c6:	e00f      	b.n	80039e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2201      	movs	r2, #1
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fc27 	bl	8004224 <TIM_CCxChannelCmd>
      break;
 80039d6:	e016      	b.n	8003a06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	2104      	movs	r1, #4
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fc1f 	bl	8004224 <TIM_CCxChannelCmd>
      break;
 80039e6:	e00e      	b.n	8003a06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2201      	movs	r2, #1
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fc17 	bl	8004224 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2201      	movs	r2, #1
 80039fc:	2104      	movs	r1, #4
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fc10 	bl	8004224 <TIM_CCxChannelCmd>
      break;
 8003a04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e0ac      	b.n	8003b94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	f200 809f 	bhi.w	8003b88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a4a:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a85 	.word	0x08003a85
 8003a54:	08003b89 	.word	0x08003b89
 8003a58:	08003b89 	.word	0x08003b89
 8003a5c:	08003b89 	.word	0x08003b89
 8003a60:	08003ac5 	.word	0x08003ac5
 8003a64:	08003b89 	.word	0x08003b89
 8003a68:	08003b89 	.word	0x08003b89
 8003a6c:	08003b89 	.word	0x08003b89
 8003a70:	08003b07 	.word	0x08003b07
 8003a74:	08003b89 	.word	0x08003b89
 8003a78:	08003b89 	.word	0x08003b89
 8003a7c:	08003b89 	.word	0x08003b89
 8003a80:	08003b47 	.word	0x08003b47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f9ac 	bl	8003de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0208 	orr.w	r2, r2, #8
 8003a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0204 	bic.w	r2, r2, #4
 8003aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6999      	ldr	r1, [r3, #24]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	619a      	str	r2, [r3, #24]
      break;
 8003ac2:	e062      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f9f2 	bl	8003eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6999      	ldr	r1, [r3, #24]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	021a      	lsls	r2, r3, #8
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	619a      	str	r2, [r3, #24]
      break;
 8003b04:	e041      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fa3b 	bl	8003f88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0208 	orr.w	r2, r2, #8
 8003b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0204 	bic.w	r2, r2, #4
 8003b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69d9      	ldr	r1, [r3, #28]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	61da      	str	r2, [r3, #28]
      break;
 8003b44:	e021      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fa85 	bl	800405c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69d9      	ldr	r1, [r3, #28]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	021a      	lsls	r2, r3, #8
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	61da      	str	r2, [r3, #28]
      break;
 8003b86:	e000      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003b88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIM_ConfigClockSource+0x18>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e0b3      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x180>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bec:	d03e      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0xd0>
 8003bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf2:	f200 8087 	bhi.w	8003d04 <HAL_TIM_ConfigClockSource+0x168>
 8003bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfa:	f000 8085 	beq.w	8003d08 <HAL_TIM_ConfigClockSource+0x16c>
 8003bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c02:	d87f      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x168>
 8003c04:	2b70      	cmp	r3, #112	; 0x70
 8003c06:	d01a      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0xa2>
 8003c08:	2b70      	cmp	r3, #112	; 0x70
 8003c0a:	d87b      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x168>
 8003c0c:	2b60      	cmp	r3, #96	; 0x60
 8003c0e:	d050      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x116>
 8003c10:	2b60      	cmp	r3, #96	; 0x60
 8003c12:	d877      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x168>
 8003c14:	2b50      	cmp	r3, #80	; 0x50
 8003c16:	d03c      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0xf6>
 8003c18:	2b50      	cmp	r3, #80	; 0x50
 8003c1a:	d873      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x168>
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d058      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x136>
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d86f      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x168>
 8003c24:	2b30      	cmp	r3, #48	; 0x30
 8003c26:	d064      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x156>
 8003c28:	2b30      	cmp	r3, #48	; 0x30
 8003c2a:	d86b      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x168>
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d060      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x156>
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d867      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x168>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d05c      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x156>
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d05a      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c3c:	e062      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6899      	ldr	r1, [r3, #8]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f000 faca 	bl	80041e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	609a      	str	r2, [r3, #8]
      break;
 8003c6a:	e04e      	b.n	8003d0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	6899      	ldr	r1, [r3, #8]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f000 fab3 	bl	80041e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c8e:	609a      	str	r2, [r3, #8]
      break;
 8003c90:	e03b      	b.n	8003d0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6859      	ldr	r1, [r3, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f000 fa2a 	bl	80040f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2150      	movs	r1, #80	; 0x50
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fa81 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 8003cb0:	e02b      	b.n	8003d0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6859      	ldr	r1, [r3, #4]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f000 fa48 	bl	8004154 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2160      	movs	r1, #96	; 0x60
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fa71 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 8003cd0:	e01b      	b.n	8003d0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6859      	ldr	r1, [r3, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f000 fa0a 	bl	80040f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2140      	movs	r1, #64	; 0x40
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fa61 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 8003cf0:	e00b      	b.n	8003d0a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f000 fa58 	bl	80041b2 <TIM_ITRx_SetConfig>
        break;
 8003d02:	e002      	b.n	8003d0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d04:	bf00      	nop
 8003d06:	e000      	b.n	8003d0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a29      	ldr	r2, [pc, #164]	; (8003ddc <TIM_Base_SetConfig+0xb8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00b      	beq.n	8003d54 <TIM_Base_SetConfig+0x30>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d42:	d007      	beq.n	8003d54 <TIM_Base_SetConfig+0x30>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <TIM_Base_SetConfig+0xbc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <TIM_Base_SetConfig+0x30>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a25      	ldr	r2, [pc, #148]	; (8003de4 <TIM_Base_SetConfig+0xc0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d108      	bne.n	8003d66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <TIM_Base_SetConfig+0xb8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00b      	beq.n	8003d86 <TIM_Base_SetConfig+0x62>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d74:	d007      	beq.n	8003d86 <TIM_Base_SetConfig+0x62>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <TIM_Base_SetConfig+0xbc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_Base_SetConfig+0x62>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <TIM_Base_SetConfig+0xc0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d108      	bne.n	8003d98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a07      	ldr	r2, [pc, #28]	; (8003ddc <TIM_Base_SetConfig+0xb8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d103      	bne.n	8003dcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	615a      	str	r2, [r3, #20]
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800

08003de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f023 0201 	bic.w	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f023 0302 	bic.w	r3, r3, #2
 8003e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <TIM_OC1_SetConfig+0xc8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d10c      	bne.n	8003e5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 0308 	bic.w	r3, r3, #8
 8003e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f023 0304 	bic.w	r3, r3, #4
 8003e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <TIM_OC1_SetConfig+0xc8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d111      	bne.n	8003e8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	621a      	str	r2, [r3, #32]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40012c00 	.word	0x40012c00

08003eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f023 0210 	bic.w	r2, r3, #16
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f023 0320 	bic.w	r3, r3, #32
 8003efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <TIM_OC2_SetConfig+0xd0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d10d      	bne.n	8003f30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a14      	ldr	r2, [pc, #80]	; (8003f84 <TIM_OC2_SetConfig+0xd0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d113      	bne.n	8003f60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr
 8003f84:	40012c00 	.word	0x40012c00

08003f88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0303 	bic.w	r3, r3, #3
 8003fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <TIM_OC3_SetConfig+0xd0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10d      	bne.n	8004002 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a14      	ldr	r2, [pc, #80]	; (8004058 <TIM_OC3_SetConfig+0xd0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d113      	bne.n	8004032 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	621a      	str	r2, [r3, #32]
}
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40012c00 	.word	0x40012c00

0800405c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	031b      	lsls	r3, r3, #12
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0f      	ldr	r2, [pc, #60]	; (80040f4 <TIM_OC4_SetConfig+0x98>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d109      	bne.n	80040d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	019b      	lsls	r3, r3, #6
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	40012c00 	.word	0x40012c00

080040f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0201 	bic.w	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 030a 	bic.w	r3, r3, #10
 8004134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	621a      	str	r2, [r3, #32]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f023 0210 	bic.w	r2, r3, #16
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800417e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	031b      	lsls	r3, r3, #12
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004190:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f043 0307 	orr.w	r3, r3, #7
 80041d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	609a      	str	r2, [r3, #8]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b087      	sub	sp, #28
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004200:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	021a      	lsls	r2, r3, #8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	431a      	orrs	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4313      	orrs	r3, r2
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	609a      	str	r2, [r3, #8]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2201      	movs	r2, #1
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a1a      	ldr	r2, [r3, #32]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	43db      	mvns	r3, r3
 8004246:	401a      	ands	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a1a      	ldr	r2, [r3, #32]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	431a      	orrs	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004280:	2302      	movs	r3, #2
 8004282:	e046      	b.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a16      	ldr	r2, [pc, #88]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00e      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d0:	d009      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a12      	ldr	r2, [pc, #72]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a10      	ldr	r2, [pc, #64]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10c      	bne.n	8004300 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800

08004328 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004340:	2302      	movs	r3, #2
 8004342:	e03d      	b.n	80043c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e03f      	b.n	800445c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7fd ff8b 	bl	800230c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2224      	movs	r2, #36	; 0x24
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800440c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fba8 	bl	8004b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004422:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004432:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004442:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	4613      	mov	r3, r2
 8004470:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b20      	cmp	r3, #32
 800447c:	d11d      	bne.n	80044ba <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_UART_Receive_IT+0x26>
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e016      	b.n	80044bc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_UART_Receive_IT+0x38>
 8004498:	2302      	movs	r3, #2
 800449a:	e00f      	b.n	80044bc <HAL_UART_Receive_IT+0x58>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	461a      	mov	r2, r3
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f9ce 	bl	8004852 <UART_Start_Receive_IT>
 80044b6:	4603      	mov	r3, r0
 80044b8:	e000      	b.n	80044bc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10d      	bne.n	8004516 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_UART_IRQHandler+0x52>
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa7f 	bl	8004a12 <UART_Receive_IT>
      return;
 8004514:	e17b      	b.n	800480e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80b1 	beq.w	8004680 <HAL_UART_IRQHandler+0x1bc>
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <HAL_UART_IRQHandler+0x70>
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a6 	beq.w	8004680 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_UART_IRQHandler+0x90>
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	f043 0201 	orr.w	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <HAL_UART_IRQHandler+0xb0>
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f043 0202 	orr.w	r2, r3, #2
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_UART_IRQHandler+0xd0>
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f043 0204 	orr.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00f      	beq.n	80045be <HAL_UART_IRQHandler+0xfa>
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <HAL_UART_IRQHandler+0xee>
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f043 0208 	orr.w	r2, r3, #8
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 811e 	beq.w	8004804 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <HAL_UART_IRQHandler+0x11e>
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa18 	bl	8004a12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <HAL_UART_IRQHandler+0x146>
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d031      	beq.n	800466e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f95a 	bl	80048c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d023      	beq.n	8004666 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	2b00      	cmp	r3, #0
 8004634:	d013      	beq.n	800465e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	4a76      	ldr	r2, [pc, #472]	; (8004814 <HAL_UART_IRQHandler+0x350>)
 800463c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe f8be 	bl	80027c4 <HAL_DMA_Abort_IT>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d016      	beq.n	800467c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004658:	4610      	mov	r0, r2
 800465a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	e00e      	b.n	800467c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8e3 	bl	800482a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	e00a      	b.n	800467c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f8df 	bl	800482a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466c:	e006      	b.n	800467c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8db 	bl	800482a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800467a:	e0c3      	b.n	8004804 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467c:	bf00      	nop
    return;
 800467e:	e0c1      	b.n	8004804 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	2b01      	cmp	r3, #1
 8004686:	f040 80a1 	bne.w	80047cc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 809b 	beq.w	80047cc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8095 	beq.w	80047cc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d04e      	beq.n	8004764 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80046d0:	8a3b      	ldrh	r3, [r7, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8098 	beq.w	8004808 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046dc:	8a3a      	ldrh	r2, [r7, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	f080 8092 	bcs.w	8004808 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8a3a      	ldrh	r2, [r7, #16]
 80046e8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d02b      	beq.n	800474c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004702:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004722:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0210 	bic.w	r2, r2, #16
 8004740:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	4618      	mov	r0, r3
 8004748:	f7fe f801 	bl	800274e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004754:	b29b      	uxth	r3, r3
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	b29b      	uxth	r3, r3
 800475a:	4619      	mov	r1, r3
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f86d 	bl	800483c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004762:	e051      	b.n	8004808 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800476c:	b29b      	uxth	r3, r3
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d047      	beq.n	800480c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800477c:	8a7b      	ldrh	r3, [r7, #18]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d044      	beq.n	800480c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004790:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0210 	bic.w	r2, r2, #16
 80047be:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047c0:	8a7b      	ldrh	r3, [r7, #18]
 80047c2:	4619      	mov	r1, r3
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f839 	bl	800483c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047ca:	e01f      	b.n	800480c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <HAL_UART_IRQHandler+0x324>
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f8af 	bl	8004944 <UART_Transmit_IT>
    return;
 80047e6:	e012      	b.n	800480e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <HAL_UART_IRQHandler+0x34a>
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f8f0 	bl	80049e2 <UART_EndTransmit_IT>
    return;
 8004802:	e004      	b.n	800480e <HAL_UART_IRQHandler+0x34a>
    return;
 8004804:	bf00      	nop
 8004806:	e002      	b.n	800480e <HAL_UART_IRQHandler+0x34a>
      return;
 8004808:	bf00      	nop
 800480a:	e000      	b.n	800480e <HAL_UART_IRQHandler+0x34a>
      return;
 800480c:	bf00      	nop
  }
}
 800480e:	3728      	adds	r7, #40	; 0x28
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	0800491d 	.word	0x0800491d

08004818 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr

08004852 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	4613      	mov	r3, r2
 800485e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2222      	movs	r2, #34	; 0x22
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004896:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0220 	orr.w	r2, r2, #32
 80048b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr

080048c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d107      	bne.n	8004904 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0210 	bic.w	r2, r2, #16
 8004902:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr

0800491c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f7ff ff77 	bl	800482a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b21      	cmp	r3, #33	; 0x21
 8004956:	d13e      	bne.n	80049d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004960:	d114      	bne.n	800498c <UART_Transmit_IT+0x48>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d110      	bne.n	800498c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800497e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	1c9a      	adds	r2, r3, #2
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	621a      	str	r2, [r3, #32]
 800498a:	e008      	b.n	800499e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	1c59      	adds	r1, r3, #1
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6211      	str	r1, [r2, #32]
 8004996:	781a      	ldrb	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	4619      	mov	r1, r3
 80049ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10f      	bne.n	80049d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e000      	b.n	80049d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049d6:	2302      	movs	r3, #2
  }
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr

080049e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ff08 	bl	8004818 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b086      	sub	sp, #24
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b22      	cmp	r3, #34	; 0x22
 8004a24:	f040 8099 	bne.w	8004b5a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a30:	d117      	bne.n	8004a62 <UART_Receive_IT+0x50>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d113      	bne.n	8004a62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	1c9a      	adds	r2, r3, #2
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a60:	e026      	b.n	8004ab0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a74:	d007      	beq.n	8004a86 <UART_Receive_IT+0x74>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <UART_Receive_IT+0x82>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e008      	b.n	8004aa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	4619      	mov	r1, r3
 8004abe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d148      	bne.n	8004b56 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0220 	bic.w	r2, r2, #32
 8004ad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d123      	bne.n	8004b4c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0210 	bic.w	r2, r2, #16
 8004b18:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b10      	cmp	r3, #16
 8004b26:	d10a      	bne.n	8004b3e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff fe79 	bl	800483c <HAL_UARTEx_RxEventCallback>
 8004b4a:	e002      	b.n	8004b52 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fc fbfb 	bl	8001348 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e002      	b.n	8004b5c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e000      	b.n	8004b5c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b9e:	f023 030c 	bic.w	r3, r3, #12
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a2c      	ldr	r2, [pc, #176]	; (8004c78 <UART_SetConfig+0x114>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d103      	bne.n	8004bd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004bcc:	f7fe fc0c 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	e002      	b.n	8004bda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bd4:	f7fe fbf4 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8004bd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009a      	lsls	r2, r3, #2
 8004be4:	441a      	add	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	4a22      	ldr	r2, [pc, #136]	; (8004c7c <UART_SetConfig+0x118>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	0119      	lsls	r1, r3, #4
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	009a      	lsls	r2, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c10:	4b1a      	ldr	r3, [pc, #104]	; (8004c7c <UART_SetConfig+0x118>)
 8004c12:	fba3 0302 	umull	r0, r3, r3, r2
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2064      	movs	r0, #100	; 0x64
 8004c1a:	fb00 f303 	mul.w	r3, r0, r3
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	3332      	adds	r3, #50	; 0x32
 8004c24:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <UART_SetConfig+0x118>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c30:	4419      	add	r1, r3
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009a      	lsls	r2, r3, #2
 8004c3c:	441a      	add	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <UART_SetConfig+0x118>)
 8004c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	2064      	movs	r0, #100	; 0x64
 8004c52:	fb00 f303 	mul.w	r3, r0, r3
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	3332      	adds	r3, #50	; 0x32
 8004c5c:	4a07      	ldr	r2, [pc, #28]	; (8004c7c <UART_SetConfig+0x118>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	f003 020f 	and.w	r2, r3, #15
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40013800 	.word	0x40013800
 8004c7c:	51eb851f 	.word	0x51eb851f

08004c80 <__libc_init_array>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	2600      	movs	r6, #0
 8004c84:	4d0c      	ldr	r5, [pc, #48]	; (8004cb8 <__libc_init_array+0x38>)
 8004c86:	4c0d      	ldr	r4, [pc, #52]	; (8004cbc <__libc_init_array+0x3c>)
 8004c88:	1b64      	subs	r4, r4, r5
 8004c8a:	10a4      	asrs	r4, r4, #2
 8004c8c:	42a6      	cmp	r6, r4
 8004c8e:	d109      	bne.n	8004ca4 <__libc_init_array+0x24>
 8004c90:	f000 f822 	bl	8004cd8 <_init>
 8004c94:	2600      	movs	r6, #0
 8004c96:	4d0a      	ldr	r5, [pc, #40]	; (8004cc0 <__libc_init_array+0x40>)
 8004c98:	4c0a      	ldr	r4, [pc, #40]	; (8004cc4 <__libc_init_array+0x44>)
 8004c9a:	1b64      	subs	r4, r4, r5
 8004c9c:	10a4      	asrs	r4, r4, #2
 8004c9e:	42a6      	cmp	r6, r4
 8004ca0:	d105      	bne.n	8004cae <__libc_init_array+0x2e>
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca8:	4798      	blx	r3
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7ee      	b.n	8004c8c <__libc_init_array+0xc>
 8004cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb2:	4798      	blx	r3
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	e7f2      	b.n	8004c9e <__libc_init_array+0x1e>
 8004cb8:	08004d18 	.word	0x08004d18
 8004cbc:	08004d18 	.word	0x08004d18
 8004cc0:	08004d18 	.word	0x08004d18
 8004cc4:	08004d1c 	.word	0x08004d1c

08004cc8 <memset>:
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4402      	add	r2, r0
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <memset+0xa>
 8004cd0:	4770      	bx	lr
 8004cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd6:	e7f9      	b.n	8004ccc <memset+0x4>

08004cd8 <_init>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	bf00      	nop
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr

08004ce4 <_fini>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr
