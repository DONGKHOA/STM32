
Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004418  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f4  080046f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080046f4  080046f4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046f4  080046f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080046fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001060  20000010  0800470c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001070  0800470c  00021070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125bc  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b20  00000000  00000000  000325f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00035118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00036238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193bb  00000000  00000000  00037250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012649  00000000  00000000  0005060b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ee0  00000000  00000000  00062c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5b34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000472c  00000000  00000000  000f5b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004510 	.word	0x08004510

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004510 	.word	0x08004510

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000002c 	.word	0x2000002c
 800018c:	20000080 	.word	0x20000080

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b098      	sub	sp, #96	; 0x60
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fb39 	bl	800080c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f859 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f8c7 	bl	8000330 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001a2:	f000 f89b 	bl	80002dc <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80001a6:	2300      	movs	r3, #0
 80001a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80001aa:	2300      	movs	r3, #0
 80001ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80001ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80001b2:	2101      	movs	r1, #1
 80001b4:	4618      	mov	r0, r3
 80001b6:	f001 fec0 	bl	8001f3a <osSemaphoreCreate>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a1d      	ldr	r2, [pc, #116]	; (8000234 <main+0xa4>)
 80001be:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of NormalTask */
  osThreadDef(NormalTask, StartNormalTask, osPriorityNormal, 0, 128);
 80001c0:	4b1d      	ldr	r3, [pc, #116]	; (8000238 <main+0xa8>)
 80001c2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001c6:	461d      	mov	r5, r3
 80001c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NormalTaskHandle = osThreadCreate(osThread(NormalTask), NULL);
 80001d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 fe4d 	bl	8001e7a <osThreadCreate>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a16      	ldr	r2, [pc, #88]	; (800023c <main+0xac>)
 80001e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of HighTask */
  osThreadDef(HighTask, StartHighTask, osPriorityAboveNormal, 0, 128);
 80001e6:	4b16      	ldr	r3, [pc, #88]	; (8000240 <main+0xb0>)
 80001e8:	f107 0420 	add.w	r4, r7, #32
 80001ec:	461d      	mov	r5, r3
 80001ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HighTaskHandle = osThreadCreate(osThread(HighTask), NULL);
 80001fa:	f107 0320 	add.w	r3, r7, #32
 80001fe:	2100      	movs	r1, #0
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fe3a 	bl	8001e7a <osThreadCreate>
 8000206:	4603      	mov	r3, r0
 8000208:	4a0e      	ldr	r2, [pc, #56]	; (8000244 <main+0xb4>)
 800020a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LowTask */
  osThreadDef(LowTask, StartLowTask, osPriorityBelowNormal, 0, 128);
 800020c:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <main+0xb8>)
 800020e:	1d3c      	adds	r4, r7, #4
 8000210:	461d      	mov	r5, r3
 8000212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000216:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800021a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LowTaskHandle = osThreadCreate(osThread(LowTask), NULL);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f001 fe29 	bl	8001e7a <osThreadCreate>
 8000228:	4603      	mov	r3, r0
 800022a:	4a08      	ldr	r2, [pc, #32]	; (800024c <main+0xbc>)
 800022c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800022e:	f001 fe1d 	bl	8001e6c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000232:	e7fe      	b.n	8000232 <main+0xa2>
 8000234:	200002d4 	.word	0x200002d4
 8000238:	08004548 	.word	0x08004548
 800023c:	200002c8 	.word	0x200002c8
 8000240:	08004564 	.word	0x08004564
 8000244:	200002cc 	.word	0x200002cc
 8000248:	08004580 	.word	0x08004580
 800024c:	200002d0 	.word	0x200002d0

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b090      	sub	sp, #64	; 0x40
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2228      	movs	r2, #40	; 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f004 f94e 	bl	8004500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000272:	2301      	movs	r3, #1
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	2302      	movs	r3, #2
 8000286:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fd65 	bl	8000d68 <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a4:	f000 f960 	bl	8000568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 ffd2 	bl	800126c <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ce:	f000 f94b 	bl	8000568 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	; 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_USART2_UART_Init+0x4c>)
 80002e2:	4a12      	ldr	r2, [pc, #72]	; (800032c <MX_USART2_UART_Init+0x50>)
 80002e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002e6:	4b10      	ldr	r3, [pc, #64]	; (8000328 <MX_USART2_UART_Init+0x4c>)
 80002e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MX_USART2_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <MX_USART2_UART_Init+0x4c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <MX_USART2_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <MX_USART2_UART_Init+0x4c>)
 8000302:	220c      	movs	r2, #12
 8000304:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <MX_USART2_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <MX_USART2_UART_Init+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <MX_USART2_UART_Init+0x4c>)
 8000314:	f001 fbb2 	bl	8001a7c <HAL_UART_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800031e:	f000 f923 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000280 	.word	0x20000280
 800032c:	40004400 	.word	0x40004400

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000344:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <MX_GPIO_Init+0xa8>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a23      	ldr	r2, [pc, #140]	; (80003d8 <MX_GPIO_Init+0xa8>)
 800034a:	f043 0310 	orr.w	r3, r3, #16
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <MX_GPIO_Init+0xa8>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0310 	and.w	r3, r3, #16
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <MX_GPIO_Init+0xa8>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <MX_GPIO_Init+0xa8>)
 8000362:	f043 0320 	orr.w	r3, r3, #32
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <MX_GPIO_Init+0xa8>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0320 	and.w	r3, r3, #32
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_GPIO_Init+0xa8>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <MX_GPIO_Init+0xa8>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_GPIO_Init+0xa8>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0304 	and.w	r3, r3, #4
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000392:	4812      	ldr	r0, [pc, #72]	; (80003dc <MX_GPIO_Init+0xac>)
 8000394:	f000 fcd0 	bl	8000d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039e:	2301      	movs	r3, #1
 80003a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a6:	2302      	movs	r3, #2
 80003a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	4619      	mov	r1, r3
 80003b0:	480a      	ldr	r0, [pc, #40]	; (80003dc <MX_GPIO_Init+0xac>)
 80003b2:	f000 fb3d 	bl	8000a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003b6:	2301      	movs	r3, #1
 80003b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003be:	2301      	movs	r3, #1
 80003c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	4619      	mov	r1, r3
 80003c8:	4805      	ldr	r0, [pc, #20]	; (80003e0 <MX_GPIO_Init+0xb0>)
 80003ca:	f000 fb31 	bl	8000a30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ce:	bf00      	nop
 80003d0:	3720      	adds	r7, #32
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40011000 	.word	0x40011000
 80003e0:	40010800 	.word	0x40010800

080003e4 <StartNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void const * argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    const char *str_high_in = "Enter Medium Task\n";
 80003ec:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <StartNormalTask+0x44>)
 80003ee:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, (uint8_t *) str_high_in, strlen(str_high_in), 100);
 80003f0:	68f8      	ldr	r0, [r7, #12]
 80003f2:	f7ff fead 	bl	8000150 <strlen>
 80003f6:	4603      	mov	r3, r0
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	68f9      	ldr	r1, [r7, #12]
 80003fe:	480b      	ldr	r0, [pc, #44]	; (800042c <StartNormalTask+0x48>)
 8000400:	f001 fb8c 	bl	8001b1c <HAL_UART_Transmit>
    
    const char *str_high_out = "Leaving Medium Task\n";
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <StartNormalTask+0x4c>)
 8000406:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&huart2, (uint8_t *) str_high_out, strlen(str_high_out), 100);
 8000408:	68b8      	ldr	r0, [r7, #8]
 800040a:	f7ff fea1 	bl	8000150 <strlen>
 800040e:	4603      	mov	r3, r0
 8000410:	b29a      	uxth	r2, r3
 8000412:	2364      	movs	r3, #100	; 0x64
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <StartNormalTask+0x48>)
 8000418:	f001 fb80 	bl	8001b1c <HAL_UART_Transmit>
    osDelay(500);
 800041c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000420:	f001 fd77 	bl	8001f12 <osDelay>
  {
 8000424:	e7e2      	b.n	80003ec <StartNormalTask+0x8>
 8000426:	bf00      	nop
 8000428:	0800459c 	.word	0x0800459c
 800042c:	20000280 	.word	0x20000280
 8000430:	080045b0 	.word	0x080045b0

08000434 <StartHighTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHighTask */
void StartHighTask(void const * argument)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHighTask */
  /* Infinite loop */
  for(;;)
  {
    const char *str_high_in = "Enter High Task and Waiting for Semaphore\n";
 800043c:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <StartHighTask+0x74>)
 800043e:	617b      	str	r3, [r7, #20]
    HAL_UART_Transmit(&huart2, (uint8_t *) str_high_in, strlen(str_high_in), 100);
 8000440:	6978      	ldr	r0, [r7, #20]
 8000442:	f7ff fe85 	bl	8000150 <strlen>
 8000446:	4603      	mov	r3, r0
 8000448:	b29a      	uxth	r2, r3
 800044a:	2364      	movs	r3, #100	; 0x64
 800044c:	6979      	ldr	r1, [r7, #20]
 800044e:	4817      	ldr	r0, [pc, #92]	; (80004ac <StartHighTask+0x78>)
 8000450:	f001 fb64 	bl	8001b1c <HAL_UART_Transmit>

    osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <StartHighTask+0x7c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f04f 31ff 	mov.w	r1, #4294967295
 800045c:	4618      	mov	r0, r3
 800045e:	f001 fd9f 	bl	8001fa0 <osSemaphoreWait>

    const char *str_sem = "Semaphore is acquired by High Task\n";
 8000462:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <StartHighTask+0x80>)
 8000464:	613b      	str	r3, [r7, #16]
    HAL_UART_Transmit(&huart2, (uint8_t *) str_sem, strlen(str_sem), 100);
 8000466:	6938      	ldr	r0, [r7, #16]
 8000468:	f7ff fe72 	bl	8000150 <strlen>
 800046c:	4603      	mov	r3, r0
 800046e:	b29a      	uxth	r2, r3
 8000470:	2364      	movs	r3, #100	; 0x64
 8000472:	6939      	ldr	r1, [r7, #16]
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <StartHighTask+0x78>)
 8000476:	f001 fb51 	bl	8001b1c <HAL_UART_Transmit>

    const char *str_high_out = "Leaving High Task and Releasing Semaphore\n\n";
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <StartHighTask+0x84>)
 800047c:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, (uint8_t *) str_high_out, strlen(str_high_out), 100);
 800047e:	68f8      	ldr	r0, [r7, #12]
 8000480:	f7ff fe66 	bl	8000150 <strlen>
 8000484:	4603      	mov	r3, r0
 8000486:	b29a      	uxth	r2, r3
 8000488:	2364      	movs	r3, #100	; 0x64
 800048a:	68f9      	ldr	r1, [r7, #12]
 800048c:	4807      	ldr	r0, [pc, #28]	; (80004ac <StartHighTask+0x78>)
 800048e:	f001 fb45 	bl	8001b1c <HAL_UART_Transmit>

    osSemaphoreRelease(myBinarySem01Handle);
 8000492:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <StartHighTask+0x7c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4618      	mov	r0, r3
 8000498:	f001 fdd0 	bl	800203c <osSemaphoreRelease>
    osDelay(500);
 800049c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a0:	f001 fd37 	bl	8001f12 <osDelay>
  {
 80004a4:	e7ca      	b.n	800043c <StartHighTask+0x8>
 80004a6:	bf00      	nop
 80004a8:	080045c8 	.word	0x080045c8
 80004ac:	20000280 	.word	0x20000280
 80004b0:	200002d4 	.word	0x200002d4
 80004b4:	080045f4 	.word	0x080045f4
 80004b8:	08004618 	.word	0x08004618

080004bc <StartLowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowTask */
void StartLowTask(void const * argument)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLowTask */
  /* Infinite loop */
  for(;;)
  {
    const char *str_high_in = "Enter low Task and Waiting for Semaphore\n";
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <StartLowTask+0x74>)
 80004c6:	617b      	str	r3, [r7, #20]
    HAL_UART_Transmit(&huart2, (uint8_t *) str_high_in, strlen(str_high_in), 100);
 80004c8:	6978      	ldr	r0, [r7, #20]
 80004ca:	f7ff fe41 	bl	8000150 <strlen>
 80004ce:	4603      	mov	r3, r0
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	2364      	movs	r3, #100	; 0x64
 80004d4:	6979      	ldr	r1, [r7, #20]
 80004d6:	4817      	ldr	r0, [pc, #92]	; (8000534 <StartLowTask+0x78>)
 80004d8:	f001 fb20 	bl	8001b1c <HAL_UART_Transmit>

    osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <StartLowTask+0x7c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f04f 31ff 	mov.w	r1, #4294967295
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 fd5b 	bl	8001fa0 <osSemaphoreWait>

    const char *str_sem = "Semaphore is acquired by low Task\n";
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <StartLowTask+0x80>)
 80004ec:	613b      	str	r3, [r7, #16]
    HAL_UART_Transmit(&huart2, (uint8_t *) str_sem, strlen(str_sem), 100);
 80004ee:	6938      	ldr	r0, [r7, #16]
 80004f0:	f7ff fe2e 	bl	8000150 <strlen>
 80004f4:	4603      	mov	r3, r0
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	6939      	ldr	r1, [r7, #16]
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <StartLowTask+0x78>)
 80004fe:	f001 fb0d 	bl	8001b1c <HAL_UART_Transmit>

    const char *str_high_out = "Leaving low Task and Releasing Semaphore\n\n";
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <StartLowTask+0x84>)
 8000504:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, (uint8_t *) str_high_out, strlen(str_high_out), 100);
 8000506:	68f8      	ldr	r0, [r7, #12]
 8000508:	f7ff fe22 	bl	8000150 <strlen>
 800050c:	4603      	mov	r3, r0
 800050e:	b29a      	uxth	r2, r3
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	68f9      	ldr	r1, [r7, #12]
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <StartLowTask+0x78>)
 8000516:	f001 fb01 	bl	8001b1c <HAL_UART_Transmit>

    osSemaphoreRelease(myBinarySem01Handle);
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <StartLowTask+0x7c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fd8c 	bl	800203c <osSemaphoreRelease>
    osDelay(500);
 8000524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000528:	f001 fcf3 	bl	8001f12 <osDelay>
  {
 800052c:	e7ca      	b.n	80004c4 <StartLowTask+0x8>
 800052e:	bf00      	nop
 8000530:	08004644 	.word	0x08004644
 8000534:	20000280 	.word	0x20000280
 8000538:	200002d4 	.word	0x200002d4
 800053c:	08004670 	.word	0x08004670
 8000540:	08004694 	.word	0x08004694

08000544 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d101      	bne.n	800055a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000556:	f000 f96f 	bl	8000838 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40000800 	.word	0x40000800

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	e7fe      	b.n	8000570 <Error_Handler+0x8>
	...

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <HAL_MspInit+0x68>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a17      	ldr	r2, [pc, #92]	; (80005dc <HAL_MspInit+0x68>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6193      	str	r3, [r2, #24]
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <HAL_MspInit+0x68>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_MspInit+0x68>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a11      	ldr	r2, [pc, #68]	; (80005dc <HAL_MspInit+0x68>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_MspInit+0x68>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	210f      	movs	r1, #15
 80005ae:	f06f 0001 	mvn.w	r0, #1
 80005b2:	f000 fa12 	bl	80009da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_MspInit+0x6c>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_MspInit+0x6c>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010000 	.word	0x40010000

080005e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a1b      	ldr	r2, [pc, #108]	; (800066c <HAL_UART_MspInit+0x88>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d12f      	bne.n	8000664 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <HAL_UART_MspInit+0x8c>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_UART_MspInit+0x8c>)
 800060a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060e:	61d3      	str	r3, [r2, #28]
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_UART_MspInit+0x8c>)
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_UART_MspInit+0x8c>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a13      	ldr	r2, [pc, #76]	; (8000670 <HAL_UART_MspInit+0x8c>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <HAL_UART_MspInit+0x8c>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000634:	2304      	movs	r3, #4
 8000636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063c:	2303      	movs	r3, #3
 800063e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	480b      	ldr	r0, [pc, #44]	; (8000674 <HAL_UART_MspInit+0x90>)
 8000648:	f000 f9f2 	bl	8000a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800064c:	2308      	movs	r3, #8
 800064e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	4619      	mov	r1, r3
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <HAL_UART_MspInit+0x90>)
 8000660:	f000 f9e6 	bl	8000a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40004400 	.word	0x40004400
 8000670:	40021000 	.word	0x40021000
 8000674:	40010800 	.word	0x40010800

08000678 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08e      	sub	sp, #56	; 0x38
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000680:	2300      	movs	r3, #0
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000684:	2300      	movs	r3, #0
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000688:	2300      	movs	r3, #0
 800068a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800068e:	4b34      	ldr	r3, [pc, #208]	; (8000760 <HAL_InitTick+0xe8>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a33      	ldr	r2, [pc, #204]	; (8000760 <HAL_InitTick+0xe8>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4b31      	ldr	r3, [pc, #196]	; (8000760 <HAL_InitTick+0xe8>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006a6:	f107 0210 	add.w	r2, r7, #16
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4611      	mov	r1, r2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 ff4b 	bl	800154c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006b6:	6a3b      	ldr	r3, [r7, #32]
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d103      	bne.n	80006c8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006c0:	f000 ff1c 	bl	80014fc <HAL_RCC_GetPCLK1Freq>
 80006c4:	6378      	str	r0, [r7, #52]	; 0x34
 80006c6:	e004      	b.n	80006d2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006c8:	f000 ff18 	bl	80014fc <HAL_RCC_GetPCLK1Freq>
 80006cc:	4603      	mov	r3, r0
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d4:	4a23      	ldr	r2, [pc, #140]	; (8000764 <HAL_InitTick+0xec>)
 80006d6:	fba2 2303 	umull	r2, r3, r2, r3
 80006da:	0c9b      	lsrs	r3, r3, #18
 80006dc:	3b01      	subs	r3, #1
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <HAL_InitTick+0xf0>)
 80006e2:	4a22      	ldr	r2, [pc, #136]	; (800076c <HAL_InitTick+0xf4>)
 80006e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <HAL_InitTick+0xf0>)
 80006e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006ec:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <HAL_InitTick+0xf0>)
 80006f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <HAL_InitTick+0xf0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <HAL_InitTick+0xf0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_InitTick+0xf0>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000706:	4818      	ldr	r0, [pc, #96]	; (8000768 <HAL_InitTick+0xf0>)
 8000708:	f000 ff6e 	bl	80015e8 <HAL_TIM_Base_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000712:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000716:	2b00      	cmp	r3, #0
 8000718:	d11b      	bne.n	8000752 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <HAL_InitTick+0xf0>)
 800071c:	f000 ffbc 	bl	8001698 <HAL_TIM_Base_Start_IT>
 8000720:	4603      	mov	r3, r0
 8000722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000726:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800072a:	2b00      	cmp	r3, #0
 800072c:	d111      	bne.n	8000752 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800072e:	201e      	movs	r0, #30
 8000730:	f000 f96f 	bl	8000a12 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b0f      	cmp	r3, #15
 8000738:	d808      	bhi.n	800074c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800073a:	2200      	movs	r2, #0
 800073c:	6879      	ldr	r1, [r7, #4]
 800073e:	201e      	movs	r0, #30
 8000740:	f000 f94b 	bl	80009da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000744:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <HAL_InitTick+0xf8>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6013      	str	r3, [r2, #0]
 800074a:	e002      	b.n	8000752 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800074c:	2301      	movs	r3, #1
 800074e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000752:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000756:	4618      	mov	r0, r3
 8000758:	3738      	adds	r7, #56	; 0x38
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
 8000764:	431bde83 	.word	0x431bde83
 8000768:	200002d8 	.word	0x200002d8
 800076c:	40000800 	.word	0x40000800
 8000770:	20000004 	.word	0x20000004

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <NMI_Handler+0x4>

0800077a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <MemManage_Handler+0x4>

08000786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <BusFault_Handler+0x4>

0800078c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <UsageFault_Handler+0x4>

08000792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
	...

080007a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <TIM4_IRQHandler+0x10>)
 80007a6:	f000 ffc9 	bl	800173c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200002d8 	.word	0x200002d8

080007b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c0:	f7ff fff8 	bl	80007b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c4:	480b      	ldr	r0, [pc, #44]	; (80007f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007c6:	490c      	ldr	r1, [pc, #48]	; (80007f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007da:	4a09      	ldr	r2, [pc, #36]	; (8000800 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007dc:	4c09      	ldr	r4, [pc, #36]	; (8000804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ea:	f003 fe57 	bl	800449c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ee:	f7ff fccf 	bl	8000190 <main>
  bx lr
 80007f2:	4770      	bx	lr
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007fc:	080046fc 	.word	0x080046fc
  ldr r2, =_sbss
 8000800:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000804:	20001070 	.word	0x20001070

08000808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC1_2_IRQHandler>
	...

0800080c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <HAL_Init+0x28>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <HAL_Init+0x28>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081c:	2003      	movs	r0, #3
 800081e:	f000 f8d1 	bl	80009c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000822:	200f      	movs	r0, #15
 8000824:	f7ff ff28 	bl	8000678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000828:	f7ff fea4 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40022000 	.word	0x40022000

08000838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_IncTick+0x1c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x20>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4413      	add	r3, r2
 8000848:	4a03      	ldr	r2, [pc, #12]	; (8000858 <HAL_IncTick+0x20>)
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000008 	.word	0x20000008
 8000858:	20000320 	.word	0x20000320

0800085c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;
 8000860:	4b02      	ldr	r3, [pc, #8]	; (800086c <HAL_GetTick+0x10>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	20000320 	.word	0x20000320

08000870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	db0b      	blt.n	80008fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 021f 	and.w	r2, r3, #31
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <__NVIC_EnableIRQ+0x34>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	095b      	lsrs	r3, r3, #5
 80008f4:	2001      	movs	r0, #1
 80008f6:	fa00 f202 	lsl.w	r2, r0, r2
 80008fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100

0800090c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db0a      	blt.n	8000936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <__NVIC_SetPriority+0x4c>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	0112      	lsls	r2, r2, #4
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	440b      	add	r3, r1
 8000930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000934:	e00a      	b.n	800094c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <__NVIC_SetPriority+0x50>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	3b04      	subs	r3, #4
 8000944:	0112      	lsls	r2, r2, #4
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	440b      	add	r3, r1
 800094a:	761a      	strb	r2, [r3, #24]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f1c3 0307 	rsb	r3, r3, #7
 800097a:	2b04      	cmp	r3, #4
 800097c:	bf28      	it	cs
 800097e:	2304      	movcs	r3, #4
 8000980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3304      	adds	r3, #4
 8000986:	2b06      	cmp	r3, #6
 8000988:	d902      	bls.n	8000990 <NVIC_EncodePriority+0x30>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3b03      	subs	r3, #3
 800098e:	e000      	b.n	8000992 <NVIC_EncodePriority+0x32>
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	f04f 32ff 	mov.w	r2, #4294967295
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43da      	mvns	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43d9      	mvns	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	4313      	orrs	r3, r2
         );
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3724      	adds	r7, #36	; 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ff4f 	bl	8000870 <__NVIC_SetPriorityGrouping>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ec:	f7ff ff64 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 80009f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	68b9      	ldr	r1, [r7, #8]
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f7ff ffb2 	bl	8000960 <NVIC_EncodePriority>
 80009fc:	4602      	mov	r2, r0
 80009fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff81 	bl	800090c <__NVIC_SetPriority>
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff57 	bl	80008d4 <__NVIC_EnableIRQ>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b08b      	sub	sp, #44	; 0x2c
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a42:	e169      	b.n	8000d18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a44:	2201      	movs	r2, #1
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	69fa      	ldr	r2, [r7, #28]
 8000a54:	4013      	ands	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	f040 8158 	bne.w	8000d12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	4a9a      	ldr	r2, [pc, #616]	; (8000cd0 <HAL_GPIO_Init+0x2a0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d05e      	beq.n	8000b2a <HAL_GPIO_Init+0xfa>
 8000a6c:	4a98      	ldr	r2, [pc, #608]	; (8000cd0 <HAL_GPIO_Init+0x2a0>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d875      	bhi.n	8000b5e <HAL_GPIO_Init+0x12e>
 8000a72:	4a98      	ldr	r2, [pc, #608]	; (8000cd4 <HAL_GPIO_Init+0x2a4>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d058      	beq.n	8000b2a <HAL_GPIO_Init+0xfa>
 8000a78:	4a96      	ldr	r2, [pc, #600]	; (8000cd4 <HAL_GPIO_Init+0x2a4>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d86f      	bhi.n	8000b5e <HAL_GPIO_Init+0x12e>
 8000a7e:	4a96      	ldr	r2, [pc, #600]	; (8000cd8 <HAL_GPIO_Init+0x2a8>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d052      	beq.n	8000b2a <HAL_GPIO_Init+0xfa>
 8000a84:	4a94      	ldr	r2, [pc, #592]	; (8000cd8 <HAL_GPIO_Init+0x2a8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d869      	bhi.n	8000b5e <HAL_GPIO_Init+0x12e>
 8000a8a:	4a94      	ldr	r2, [pc, #592]	; (8000cdc <HAL_GPIO_Init+0x2ac>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d04c      	beq.n	8000b2a <HAL_GPIO_Init+0xfa>
 8000a90:	4a92      	ldr	r2, [pc, #584]	; (8000cdc <HAL_GPIO_Init+0x2ac>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d863      	bhi.n	8000b5e <HAL_GPIO_Init+0x12e>
 8000a96:	4a92      	ldr	r2, [pc, #584]	; (8000ce0 <HAL_GPIO_Init+0x2b0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d046      	beq.n	8000b2a <HAL_GPIO_Init+0xfa>
 8000a9c:	4a90      	ldr	r2, [pc, #576]	; (8000ce0 <HAL_GPIO_Init+0x2b0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d85d      	bhi.n	8000b5e <HAL_GPIO_Init+0x12e>
 8000aa2:	2b12      	cmp	r3, #18
 8000aa4:	d82a      	bhi.n	8000afc <HAL_GPIO_Init+0xcc>
 8000aa6:	2b12      	cmp	r3, #18
 8000aa8:	d859      	bhi.n	8000b5e <HAL_GPIO_Init+0x12e>
 8000aaa:	a201      	add	r2, pc, #4	; (adr r2, 8000ab0 <HAL_GPIO_Init+0x80>)
 8000aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab0:	08000b2b 	.word	0x08000b2b
 8000ab4:	08000b05 	.word	0x08000b05
 8000ab8:	08000b17 	.word	0x08000b17
 8000abc:	08000b59 	.word	0x08000b59
 8000ac0:	08000b5f 	.word	0x08000b5f
 8000ac4:	08000b5f 	.word	0x08000b5f
 8000ac8:	08000b5f 	.word	0x08000b5f
 8000acc:	08000b5f 	.word	0x08000b5f
 8000ad0:	08000b5f 	.word	0x08000b5f
 8000ad4:	08000b5f 	.word	0x08000b5f
 8000ad8:	08000b5f 	.word	0x08000b5f
 8000adc:	08000b5f 	.word	0x08000b5f
 8000ae0:	08000b5f 	.word	0x08000b5f
 8000ae4:	08000b5f 	.word	0x08000b5f
 8000ae8:	08000b5f 	.word	0x08000b5f
 8000aec:	08000b5f 	.word	0x08000b5f
 8000af0:	08000b5f 	.word	0x08000b5f
 8000af4:	08000b0d 	.word	0x08000b0d
 8000af8:	08000b21 	.word	0x08000b21
 8000afc:	4a79      	ldr	r2, [pc, #484]	; (8000ce4 <HAL_GPIO_Init+0x2b4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d013      	beq.n	8000b2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b02:	e02c      	b.n	8000b5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	623b      	str	r3, [r7, #32]
          break;
 8000b0a:	e029      	b.n	8000b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	3304      	adds	r3, #4
 8000b12:	623b      	str	r3, [r7, #32]
          break;
 8000b14:	e024      	b.n	8000b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	3308      	adds	r3, #8
 8000b1c:	623b      	str	r3, [r7, #32]
          break;
 8000b1e:	e01f      	b.n	8000b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	330c      	adds	r3, #12
 8000b26:	623b      	str	r3, [r7, #32]
          break;
 8000b28:	e01a      	b.n	8000b60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d102      	bne.n	8000b38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b32:	2304      	movs	r3, #4
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e013      	b.n	8000b60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d105      	bne.n	8000b4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b40:	2308      	movs	r3, #8
 8000b42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	611a      	str	r2, [r3, #16]
          break;
 8000b4a:	e009      	b.n	8000b60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	615a      	str	r2, [r3, #20]
          break;
 8000b56:	e003      	b.n	8000b60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
          break;
 8000b5c:	e000      	b.n	8000b60 <HAL_GPIO_Init+0x130>
          break;
 8000b5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	2bff      	cmp	r3, #255	; 0xff
 8000b64:	d801      	bhi.n	8000b6a <HAL_GPIO_Init+0x13a>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	e001      	b.n	8000b6e <HAL_GPIO_Init+0x13e>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	2bff      	cmp	r3, #255	; 0xff
 8000b74:	d802      	bhi.n	8000b7c <HAL_GPIO_Init+0x14c>
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	e002      	b.n	8000b82 <HAL_GPIO_Init+0x152>
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7e:	3b08      	subs	r3, #8
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	210f      	movs	r1, #15
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	401a      	ands	r2, r3
 8000b94:	6a39      	ldr	r1, [r7, #32]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 80b1 	beq.w	8000d12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb0:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a4c      	ldr	r2, [pc, #304]	; (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b4a      	ldr	r3, [pc, #296]	; (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bc8:	4a48      	ldr	r2, [pc, #288]	; (8000cec <HAL_GPIO_Init+0x2bc>)
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	3302      	adds	r3, #2
 8000bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	f003 0303 	and.w	r3, r3, #3
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	220f      	movs	r2, #15
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a40      	ldr	r2, [pc, #256]	; (8000cf0 <HAL_GPIO_Init+0x2c0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d013      	beq.n	8000c1c <HAL_GPIO_Init+0x1ec>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a3f      	ldr	r2, [pc, #252]	; (8000cf4 <HAL_GPIO_Init+0x2c4>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d00d      	beq.n	8000c18 <HAL_GPIO_Init+0x1e8>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a3e      	ldr	r2, [pc, #248]	; (8000cf8 <HAL_GPIO_Init+0x2c8>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d007      	beq.n	8000c14 <HAL_GPIO_Init+0x1e4>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a3d      	ldr	r2, [pc, #244]	; (8000cfc <HAL_GPIO_Init+0x2cc>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d101      	bne.n	8000c10 <HAL_GPIO_Init+0x1e0>
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e006      	b.n	8000c1e <HAL_GPIO_Init+0x1ee>
 8000c10:	2304      	movs	r3, #4
 8000c12:	e004      	b.n	8000c1e <HAL_GPIO_Init+0x1ee>
 8000c14:	2302      	movs	r3, #2
 8000c16:	e002      	b.n	8000c1e <HAL_GPIO_Init+0x1ee>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <HAL_GPIO_Init+0x1ee>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c20:	f002 0203 	and.w	r2, r2, #3
 8000c24:	0092      	lsls	r2, r2, #2
 8000c26:	4093      	lsls	r3, r2
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c2e:	492f      	ldr	r1, [pc, #188]	; (8000cec <HAL_GPIO_Init+0x2bc>)
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3302      	adds	r3, #2
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d006      	beq.n	8000c56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c48:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	492c      	ldr	r1, [pc, #176]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	608b      	str	r3, [r1, #8]
 8000c54:	e006      	b.n	8000c64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	4928      	ldr	r1, [pc, #160]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c70:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	4922      	ldr	r1, [pc, #136]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	60cb      	str	r3, [r1, #12]
 8000c7c:	e006      	b.n	8000c8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	491e      	ldr	r1, [pc, #120]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d006      	beq.n	8000ca6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	4918      	ldr	r1, [pc, #96]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	604b      	str	r3, [r1, #4]
 8000ca4:	e006      	b.n	8000cb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4914      	ldr	r1, [pc, #80]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d021      	beq.n	8000d04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	490e      	ldr	r1, [pc, #56]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	600b      	str	r3, [r1, #0]
 8000ccc:	e021      	b.n	8000d12 <HAL_GPIO_Init+0x2e2>
 8000cce:	bf00      	nop
 8000cd0:	10320000 	.word	0x10320000
 8000cd4:	10310000 	.word	0x10310000
 8000cd8:	10220000 	.word	0x10220000
 8000cdc:	10210000 	.word	0x10210000
 8000ce0:	10120000 	.word	0x10120000
 8000ce4:	10110000 	.word	0x10110000
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	40010800 	.word	0x40010800
 8000cf4:	40010c00 	.word	0x40010c00
 8000cf8:	40011000 	.word	0x40011000
 8000cfc:	40011400 	.word	0x40011400
 8000d00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_GPIO_Init+0x304>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	4909      	ldr	r1, [pc, #36]	; (8000d34 <HAL_GPIO_Init+0x304>)
 8000d0e:	4013      	ands	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	3301      	adds	r3, #1
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f47f ae8e 	bne.w	8000a44 <HAL_GPIO_Init+0x14>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	372c      	adds	r7, #44	; 0x2c
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	40010400 	.word	0x40010400

08000d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
 8000d44:	4613      	mov	r3, r2
 8000d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d48:	787b      	ldrb	r3, [r7, #1]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d4e:	887a      	ldrh	r2, [r7, #2]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d54:	e003      	b.n	8000d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	041a      	lsls	r2, r3, #16
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	611a      	str	r2, [r3, #16]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e272      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 8087 	beq.w	8000e96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d88:	4b92      	ldr	r3, [pc, #584]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 030c 	and.w	r3, r3, #12
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d00c      	beq.n	8000dae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d94:	4b8f      	ldr	r3, [pc, #572]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 030c 	and.w	r3, r3, #12
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d112      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x5e>
 8000da0:	4b8c      	ldr	r3, [pc, #560]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dac:	d10b      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dae:	4b89      	ldr	r3, [pc, #548]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d06c      	beq.n	8000e94 <HAL_RCC_OscConfig+0x12c>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d168      	bne.n	8000e94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e24c      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dce:	d106      	bne.n	8000dde <HAL_RCC_OscConfig+0x76>
 8000dd0:	4b80      	ldr	r3, [pc, #512]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a7f      	ldr	r2, [pc, #508]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	e02e      	b.n	8000e3c <HAL_RCC_OscConfig+0xd4>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10c      	bne.n	8000e00 <HAL_RCC_OscConfig+0x98>
 8000de6:	4b7b      	ldr	r3, [pc, #492]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a7a      	ldr	r2, [pc, #488]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b78      	ldr	r3, [pc, #480]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a77      	ldr	r2, [pc, #476]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e01d      	b.n	8000e3c <HAL_RCC_OscConfig+0xd4>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e08:	d10c      	bne.n	8000e24 <HAL_RCC_OscConfig+0xbc>
 8000e0a:	4b72      	ldr	r3, [pc, #456]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a71      	ldr	r2, [pc, #452]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	4b6f      	ldr	r3, [pc, #444]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a6e      	ldr	r2, [pc, #440]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e00b      	b.n	8000e3c <HAL_RCC_OscConfig+0xd4>
 8000e24:	4b6b      	ldr	r3, [pc, #428]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a6a      	ldr	r2, [pc, #424]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b68      	ldr	r3, [pc, #416]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a67      	ldr	r2, [pc, #412]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d013      	beq.n	8000e6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fd0a 	bl	800085c <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fd06 	bl	800085c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b64      	cmp	r3, #100	; 0x64
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e200      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5e:	4b5d      	ldr	r3, [pc, #372]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f0      	beq.n	8000e4c <HAL_RCC_OscConfig+0xe4>
 8000e6a:	e014      	b.n	8000e96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fcf6 	bl	800085c <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e74:	f7ff fcf2 	bl	800085c <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b64      	cmp	r3, #100	; 0x64
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e1ec      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e86:	4b53      	ldr	r3, [pc, #332]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f0      	bne.n	8000e74 <HAL_RCC_OscConfig+0x10c>
 8000e92:	e000      	b.n	8000e96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d063      	beq.n	8000f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea2:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00b      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eae:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d11c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x18c>
 8000eba:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d116      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec6:	4b43      	ldr	r3, [pc, #268]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d005      	beq.n	8000ede <HAL_RCC_OscConfig+0x176>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d001      	beq.n	8000ede <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e1c0      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ede:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4939      	ldr	r1, [pc, #228]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef2:	e03a      	b.n	8000f6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d020      	beq.n	8000f3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000efc:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f02:	f7ff fcab 	bl	800085c <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fca7 	bl	800085c <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e1a1      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0f0      	beq.n	8000f0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f28:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4927      	ldr	r1, [pc, #156]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
 8000f3c:	e015      	b.n	8000f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f44:	f7ff fc8a 	bl	800085c <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fc86 	bl	800085c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e180      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f0      	bne.n	8000f4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d03a      	beq.n	8000fec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d019      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_RCC_OscConfig+0x274>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f84:	f7ff fc6a 	bl	800085c <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fc66 	bl	800085c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e160      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f0      	beq.n	8000f8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f000 fafe 	bl	80015ac <RCC_Delay>
 8000fb0:	e01c      	b.n	8000fec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_RCC_OscConfig+0x274>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb8:	f7ff fc50 	bl	800085c <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fbe:	e00f      	b.n	8000fe0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fc4c 	bl	800085c <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d908      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e146      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	42420000 	.word	0x42420000
 8000fdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe0:	4b92      	ldr	r3, [pc, #584]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1e9      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80a6 	beq.w	8001146 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ffe:	4b8b      	ldr	r3, [pc, #556]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10d      	bne.n	8001026 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b88      	ldr	r3, [pc, #544]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a87      	ldr	r2, [pc, #540]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b85      	ldr	r3, [pc, #532]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001022:	2301      	movs	r3, #1
 8001024:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001026:	4b82      	ldr	r3, [pc, #520]	; (8001230 <HAL_RCC_OscConfig+0x4c8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	2b00      	cmp	r3, #0
 8001030:	d118      	bne.n	8001064 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001032:	4b7f      	ldr	r3, [pc, #508]	; (8001230 <HAL_RCC_OscConfig+0x4c8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a7e      	ldr	r2, [pc, #504]	; (8001230 <HAL_RCC_OscConfig+0x4c8>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800103e:	f7ff fc0d 	bl	800085c <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001046:	f7ff fc09 	bl	800085c <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b64      	cmp	r3, #100	; 0x64
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e103      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	4b75      	ldr	r3, [pc, #468]	; (8001230 <HAL_RCC_OscConfig+0x4c8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d106      	bne.n	800107a <HAL_RCC_OscConfig+0x312>
 800106c:	4b6f      	ldr	r3, [pc, #444]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4a6e      	ldr	r2, [pc, #440]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6213      	str	r3, [r2, #32]
 8001078:	e02d      	b.n	80010d6 <HAL_RCC_OscConfig+0x36e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0x334>
 8001082:	4b6a      	ldr	r3, [pc, #424]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a69      	ldr	r2, [pc, #420]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	6213      	str	r3, [r2, #32]
 800108e:	4b67      	ldr	r3, [pc, #412]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	4a66      	ldr	r2, [pc, #408]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001094:	f023 0304 	bic.w	r3, r3, #4
 8001098:	6213      	str	r3, [r2, #32]
 800109a:	e01c      	b.n	80010d6 <HAL_RCC_OscConfig+0x36e>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d10c      	bne.n	80010be <HAL_RCC_OscConfig+0x356>
 80010a4:	4b61      	ldr	r3, [pc, #388]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4a60      	ldr	r2, [pc, #384]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6213      	str	r3, [r2, #32]
 80010b0:	4b5e      	ldr	r3, [pc, #376]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4a5d      	ldr	r2, [pc, #372]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6213      	str	r3, [r2, #32]
 80010bc:	e00b      	b.n	80010d6 <HAL_RCC_OscConfig+0x36e>
 80010be:	4b5b      	ldr	r3, [pc, #364]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	4a5a      	ldr	r2, [pc, #360]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	f023 0301 	bic.w	r3, r3, #1
 80010c8:	6213      	str	r3, [r2, #32]
 80010ca:	4b58      	ldr	r3, [pc, #352]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	4a57      	ldr	r2, [pc, #348]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	f023 0304 	bic.w	r3, r3, #4
 80010d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d015      	beq.n	800110a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010de:	f7ff fbbd 	bl	800085c <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e4:	e00a      	b.n	80010fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e6:	f7ff fbb9 	bl	800085c <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e0b1      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fc:	4b4b      	ldr	r3, [pc, #300]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0ee      	beq.n	80010e6 <HAL_RCC_OscConfig+0x37e>
 8001108:	e014      	b.n	8001134 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fba7 	bl	800085c <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f7ff fba3 	bl	800085c <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001120:	4293      	cmp	r3, r2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e09b      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001128:	4b40      	ldr	r3, [pc, #256]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1ee      	bne.n	8001112 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d105      	bne.n	8001146 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800113a:	4b3c      	ldr	r3, [pc, #240]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a3b      	ldr	r2, [pc, #236]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001144:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8087 	beq.w	800125e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	2b08      	cmp	r3, #8
 800115a:	d061      	beq.n	8001220 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d146      	bne.n	80011f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001164:	4b33      	ldr	r3, [pc, #204]	; (8001234 <HAL_RCC_OscConfig+0x4cc>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116a:	f7ff fb77 	bl	800085c <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001172:	f7ff fb73 	bl	800085c <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e06d      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f0      	bne.n	8001172 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001198:	d108      	bne.n	80011ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	4921      	ldr	r1, [pc, #132]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a19      	ldr	r1, [r3, #32]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	430b      	orrs	r3, r1
 80011be:	491b      	ldr	r1, [pc, #108]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_RCC_OscConfig+0x4cc>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ca:	f7ff fb47 	bl	800085c <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d2:	f7ff fb43 	bl	800085c <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e03d      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x46a>
 80011f0:	e035      	b.n	800125e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_RCC_OscConfig+0x4cc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fb30 	bl	800085c <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001200:	f7ff fb2c 	bl	800085c <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e026      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0x498>
 800121e:	e01e      	b.n	800125e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d107      	bne.n	8001238 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e019      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
 800122c:	40021000 	.word	0x40021000
 8001230:	40007000 	.word	0x40007000
 8001234:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_RCC_OscConfig+0x500>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	429a      	cmp	r2, r3
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001256:	429a      	cmp	r2, r3
 8001258:	d001      	beq.n	800125e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000

0800126c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e0d0      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001280:	4b6a      	ldr	r3, [pc, #424]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d910      	bls.n	80012b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b67      	ldr	r3, [pc, #412]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f023 0207 	bic.w	r2, r3, #7
 8001296:	4965      	ldr	r1, [pc, #404]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800129e:	4b63      	ldr	r3, [pc, #396]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0b8      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c8:	4b59      	ldr	r3, [pc, #356]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a58      	ldr	r2, [pc, #352]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e0:	4b53      	ldr	r3, [pc, #332]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a52      	ldr	r2, [pc, #328]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ec:	4b50      	ldr	r3, [pc, #320]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	494d      	ldr	r1, [pc, #308]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d040      	beq.n	800138c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b47      	ldr	r3, [pc, #284]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d115      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e07f      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d107      	bne.n	800133a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132a:	4b41      	ldr	r3, [pc, #260]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e073      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e06b      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f023 0203 	bic.w	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4936      	ldr	r1, [pc, #216]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800135c:	f7ff fa7e 	bl	800085c <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	e00a      	b.n	800137a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001364:	f7ff fa7a 	bl	800085c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e053      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 020c 	and.w	r2, r3, #12
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	429a      	cmp	r2, r3
 800138a:	d1eb      	bne.n	8001364 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d210      	bcs.n	80013bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 0207 	bic.w	r2, r3, #7
 80013a2:	4922      	ldr	r1, [pc, #136]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e032      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	4916      	ldr	r1, [pc, #88]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	490e      	ldr	r1, [pc, #56]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013fa:	f000 f821 	bl	8001440 <HAL_RCC_GetSysClockFreq>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	490a      	ldr	r1, [pc, #40]	; (8001434 <HAL_RCC_ClockConfig+0x1c8>)
 800140c:	5ccb      	ldrb	r3, [r1, r3]
 800140e:	fa22 f303 	lsr.w	r3, r2, r3
 8001412:	4a09      	ldr	r2, [pc, #36]	; (8001438 <HAL_RCC_ClockConfig+0x1cc>)
 8001414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_RCC_ClockConfig+0x1d0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f92c 	bl	8000678 <HAL_InitTick>

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40022000 	.word	0x40022000
 8001430:	40021000 	.word	0x40021000
 8001434:	080046c8 	.word	0x080046c8
 8001438:	20000000 	.word	0x20000000
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d002      	beq.n	8001470 <HAL_RCC_GetSysClockFreq+0x30>
 800146a:	2b08      	cmp	r3, #8
 800146c:	d003      	beq.n	8001476 <HAL_RCC_GetSysClockFreq+0x36>
 800146e:	e027      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001472:	613b      	str	r3, [r7, #16]
      break;
 8001474:	e027      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	0c9b      	lsrs	r3, r3, #18
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	4a17      	ldr	r2, [pc, #92]	; (80014dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d010      	beq.n	80014b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	0c5b      	lsrs	r3, r3, #17
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80014a2:	fb03 f202 	mul.w	r2, r3, r2
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e004      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	613b      	str	r3, [r7, #16]
      break;
 80014be:	e002      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80014c2:	613b      	str	r3, [r7, #16]
      break;
 80014c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c6:	693b      	ldr	r3, [r7, #16]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	007a1200 	.word	0x007a1200
 80014dc:	080046e0 	.word	0x080046e0
 80014e0:	080046f0 	.word	0x080046f0
 80014e4:	003d0900 	.word	0x003d0900

080014e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	20000000 	.word	0x20000000

080014fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001500:	f7ff fff2 	bl	80014e8 <HAL_RCC_GetHCLKFreq>
 8001504:	4602      	mov	r2, r0
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	4903      	ldr	r1, [pc, #12]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001512:	5ccb      	ldrb	r3, [r1, r3]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	080046d8 	.word	0x080046d8

08001524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001528:	f7ff ffde 	bl	80014e8 <HAL_RCC_GetHCLKFreq>
 800152c:	4602      	mov	r2, r0
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	0adb      	lsrs	r3, r3, #11
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	4903      	ldr	r1, [pc, #12]	; (8001548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800153a:	5ccb      	ldrb	r3, [r1, r3]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	080046d8 	.word	0x080046d8

0800154c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	220f      	movs	r2, #15
 800155a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_RCC_GetClockConfig+0x58>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0203 	and.w	r2, r3, #3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_RCC_GetClockConfig+0x58>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_GetClockConfig+0x58>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_RCC_GetClockConfig+0x58>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	08db      	lsrs	r3, r3, #3
 8001586:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0207 	and.w	r2, r3, #7
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40022000 	.word	0x40022000

080015ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <RCC_Delay+0x34>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <RCC_Delay+0x38>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0a5b      	lsrs	r3, r3, #9
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015c8:	bf00      	nop
  }
  while (Delay --);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	60fa      	str	r2, [r7, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f9      	bne.n	80015c8 <RCC_Delay+0x1c>
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	20000000 	.word	0x20000000
 80015e4:	10624dd3 	.word	0x10624dd3

080015e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e041      	b.n	800167e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f839 	bl	8001686 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3304      	adds	r3, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f000 f9b4 	bl	8001994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d001      	beq.n	80016b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e03a      	b.n	8001726 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0201 	orr.w	r2, r2, #1
 80016c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a18      	ldr	r2, [pc, #96]	; (8001730 <HAL_TIM_Base_Start_IT+0x98>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d00e      	beq.n	80016f0 <HAL_TIM_Base_Start_IT+0x58>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016da:	d009      	beq.n	80016f0 <HAL_TIM_Base_Start_IT+0x58>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <HAL_TIM_Base_Start_IT+0x9c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d004      	beq.n	80016f0 <HAL_TIM_Base_Start_IT+0x58>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <HAL_TIM_Base_Start_IT+0xa0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d111      	bne.n	8001714 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d010      	beq.n	8001724 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 0201 	orr.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001712:	e007      	b.n	8001724 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40012c00 	.word	0x40012c00
 8001734:	40000400 	.word	0x40000400
 8001738:	40000800 	.word	0x40000800

0800173c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b02      	cmp	r3, #2
 8001750:	d122      	bne.n	8001798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b02      	cmp	r3, #2
 800175e:	d11b      	bne.n	8001798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f06f 0202 	mvn.w	r2, #2
 8001768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f8ed 	bl	800195e <HAL_TIM_IC_CaptureCallback>
 8001784:	e005      	b.n	8001792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f8e0 	bl	800194c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f8ef 	bl	8001970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d122      	bne.n	80017ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d11b      	bne.n	80017ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0204 	mvn.w	r2, #4
 80017bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2202      	movs	r2, #2
 80017c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f8c3 	bl	800195e <HAL_TIM_IC_CaptureCallback>
 80017d8:	e005      	b.n	80017e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f8b6 	bl	800194c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f8c5 	bl	8001970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d122      	bne.n	8001840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b08      	cmp	r3, #8
 8001806:	d11b      	bne.n	8001840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f06f 0208 	mvn.w	r2, #8
 8001810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2204      	movs	r2, #4
 8001816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f899 	bl	800195e <HAL_TIM_IC_CaptureCallback>
 800182c:	e005      	b.n	800183a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f88c 	bl	800194c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f89b 	bl	8001970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b10      	cmp	r3, #16
 800184c:	d122      	bne.n	8001894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b10      	cmp	r3, #16
 800185a:	d11b      	bne.n	8001894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f06f 0210 	mvn.w	r2, #16
 8001864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2208      	movs	r2, #8
 800186a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f86f 	bl	800195e <HAL_TIM_IC_CaptureCallback>
 8001880:	e005      	b.n	800188e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f862 	bl	800194c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f871 	bl	8001970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10e      	bne.n	80018c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d107      	bne.n	80018c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0201 	mvn.w	r2, #1
 80018b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe fe42 	bl	8000544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ca:	2b80      	cmp	r3, #128	; 0x80
 80018cc:	d10e      	bne.n	80018ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d8:	2b80      	cmp	r3, #128	; 0x80
 80018da:	d107      	bne.n	80018ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f8bf 	bl	8001a6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f6:	2b40      	cmp	r3, #64	; 0x40
 80018f8:	d10e      	bne.n	8001918 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001904:	2b40      	cmp	r3, #64	; 0x40
 8001906:	d107      	bne.n	8001918 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f835 	bl	8001982 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	2b20      	cmp	r3, #32
 8001924:	d10e      	bne.n	8001944 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f003 0320 	and.w	r3, r3, #32
 8001930:	2b20      	cmp	r3, #32
 8001932:	d107      	bne.n	8001944 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0220 	mvn.w	r2, #32
 800193c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f88a 	bl	8001a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a29      	ldr	r2, [pc, #164]	; (8001a4c <TIM_Base_SetConfig+0xb8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00b      	beq.n	80019c4 <TIM_Base_SetConfig+0x30>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b2:	d007      	beq.n	80019c4 <TIM_Base_SetConfig+0x30>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <TIM_Base_SetConfig+0xbc>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d003      	beq.n	80019c4 <TIM_Base_SetConfig+0x30>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a25      	ldr	r2, [pc, #148]	; (8001a54 <TIM_Base_SetConfig+0xc0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d108      	bne.n	80019d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <TIM_Base_SetConfig+0xb8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00b      	beq.n	80019f6 <TIM_Base_SetConfig+0x62>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e4:	d007      	beq.n	80019f6 <TIM_Base_SetConfig+0x62>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <TIM_Base_SetConfig+0xbc>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d003      	beq.n	80019f6 <TIM_Base_SetConfig+0x62>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <TIM_Base_SetConfig+0xc0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d108      	bne.n	8001a08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <TIM_Base_SetConfig+0xb8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d103      	bne.n	8001a3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	615a      	str	r2, [r3, #20]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	40012c00 	.word	0x40012c00
 8001a50:	40000400 	.word	0x40000400
 8001a54:	40000800 	.word	0x40000800

08001a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e042      	b.n	8001b14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7fe fd9e 	bl	80005e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2224      	movs	r2, #36	; 0x24
 8001aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f91d 	bl	8001d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	d16d      	bne.n	8001c18 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <HAL_UART_Transmit+0x2c>
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e066      	b.n	8001c1a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2221      	movs	r2, #33	; 0x21
 8001b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b5a:	f7fe fe7f 	bl	800085c <HAL_GetTick>
 8001b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	88fa      	ldrh	r2, [r7, #6]
 8001b64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b74:	d108      	bne.n	8001b88 <HAL_UART_Transmit+0x6c>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d104      	bne.n	8001b88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	e003      	b.n	8001b90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b90:	e02a      	b.n	8001be8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f840 	bl	8001c22 <UART_WaitOnFlagUntilTimeout>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e036      	b.n	8001c1a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10b      	bne.n	8001bca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	e007      	b.n	8001bda <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	781a      	ldrb	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1cf      	bne.n	8001b92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2140      	movs	r1, #64	; 0x40
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f810 	bl	8001c22 <UART_WaitOnFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e006      	b.n	8001c1a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e000      	b.n	8001c1a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001c18:	2302      	movs	r3, #2
  }
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b090      	sub	sp, #64	; 0x40
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c32:	e050      	b.n	8001cd6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3a:	d04c      	beq.n	8001cd6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c42:	f7fe fe0b 	bl	800085c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d241      	bcs.n	8001cd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	330c      	adds	r3, #12
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5c:	e853 3f00 	ldrex	r3, [r3]
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	330c      	adds	r3, #12
 8001c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c72:	637a      	str	r2, [r7, #52]	; 0x34
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c7a:	e841 2300 	strex	r3, r2, [r1]
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1e5      	bne.n	8001c52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3314      	adds	r3, #20
 8001c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	e853 3f00 	ldrex	r3, [r3]
 8001c94:	613b      	str	r3, [r7, #16]
   return(result);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3314      	adds	r3, #20
 8001ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ca6:	623a      	str	r2, [r7, #32]
 8001ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001caa:	69f9      	ldr	r1, [r7, #28]
 8001cac:	6a3a      	ldr	r2, [r7, #32]
 8001cae:	e841 2300 	strex	r3, r2, [r1]
 8001cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e5      	bne.n	8001c86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e00f      	b.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	bf0c      	ite	eq
 8001ce6:	2301      	moveq	r3, #1
 8001ce8:	2300      	movne	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d09f      	beq.n	8001c34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3740      	adds	r7, #64	; 0x40
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d3a:	f023 030c 	bic.w	r3, r3, #12
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	430b      	orrs	r3, r1
 8001d46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a2c      	ldr	r2, [pc, #176]	; (8001e14 <UART_SetConfig+0x114>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d103      	bne.n	8001d70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d68:	f7ff fbdc 	bl	8001524 <HAL_RCC_GetPCLK2Freq>
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	e002      	b.n	8001d76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d70:	f7ff fbc4 	bl	80014fc <HAL_RCC_GetPCLK1Freq>
 8001d74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009a      	lsls	r2, r3, #2
 8001d80:	441a      	add	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8c:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <UART_SetConfig+0x118>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	0119      	lsls	r1, r3, #4
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009a      	lsls	r2, r3, #2
 8001da0:	441a      	add	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <UART_SetConfig+0x118>)
 8001dae:	fba3 0302 	umull	r0, r3, r3, r2
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2064      	movs	r0, #100	; 0x64
 8001db6:	fb00 f303 	mul.w	r3, r0, r3
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	3332      	adds	r3, #50	; 0x32
 8001dc0:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <UART_SetConfig+0x118>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dcc:	4419      	add	r1, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009a      	lsls	r2, r3, #2
 8001dd8:	441a      	add	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <UART_SetConfig+0x118>)
 8001de6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	2064      	movs	r0, #100	; 0x64
 8001dee:	fb00 f303 	mul.w	r3, r0, r3
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	3332      	adds	r3, #50	; 0x32
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <UART_SetConfig+0x118>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	f003 020f 	and.w	r2, r3, #15
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	440a      	add	r2, r1
 8001e0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40013800 	.word	0x40013800
 8001e18:	51eb851f 	.word	0x51eb851f

08001e1c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e2e:	2b84      	cmp	r3, #132	; 0x84
 8001e30:	d005      	beq.n	8001e3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	3303      	adds	r3, #3
 8001e3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e50:	f3ef 8305 	mrs	r3, IPSR
 8001e54:	607b      	str	r3, [r7, #4]
  return(result);
 8001e56:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e70:	f001 f904 	bl	800307c <vTaskStartScheduler>
  
  return osOK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7c:	b089      	sub	sp, #36	; 0x24
 8001e7e:	af04      	add	r7, sp, #16
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d020      	beq.n	8001ece <osThreadCreate+0x54>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01c      	beq.n	8001ece <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685c      	ldr	r4, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681d      	ldr	r5, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691e      	ldr	r6, [r3, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ffb8 	bl	8001e1c <makeFreeRtosPriority>
 8001eac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eb6:	9202      	str	r2, [sp, #8]
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	4632      	mov	r2, r6
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f000 ff1b 	bl	8002cfe <xTaskCreateStatic>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e01c      	b.n	8001f08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685c      	ldr	r4, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eda:	b29e      	uxth	r6, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff9a 	bl	8001e1c <makeFreeRtosPriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f107 030c 	add.w	r3, r7, #12
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	9200      	str	r2, [sp, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	4632      	mov	r2, r6
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f000 ff5c 	bl	8002db6 <xTaskCreate>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d001      	beq.n	8001f08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e000      	b.n	8001f0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f08:	68fb      	ldr	r3, [r7, #12]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <osDelay+0x16>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	e000      	b.n	8001f2a <osDelay+0x18>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f001 f872 	bl	8003014 <vTaskDelay>
  
  return osOK;
 8001f30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af02      	add	r7, sp, #8
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00f      	beq.n	8001f6c <osSemaphoreCreate+0x32>
    if (count == 1) {
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10a      	bne.n	8001f68 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2203      	movs	r2, #3
 8001f58:	9200      	str	r2, [sp, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f000 f9ba 	bl	80022d8 <xQueueGenericCreateStatic>
 8001f64:	4603      	mov	r3, r0
 8001f66:	e016      	b.n	8001f96 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e014      	b.n	8001f96 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d110      	bne.n	8001f94 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001f72:	2203      	movs	r2, #3
 8001f74:	2100      	movs	r1, #0
 8001f76:	2001      	movs	r0, #1
 8001f78:	f000 fa25 	bl	80023c6 <xQueueGenericCreate>
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <osSemaphoreCreate+0x56>
 8001f84:	2300      	movs	r3, #0
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fa78 	bl	8002480 <xQueueGenericSend>
      return sema;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	e000      	b.n	8001f96 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001f94:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	e03a      	b.n	800202e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc2:	d103      	bne.n	8001fcc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	e009      	b.n	8001fe0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <osSemaphoreWait+0x40>
      ticks = 1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001fe0:	f7ff ff33 	bl	8001e4a <inHandlerMode>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d017      	beq.n	800201a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fcdc 	bl	80029b0 <xQueueReceiveFromISR>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d001      	beq.n	8002002 <osSemaphoreWait+0x62>
      return osErrorOS;
 8001ffe:	23ff      	movs	r3, #255	; 0xff
 8002000:	e015      	b.n	800202e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d011      	beq.n	800202c <osSemaphoreWait+0x8c>
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <osSemaphoreWait+0x98>)
 800200a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	e008      	b.n	800202c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800201a:	68f9      	ldr	r1, [r7, #12]
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fbbb 	bl	8002798 <xQueueSemaphoreTake>
 8002022:	4603      	mov	r3, r0
 8002024:	2b01      	cmp	r3, #1
 8002026:	d001      	beq.n	800202c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002028:	23ff      	movs	r3, #255	; 0xff
 800202a:	e000      	b.n	800202e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	e000ed04 	.word	0xe000ed04

0800203c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800204c:	f7ff fefd 	bl	8001e4a <inHandlerMode>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002056:	f107 0308 	add.w	r3, r7, #8
 800205a:	4619      	mov	r1, r3
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fb0d 	bl	800267c <xQueueGiveFromISR>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	d001      	beq.n	800206c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002068:	23ff      	movs	r3, #255	; 0xff
 800206a:	e017      	b.n	800209c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d013      	beq.n	800209a <osSemaphoreRelease+0x5e>
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <osSemaphoreRelease+0x68>)
 8002074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f3bf 8f4f 	dsb	sy
 800207e:	f3bf 8f6f 	isb	sy
 8002082:	e00a      	b.n	800209a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002084:	2300      	movs	r3, #0
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f9f8 	bl	8002480 <xQueueGenericSend>
 8002090:	4603      	mov	r3, r0
 8002092:	2b01      	cmp	r3, #1
 8002094:	d001      	beq.n	800209a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002096:	23ff      	movs	r3, #255	; 0xff
 8002098:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	e000ed04 	.word	0xe000ed04

080020a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f103 0208 	add.w	r2, r3, #8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f103 0208 	add.w	r2, r3, #8
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f103 0208 	add.w	r2, r3, #8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	601a      	str	r2, [r3, #0]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215a:	d103      	bne.n	8002164 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e00c      	b.n	800217e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3308      	adds	r3, #8
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e002      	b.n	8002172 <vListInsert+0x2e>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	429a      	cmp	r2, r3
 800217c:	d2f6      	bcs.n	800216c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6892      	ldr	r2, [r2, #8]
 80021ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6852      	ldr	r2, [r2, #4]
 80021d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d103      	bne.n	80021e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
	...

08002208 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10a      	bne.n	8002232 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800222e:	bf00      	nop
 8002230:	e7fe      	b.n	8002230 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002232:	f001 fe5b 	bl	8003eec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	68f9      	ldr	r1, [r7, #12]
 8002240:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	441a      	add	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	3b01      	subs	r3, #1
 8002264:	68f9      	ldr	r1, [r7, #12]
 8002266:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	441a      	add	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	22ff      	movs	r2, #255	; 0xff
 8002276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d114      	bne.n	80022b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01a      	beq.n	80022c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3310      	adds	r3, #16
 8002294:	4618      	mov	r0, r3
 8002296:	f001 f937 	bl	8003508 <xTaskRemoveFromEventList>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d012      	beq.n	80022c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <xQueueGenericReset+0xcc>)
 80022a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	e009      	b.n	80022c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3310      	adds	r3, #16
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fef6 	bl	80020a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3324      	adds	r3, #36	; 0x24
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fef1 	bl	80020a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022c6:	f001 fe41 	bl	8003f4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	e000ed04 	.word	0xe000ed04

080022d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08e      	sub	sp, #56	; 0x38
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80022ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f0:	f383 8811 	msr	BASEPRI, r3
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	f3bf 8f4f 	dsb	sy
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022fe:	bf00      	nop
 8002300:	e7fe      	b.n	8002300 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
}
 800231a:	bf00      	nop
 800231c:	e7fe      	b.n	800231c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <xQueueGenericCreateStatic+0x52>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <xQueueGenericCreateStatic+0x56>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <xQueueGenericCreateStatic+0x58>
 800232e:	2300      	movs	r3, #0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	623b      	str	r3, [r7, #32]
}
 8002346:	bf00      	nop
 8002348:	e7fe      	b.n	8002348 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <xQueueGenericCreateStatic+0x7e>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <xQueueGenericCreateStatic+0x82>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <xQueueGenericCreateStatic+0x84>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	61fb      	str	r3, [r7, #28]
}
 8002372:	bf00      	nop
 8002374:	e7fe      	b.n	8002374 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002376:	2348      	movs	r3, #72	; 0x48
 8002378:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b48      	cmp	r3, #72	; 0x48
 800237e:	d00a      	beq.n	8002396 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	61bb      	str	r3, [r7, #24]
}
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00d      	beq.n	80023bc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023a8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f843 	bl	8002442 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80023bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80023be:	4618      	mov	r0, r3
 80023c0:	3730      	adds	r7, #48	; 0x30
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b08a      	sub	sp, #40	; 0x28
 80023ca:	af02      	add	r7, sp, #8
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	4613      	mov	r3, r2
 80023d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10a      	bne.n	80023f0 <xQueueGenericCreate+0x2a>
	__asm volatile
 80023da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023de:	f383 8811 	msr	BASEPRI, r3
 80023e2:	f3bf 8f6f 	isb	sy
 80023e6:	f3bf 8f4f 	dsb	sy
 80023ea:	613b      	str	r3, [r7, #16]
}
 80023ec:	bf00      	nop
 80023ee:	e7fe      	b.n	80023ee <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e004      	b.n	8002406 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3348      	adds	r3, #72	; 0x48
 800240a:	4618      	mov	r0, r3
 800240c:	f001 fe6e 	bl	80040ec <pvPortMalloc>
 8002410:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00f      	beq.n	8002438 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	3348      	adds	r3, #72	; 0x48
 800241c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002426:	79fa      	ldrb	r2, [r7, #7]
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	4613      	mov	r3, r2
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f805 	bl	8002442 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002438:	69bb      	ldr	r3, [r7, #24]
	}
 800243a:	4618      	mov	r0, r3
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	e002      	b.n	8002464 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002470:	2101      	movs	r1, #1
 8002472:	69b8      	ldr	r0, [r7, #24]
 8002474:	f7ff fec8 	bl	8002208 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08e      	sub	sp, #56	; 0x38
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800248e:	2300      	movs	r3, #0
 8002490:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <xQueueGenericSend+0x32>
	__asm volatile
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024ae:	bf00      	nop
 80024b0:	e7fe      	b.n	80024b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d103      	bne.n	80024c0 <xQueueGenericSend+0x40>
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <xQueueGenericSend+0x44>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <xQueueGenericSend+0x46>
 80024c4:	2300      	movs	r3, #0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10a      	bne.n	80024e0 <xQueueGenericSend+0x60>
	__asm volatile
 80024ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ce:	f383 8811 	msr	BASEPRI, r3
 80024d2:	f3bf 8f6f 	isb	sy
 80024d6:	f3bf 8f4f 	dsb	sy
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024dc:	bf00      	nop
 80024de:	e7fe      	b.n	80024de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d103      	bne.n	80024ee <xQueueGenericSend+0x6e>
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <xQueueGenericSend+0x72>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <xQueueGenericSend+0x74>
 80024f2:	2300      	movs	r3, #0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <xQueueGenericSend+0x8e>
	__asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	623b      	str	r3, [r7, #32]
}
 800250a:	bf00      	nop
 800250c:	e7fe      	b.n	800250c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800250e:	f001 f9bb 	bl	8003888 <xTaskGetSchedulerState>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <xQueueGenericSend+0x9e>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <xQueueGenericSend+0xa2>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <xQueueGenericSend+0xa4>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <xQueueGenericSend+0xbe>
	__asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	61fb      	str	r3, [r7, #28]
}
 800253a:	bf00      	nop
 800253c:	e7fe      	b.n	800253c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800253e:	f001 fcd5 	bl	8003eec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <xQueueGenericSend+0xd4>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d129      	bne.n	80025a8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800255a:	f000 fac0 	bl	8002ade <prvCopyDataToQueue>
 800255e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2b00      	cmp	r3, #0
 8002566:	d010      	beq.n	800258a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	3324      	adds	r3, #36	; 0x24
 800256c:	4618      	mov	r0, r3
 800256e:	f000 ffcb 	bl	8003508 <xTaskRemoveFromEventList>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002578:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <xQueueGenericSend+0x1f8>)
 800257a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	e00a      	b.n	80025a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002590:	4b39      	ldr	r3, [pc, #228]	; (8002678 <xQueueGenericSend+0x1f8>)
 8002592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025a0:	f001 fcd4 	bl	8003f4c <vPortExitCritical>
				return pdPASS;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e063      	b.n	8002670 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025ae:	f001 fccd 	bl	8003f4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e05c      	b.n	8002670 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d106      	bne.n	80025ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 f803 	bl	80035cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025c6:	2301      	movs	r3, #1
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025ca:	f001 fcbf 	bl	8003f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025ce:	f000 fdb5 	bl	800313c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025d2:	f001 fc8b 	bl	8003eec <vPortEnterCritical>
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025dc:	b25b      	sxtb	r3, r3
 80025de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e2:	d103      	bne.n	80025ec <xQueueGenericSend+0x16c>
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025f2:	b25b      	sxtb	r3, r3
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d103      	bne.n	8002602 <xQueueGenericSend+0x182>
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002602:	f001 fca3 	bl	8003f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002606:	1d3a      	adds	r2, r7, #4
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fff2 	bl	80035f8 <xTaskCheckForTimeOut>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d124      	bne.n	8002664 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800261a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800261c:	f000 fb57 	bl	8002cce <prvIsQueueFull>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d018      	beq.n	8002658 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	3310      	adds	r3, #16
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f000 ff46 	bl	80034c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002636:	f000 fae2 	bl	8002bfe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800263a:	f000 fd8d 	bl	8003158 <xTaskResumeAll>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	f47f af7c 	bne.w	800253e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <xQueueGenericSend+0x1f8>)
 8002648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	e772      	b.n	800253e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800265a:	f000 fad0 	bl	8002bfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800265e:	f000 fd7b 	bl	8003158 <xTaskResumeAll>
 8002662:	e76c      	b.n	800253e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002666:	f000 faca 	bl	8002bfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800266a:	f000 fd75 	bl	8003158 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800266e:	2300      	movs	r3, #0
		}
	}
}
 8002670:	4618      	mov	r0, r3
 8002672:	3738      	adds	r7, #56	; 0x38
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	e000ed04 	.word	0xe000ed04

0800267c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08e      	sub	sp, #56	; 0x38
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	623b      	str	r3, [r7, #32]
}
 80026a2:	bf00      	nop
 80026a4:	e7fe      	b.n	80026a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	61fb      	str	r3, [r7, #28]
}
 80026c0:	bf00      	nop
 80026c2:	e7fe      	b.n	80026c2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d103      	bne.n	80026d4 <xQueueGiveFromISR+0x58>
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <xQueueGiveFromISR+0x5c>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <xQueueGiveFromISR+0x5e>
 80026d8:	2300      	movs	r3, #0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	61bb      	str	r3, [r7, #24]
}
 80026f0:	bf00      	nop
 80026f2:	e7fe      	b.n	80026f2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026f4:	f001 fcbc 	bl	8004070 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026f8:	f3ef 8211 	mrs	r2, BASEPRI
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	617a      	str	r2, [r7, #20]
 800270e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002710:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002720:	429a      	cmp	r2, r3
 8002722:	d22b      	bcs.n	800277c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800272a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002736:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273e:	d112      	bne.n	8002766 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	2b00      	cmp	r3, #0
 8002746:	d016      	beq.n	8002776 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	3324      	adds	r3, #36	; 0x24
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fedb 	bl	8003508 <xTaskRemoveFromEventList>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00e      	beq.n	8002776 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e007      	b.n	8002776 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800276a:	3301      	adds	r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	b25a      	sxtb	r2, r3
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002776:	2301      	movs	r3, #1
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
 800277a:	e001      	b.n	8002780 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800277c:	2300      	movs	r3, #0
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800278a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800278e:	4618      	mov	r0, r3
 8002790:	3738      	adds	r7, #56	; 0x38
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08e      	sub	sp, #56	; 0x38
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10a      	bne.n	80027ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 80027b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	623b      	str	r3, [r7, #32]
}
 80027c6:	bf00      	nop
 80027c8:	e7fe      	b.n	80027c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	61fb      	str	r3, [r7, #28]
}
 80027e4:	bf00      	nop
 80027e6:	e7fe      	b.n	80027e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027e8:	f001 f84e 	bl	8003888 <xTaskGetSchedulerState>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <xQueueSemaphoreTake+0x60>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <xQueueSemaphoreTake+0x64>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <xQueueSemaphoreTake+0x66>
 80027fc:	2300      	movs	r3, #0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	61bb      	str	r3, [r7, #24]
}
 8002814:	bf00      	nop
 8002816:	e7fe      	b.n	8002816 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002818:	f001 fb68 	bl	8003eec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d024      	beq.n	8002872 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	1e5a      	subs	r2, r3, #1
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002838:	f001 f9f0 	bl	8003c1c <pvTaskIncrementMutexHeldCount>
 800283c:	4602      	mov	r2, r0
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00f      	beq.n	800286a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	3310      	adds	r3, #16
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fe5a 	bl	8003508 <xTaskRemoveFromEventList>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800285a:	4b54      	ldr	r3, [pc, #336]	; (80029ac <xQueueSemaphoreTake+0x214>)
 800285c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800286a:	f001 fb6f 	bl	8003f4c <vPortExitCritical>
				return pdPASS;
 800286e:	2301      	movs	r3, #1
 8002870:	e097      	b.n	80029a2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d111      	bne.n	800289c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	617b      	str	r3, [r7, #20]
}
 8002890:	bf00      	nop
 8002892:	e7fe      	b.n	8002892 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002894:	f001 fb5a 	bl	8003f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002898:	2300      	movs	r3, #0
 800289a:	e082      	b.n	80029a2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800289c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fe90 	bl	80035cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028b0:	f001 fb4c 	bl	8003f4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028b4:	f000 fc42 	bl	800313c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028b8:	f001 fb18 	bl	8003eec <vPortEnterCritical>
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028c2:	b25b      	sxtb	r3, r3
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d103      	bne.n	80028d2 <xQueueSemaphoreTake+0x13a>
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028de:	d103      	bne.n	80028e8 <xQueueSemaphoreTake+0x150>
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028e8:	f001 fb30 	bl	8003f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028ec:	463a      	mov	r2, r7
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fe7f 	bl	80035f8 <xTaskCheckForTimeOut>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d132      	bne.n	8002966 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002902:	f000 f9ce 	bl	8002ca2 <prvIsQueueEmpty>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d026      	beq.n	800295a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002914:	f001 faea 	bl	8003eec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4618      	mov	r0, r3
 800291e:	f000 ffd1 	bl	80038c4 <xTaskPriorityInherit>
 8002922:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002924:	f001 fb12 	bl	8003f4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292a:	3324      	adds	r3, #36	; 0x24
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f000 fdc5 	bl	80034c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002938:	f000 f961 	bl	8002bfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800293c:	f000 fc0c 	bl	8003158 <xTaskResumeAll>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	f47f af68 	bne.w	8002818 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002948:	4b18      	ldr	r3, [pc, #96]	; (80029ac <xQueueSemaphoreTake+0x214>)
 800294a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	e75e      	b.n	8002818 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800295a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800295c:	f000 f94f 	bl	8002bfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002960:	f000 fbfa 	bl	8003158 <xTaskResumeAll>
 8002964:	e758      	b.n	8002818 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002968:	f000 f949 	bl	8002bfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800296c:	f000 fbf4 	bl	8003158 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002972:	f000 f996 	bl	8002ca2 <prvIsQueueEmpty>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	f43f af4d 	beq.w	8002818 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002984:	f001 fab2 	bl	8003eec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002988:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800298a:	f000 f891 	bl	8002ab0 <prvGetDisinheritPriorityAfterTimeout>
 800298e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002996:	4618      	mov	r0, r3
 8002998:	f001 f8a0 	bl	8003adc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800299c:	f001 fad6 	bl	8003f4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3738      	adds	r7, #56	; 0x38
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000ed04 	.word	0xe000ed04

080029b0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08e      	sub	sp, #56	; 0x38
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	623b      	str	r3, [r7, #32]
}
 80029d8:	bf00      	nop
 80029da:	e7fe      	b.n	80029da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <xQueueReceiveFromISR+0x3a>
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <xQueueReceiveFromISR+0x3e>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <xQueueReceiveFromISR+0x40>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	61fb      	str	r3, [r7, #28]
}
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a0a:	f001 fb31 	bl	8004070 <vPortValidateInterruptPriority>
	__asm volatile
 8002a0e:	f3ef 8211 	mrs	r2, BASEPRI
 8002a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	61ba      	str	r2, [r7, #24]
 8002a24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002a26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d02f      	beq.n	8002a96 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a44:	f000 f8b5 	bl	8002bb2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	1e5a      	subs	r2, r3, #1
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002a50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d112      	bne.n	8002a80 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d016      	beq.n	8002a90 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	3310      	adds	r3, #16
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fd4e 	bl	8003508 <xTaskRemoveFromEventList>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00e      	beq.n	8002a90 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00b      	beq.n	8002a90 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e007      	b.n	8002a90 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a84:	3301      	adds	r3, #1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	b25a      	sxtb	r2, r3
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002a90:	2301      	movs	r3, #1
 8002a92:	637b      	str	r3, [r7, #52]	; 0x34
 8002a94:	e001      	b.n	8002a9a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f383 8811 	msr	BASEPRI, r3
}
 8002aa4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3738      	adds	r7, #56	; 0x38
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f1c3 0307 	rsb	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e001      	b.n	8002ad2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
	}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10d      	bne.n	8002b18 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d14d      	bne.n	8002ba0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 ff61 	bl	80039d0 <xTaskPriorityDisinherit>
 8002b0e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	e043      	b.n	8002ba0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d119      	bne.n	8002b52 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6898      	ldr	r0, [r3, #8]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	461a      	mov	r2, r3
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	f001 fcdb 	bl	80044e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	441a      	add	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d32b      	bcc.n	8002ba0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	e026      	b.n	8002ba0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68d8      	ldr	r0, [r3, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	f001 fcc1 	bl	80044e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	425b      	negs	r3, r3
 8002b6c:	441a      	add	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d207      	bcs.n	8002b8e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	425b      	negs	r3, r3
 8002b88:	441a      	add	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d105      	bne.n	8002ba0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ba8:	697b      	ldr	r3, [r7, #20]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d018      	beq.n	8002bf6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	441a      	add	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d303      	bcc.n	8002be6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68d9      	ldr	r1, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6838      	ldr	r0, [r7, #0]
 8002bf2:	f001 fc77 	bl	80044e4 <memcpy>
	}
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c06:	f001 f971 	bl	8003eec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c12:	e011      	b.n	8002c38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d012      	beq.n	8002c42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3324      	adds	r3, #36	; 0x24
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fc71 	bl	8003508 <xTaskRemoveFromEventList>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c2c:	f000 fd46 	bl	80036bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	dce9      	bgt.n	8002c14 <prvUnlockQueue+0x16>
 8002c40:	e000      	b.n	8002c44 <prvUnlockQueue+0x46>
					break;
 8002c42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	22ff      	movs	r2, #255	; 0xff
 8002c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c4c:	f001 f97e 	bl	8003f4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c50:	f001 f94c 	bl	8003eec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c5c:	e011      	b.n	8002c82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d012      	beq.n	8002c8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3310      	adds	r3, #16
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fc4c 	bl	8003508 <xTaskRemoveFromEventList>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c76:	f000 fd21 	bl	80036bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c7a:	7bbb      	ldrb	r3, [r7, #14]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	dce9      	bgt.n	8002c5e <prvUnlockQueue+0x60>
 8002c8a:	e000      	b.n	8002c8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	22ff      	movs	r2, #255	; 0xff
 8002c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c96:	f001 f959 	bl	8003f4c <vPortExitCritical>
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002caa:	f001 f91f 	bl	8003eec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d102      	bne.n	8002cbc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	e001      	b.n	8002cc0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cc0:	f001 f944 	bl	8003f4c <vPortExitCritical>

	return xReturn;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cd6:	f001 f909 	bl	8003eec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d102      	bne.n	8002cec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	e001      	b.n	8002cf0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cf0:	f001 f92c 	bl	8003f4c <vPortExitCritical>

	return xReturn;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b08e      	sub	sp, #56	; 0x38
 8002d02:	af04      	add	r7, sp, #16
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	623b      	str	r3, [r7, #32]
}
 8002d24:	bf00      	nop
 8002d26:	e7fe      	b.n	8002d26 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10a      	bne.n	8002d44 <xTaskCreateStatic+0x46>
	__asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	61fb      	str	r3, [r7, #28]
}
 8002d40:	bf00      	nop
 8002d42:	e7fe      	b.n	8002d42 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d44:	2354      	movs	r3, #84	; 0x54
 8002d46:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b54      	cmp	r3, #84	; 0x54
 8002d4c:	d00a      	beq.n	8002d64 <xTaskCreateStatic+0x66>
	__asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	61bb      	str	r3, [r7, #24]
}
 8002d60:	bf00      	nop
 8002d62:	e7fe      	b.n	8002d62 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01e      	beq.n	8002da8 <xTaskCreateStatic+0xaa>
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01b      	beq.n	8002da8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d82:	2300      	movs	r3, #0
 8002d84:	9303      	str	r3, [sp, #12]
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	9302      	str	r3, [sp, #8]
 8002d8a:	f107 0314 	add.w	r3, r7, #20
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f850 	bl	8002e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002da2:	f000 f8cd 	bl	8002f40 <prvAddNewTaskToReadyList>
 8002da6:	e001      	b.n	8002dac <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002dac:	697b      	ldr	r3, [r7, #20]
	}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3728      	adds	r7, #40	; 0x28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b08c      	sub	sp, #48	; 0x30
 8002dba:	af04      	add	r7, sp, #16
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f001 f98e 	bl	80040ec <pvPortMalloc>
 8002dd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00e      	beq.n	8002df6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002dd8:	2054      	movs	r0, #84	; 0x54
 8002dda:	f001 f987 	bl	80040ec <pvPortMalloc>
 8002dde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
 8002dec:	e005      	b.n	8002dfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dee:	6978      	ldr	r0, [r7, #20]
 8002df0:	f001 fa40 	bl	8004274 <vPortFree>
 8002df4:	e001      	b.n	8002dfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d017      	beq.n	8002e30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e08:	88fa      	ldrh	r2, [r7, #6]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9303      	str	r3, [sp, #12]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	9302      	str	r3, [sp, #8]
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f80e 	bl	8002e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e24:	69f8      	ldr	r0, [r7, #28]
 8002e26:	f000 f88b 	bl	8002f40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e002      	b.n	8002e36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e30:	f04f 33ff 	mov.w	r3, #4294967295
 8002e34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e36:	69bb      	ldr	r3, [r7, #24]
	}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f023 0307 	bic.w	r3, r3, #7
 8002e66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	617b      	str	r3, [r7, #20]
}
 8002e84:	bf00      	nop
 8002e86:	e7fe      	b.n	8002e86 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	e012      	b.n	8002eb4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	4413      	add	r3, r2
 8002e94:	7819      	ldrb	r1, [r3, #0]
 8002e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3334      	adds	r3, #52	; 0x34
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d006      	beq.n	8002ebc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b0f      	cmp	r3, #15
 8002eb8:	d9e9      	bls.n	8002e8e <prvInitialiseNewTask+0x4e>
 8002eba:	e000      	b.n	8002ebe <prvInitialiseNewTask+0x7e>
		{
			break;
 8002ebc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	d901      	bls.n	8002ed0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ecc:	2306      	movs	r3, #6
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	2200      	movs	r2, #0
 8002ee0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff f8fd 	bl	80020e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	3318      	adds	r3, #24
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f8f8 	bl	80020e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	f1c3 0207 	rsb	r2, r3, #7
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	2200      	movs	r2, #0
 8002f10:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	68f9      	ldr	r1, [r7, #12]
 8002f1e:	69b8      	ldr	r0, [r7, #24]
 8002f20:	f000 fef6 	bl	8003d10 <pxPortInitialiseStack>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f36:	bf00      	nop
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f48:	f000 ffd0 	bl	8003eec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <prvAddNewTaskToReadyList+0xb8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3301      	adds	r3, #1
 8002f52:	4a29      	ldr	r2, [pc, #164]	; (8002ff8 <prvAddNewTaskToReadyList+0xb8>)
 8002f54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f56:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <prvAddNewTaskToReadyList+0xbc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f5e:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <prvAddNewTaskToReadyList+0xbc>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f64:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <prvAddNewTaskToReadyList+0xb8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d110      	bne.n	8002f8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f6c:	f000 fbca 	bl	8003704 <prvInitialiseTaskLists>
 8002f70:	e00d      	b.n	8002f8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f72:	4b23      	ldr	r3, [pc, #140]	; (8003000 <prvAddNewTaskToReadyList+0xc0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <prvAddNewTaskToReadyList+0xbc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d802      	bhi.n	8002f8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f88:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <prvAddNewTaskToReadyList+0xbc>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <prvAddNewTaskToReadyList+0xc4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3301      	adds	r3, #1
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <prvAddNewTaskToReadyList+0xc4>)
 8002f96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <prvAddNewTaskToReadyList+0xc8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	4a18      	ldr	r2, [pc, #96]	; (8003008 <prvAddNewTaskToReadyList+0xc8>)
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4a15      	ldr	r2, [pc, #84]	; (800300c <prvAddNewTaskToReadyList+0xcc>)
 8002fb8:	441a      	add	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f7ff f89c 	bl	80020fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fc6:	f000 ffc1 	bl	8003f4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <prvAddNewTaskToReadyList+0xc0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00e      	beq.n	8002ff0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <prvAddNewTaskToReadyList+0xbc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <prvAddNewTaskToReadyList+0xd0>)
 8002fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000424 	.word	0x20000424
 8002ffc:	20000324 	.word	0x20000324
 8003000:	20000430 	.word	0x20000430
 8003004:	20000440 	.word	0x20000440
 8003008:	2000042c 	.word	0x2000042c
 800300c:	20000328 	.word	0x20000328
 8003010:	e000ed04 	.word	0xe000ed04

08003014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d017      	beq.n	8003056 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003026:	4b13      	ldr	r3, [pc, #76]	; (8003074 <vTaskDelay+0x60>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <vTaskDelay+0x30>
	__asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	60bb      	str	r3, [r7, #8]
}
 8003040:	bf00      	nop
 8003042:	e7fe      	b.n	8003042 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003044:	f000 f87a 	bl	800313c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003048:	2100      	movs	r1, #0
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fdfa 	bl	8003c44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003050:	f000 f882 	bl	8003158 <xTaskResumeAll>
 8003054:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <vTaskDelay+0x64>)
 800305e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	2000044c 	.word	0x2000044c
 8003078:	e000ed04 	.word	0xe000ed04

0800307c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08a      	sub	sp, #40	; 0x28
 8003080:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003086:	2300      	movs	r3, #0
 8003088:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800308a:	463a      	mov	r2, r7
 800308c:	1d39      	adds	r1, r7, #4
 800308e:	f107 0308 	add.w	r3, r7, #8
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd f864 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003098:	6839      	ldr	r1, [r7, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	9202      	str	r2, [sp, #8]
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	2300      	movs	r3, #0
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	2300      	movs	r3, #0
 80030a8:	460a      	mov	r2, r1
 80030aa:	491e      	ldr	r1, [pc, #120]	; (8003124 <vTaskStartScheduler+0xa8>)
 80030ac:	481e      	ldr	r0, [pc, #120]	; (8003128 <vTaskStartScheduler+0xac>)
 80030ae:	f7ff fe26 	bl	8002cfe <xTaskCreateStatic>
 80030b2:	4603      	mov	r3, r0
 80030b4:	4a1d      	ldr	r2, [pc, #116]	; (800312c <vTaskStartScheduler+0xb0>)
 80030b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030b8:	4b1c      	ldr	r3, [pc, #112]	; (800312c <vTaskStartScheduler+0xb0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030c0:	2301      	movs	r3, #1
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	e001      	b.n	80030ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d116      	bne.n	80030fe <vTaskStartScheduler+0x82>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	613b      	str	r3, [r7, #16]
}
 80030e2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <vTaskStartScheduler+0xb4>)
 80030e6:	f04f 32ff 	mov.w	r2, #4294967295
 80030ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <vTaskStartScheduler+0xb8>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80030f2:	4b11      	ldr	r3, [pc, #68]	; (8003138 <vTaskStartScheduler+0xbc>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030f8:	f000 fe86 	bl	8003e08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030fc:	e00e      	b.n	800311c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d10a      	bne.n	800311c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	60fb      	str	r3, [r7, #12]
}
 8003118:	bf00      	nop
 800311a:	e7fe      	b.n	800311a <vTaskStartScheduler+0x9e>
}
 800311c:	bf00      	nop
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	080046c0 	.word	0x080046c0
 8003128:	080036d5 	.word	0x080036d5
 800312c:	20000448 	.word	0x20000448
 8003130:	20000444 	.word	0x20000444
 8003134:	20000430 	.word	0x20000430
 8003138:	20000428 	.word	0x20000428

0800313c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <vTaskSuspendAll+0x18>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	4a03      	ldr	r2, [pc, #12]	; (8003154 <vTaskSuspendAll+0x18>)
 8003148:	6013      	str	r3, [r2, #0]
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	2000044c 	.word	0x2000044c

08003158 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003166:	4b41      	ldr	r3, [pc, #260]	; (800326c <xTaskResumeAll+0x114>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10a      	bne.n	8003184 <xTaskResumeAll+0x2c>
	__asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	603b      	str	r3, [r7, #0]
}
 8003180:	bf00      	nop
 8003182:	e7fe      	b.n	8003182 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003184:	f000 feb2 	bl	8003eec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003188:	4b38      	ldr	r3, [pc, #224]	; (800326c <xTaskResumeAll+0x114>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3b01      	subs	r3, #1
 800318e:	4a37      	ldr	r2, [pc, #220]	; (800326c <xTaskResumeAll+0x114>)
 8003190:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003192:	4b36      	ldr	r3, [pc, #216]	; (800326c <xTaskResumeAll+0x114>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d161      	bne.n	800325e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800319a:	4b35      	ldr	r3, [pc, #212]	; (8003270 <xTaskResumeAll+0x118>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d05d      	beq.n	800325e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031a2:	e02e      	b.n	8003202 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80031a4:	4b33      	ldr	r3, [pc, #204]	; (8003274 <xTaskResumeAll+0x11c>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3318      	adds	r3, #24
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe ffff 	bl	80021b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fffa 	bl	80021b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <xTaskResumeAll+0x120>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <xTaskResumeAll+0x120>)
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4a27      	ldr	r2, [pc, #156]	; (800327c <xTaskResumeAll+0x124>)
 80031e0:	441a      	add	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3304      	adds	r3, #4
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f7fe ff88 	bl	80020fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <xTaskResumeAll+0x128>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d302      	bcc.n	8003202 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80031fc:	4b21      	ldr	r3, [pc, #132]	; (8003284 <xTaskResumeAll+0x12c>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003202:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <xTaskResumeAll+0x11c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1cc      	bne.n	80031a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003210:	f000 fb16 	bl	8003840 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003214:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <xTaskResumeAll+0x130>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d010      	beq.n	8003242 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003220:	f000 f836 	bl	8003290 <xTaskIncrementTick>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800322a:	4b16      	ldr	r3, [pc, #88]	; (8003284 <xTaskResumeAll+0x12c>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f1      	bne.n	8003220 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <xTaskResumeAll+0x130>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <xTaskResumeAll+0x12c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800324a:	2301      	movs	r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <xTaskResumeAll+0x134>)
 8003250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800325e:	f000 fe75 	bl	8003f4c <vPortExitCritical>

	return xAlreadyYielded;
 8003262:	68bb      	ldr	r3, [r7, #8]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	2000044c 	.word	0x2000044c
 8003270:	20000424 	.word	0x20000424
 8003274:	200003e4 	.word	0x200003e4
 8003278:	2000042c 	.word	0x2000042c
 800327c:	20000328 	.word	0x20000328
 8003280:	20000324 	.word	0x20000324
 8003284:	20000438 	.word	0x20000438
 8003288:	20000434 	.word	0x20000434
 800328c:	e000ed04 	.word	0xe000ed04

08003290 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800329a:	4b51      	ldr	r3, [pc, #324]	; (80033e0 <xTaskIncrementTick+0x150>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 808d 	bne.w	80033be <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032a4:	4b4f      	ldr	r3, [pc, #316]	; (80033e4 <xTaskIncrementTick+0x154>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032ac:	4a4d      	ldr	r2, [pc, #308]	; (80033e4 <xTaskIncrementTick+0x154>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d120      	bne.n	80032fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80032b8:	4b4b      	ldr	r3, [pc, #300]	; (80033e8 <xTaskIncrementTick+0x158>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	603b      	str	r3, [r7, #0]
}
 80032d4:	bf00      	nop
 80032d6:	e7fe      	b.n	80032d6 <xTaskIncrementTick+0x46>
 80032d8:	4b43      	ldr	r3, [pc, #268]	; (80033e8 <xTaskIncrementTick+0x158>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	4b43      	ldr	r3, [pc, #268]	; (80033ec <xTaskIncrementTick+0x15c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a41      	ldr	r2, [pc, #260]	; (80033e8 <xTaskIncrementTick+0x158>)
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4a41      	ldr	r2, [pc, #260]	; (80033ec <xTaskIncrementTick+0x15c>)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b40      	ldr	r3, [pc, #256]	; (80033f0 <xTaskIncrementTick+0x160>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	4a3f      	ldr	r2, [pc, #252]	; (80033f0 <xTaskIncrementTick+0x160>)
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	f000 faa3 	bl	8003840 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032fa:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <xTaskIncrementTick+0x164>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	429a      	cmp	r2, r3
 8003302:	d34d      	bcc.n	80033a0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003304:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <xTaskIncrementTick+0x158>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <xTaskIncrementTick+0x82>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <xTaskIncrementTick+0x84>
 8003312:	2300      	movs	r3, #0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003318:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <xTaskIncrementTick+0x164>)
 800331a:	f04f 32ff 	mov.w	r2, #4294967295
 800331e:	601a      	str	r2, [r3, #0]
					break;
 8003320:	e03e      	b.n	80033a0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003322:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <xTaskIncrementTick+0x158>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d203      	bcs.n	8003342 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800333a:	4a2e      	ldr	r2, [pc, #184]	; (80033f4 <xTaskIncrementTick+0x164>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6013      	str	r3, [r2, #0]
						break;
 8003340:	e02e      	b.n	80033a0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3304      	adds	r3, #4
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe ff34 	bl	80021b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	3318      	adds	r3, #24
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe ff2b 	bl	80021b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	2201      	movs	r2, #1
 8003364:	409a      	lsls	r2, r3
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <xTaskIncrementTick+0x168>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	4a22      	ldr	r2, [pc, #136]	; (80033f8 <xTaskIncrementTick+0x168>)
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <xTaskIncrementTick+0x16c>)
 800337e:	441a      	add	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	3304      	adds	r3, #4
 8003384:	4619      	mov	r1, r3
 8003386:	4610      	mov	r0, r2
 8003388:	f7fe feb9 	bl	80020fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <xTaskIncrementTick+0x170>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	429a      	cmp	r2, r3
 8003398:	d3b4      	bcc.n	8003304 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800339a:	2301      	movs	r3, #1
 800339c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800339e:	e7b1      	b.n	8003304 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <xTaskIncrementTick+0x170>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a6:	4915      	ldr	r1, [pc, #84]	; (80033fc <xTaskIncrementTick+0x16c>)
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d907      	bls.n	80033c8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80033b8:	2301      	movs	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	e004      	b.n	80033c8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <xTaskIncrementTick+0x174>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3301      	adds	r3, #1
 80033c4:	4a0f      	ldr	r2, [pc, #60]	; (8003404 <xTaskIncrementTick+0x174>)
 80033c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <xTaskIncrementTick+0x178>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80033d0:	2301      	movs	r3, #1
 80033d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80033d4:	697b      	ldr	r3, [r7, #20]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	2000044c 	.word	0x2000044c
 80033e4:	20000428 	.word	0x20000428
 80033e8:	200003dc 	.word	0x200003dc
 80033ec:	200003e0 	.word	0x200003e0
 80033f0:	2000043c 	.word	0x2000043c
 80033f4:	20000444 	.word	0x20000444
 80033f8:	2000042c 	.word	0x2000042c
 80033fc:	20000328 	.word	0x20000328
 8003400:	20000324 	.word	0x20000324
 8003404:	20000434 	.word	0x20000434
 8003408:	20000438 	.word	0x20000438

0800340c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003412:	4b26      	ldr	r3, [pc, #152]	; (80034ac <vTaskSwitchContext+0xa0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800341a:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <vTaskSwitchContext+0xa4>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003420:	e03f      	b.n	80034a2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003422:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <vTaskSwitchContext+0xa4>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003428:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <vTaskSwitchContext+0xa8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003436:	7afb      	ldrb	r3, [r7, #11]
 8003438:	f1c3 031f 	rsb	r3, r3, #31
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	491e      	ldr	r1, [pc, #120]	; (80034b8 <vTaskSwitchContext+0xac>)
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	607b      	str	r3, [r7, #4]
}
 8003464:	bf00      	nop
 8003466:	e7fe      	b.n	8003466 <vTaskSwitchContext+0x5a>
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <vTaskSwitchContext+0xac>)
 8003474:	4413      	add	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	3308      	adds	r3, #8
 800348a:	429a      	cmp	r2, r3
 800348c:	d104      	bne.n	8003498 <vTaskSwitchContext+0x8c>
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	4a07      	ldr	r2, [pc, #28]	; (80034bc <vTaskSwitchContext+0xb0>)
 80034a0:	6013      	str	r3, [r2, #0]
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	2000044c 	.word	0x2000044c
 80034b0:	20000438 	.word	0x20000438
 80034b4:	2000042c 	.word	0x2000042c
 80034b8:	20000328 	.word	0x20000328
 80034bc:	20000324 	.word	0x20000324

080034c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <vTaskPlaceOnEventList+0x44>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3318      	adds	r3, #24
 80034ec:	4619      	mov	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fe fe28 	bl	8002144 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034f4:	2101      	movs	r1, #1
 80034f6:	6838      	ldr	r0, [r7, #0]
 80034f8:	f000 fba4 	bl	8003c44 <prvAddCurrentTaskToDelayedList>
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000324 	.word	0x20000324

08003508 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10a      	bne.n	8003534 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	60fb      	str	r3, [r7, #12]
}
 8003530:	bf00      	nop
 8003532:	e7fe      	b.n	8003532 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	3318      	adds	r3, #24
 8003538:	4618      	mov	r0, r3
 800353a:	f7fe fe3b 	bl	80021b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <xTaskRemoveFromEventList+0xac>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11c      	bne.n	8003580 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	3304      	adds	r3, #4
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fe32 	bl	80021b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	2201      	movs	r2, #1
 8003556:	409a      	lsls	r2, r3
 8003558:	4b17      	ldr	r3, [pc, #92]	; (80035b8 <xTaskRemoveFromEventList+0xb0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	4a16      	ldr	r2, [pc, #88]	; (80035b8 <xTaskRemoveFromEventList+0xb0>)
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4a13      	ldr	r2, [pc, #76]	; (80035bc <xTaskRemoveFromEventList+0xb4>)
 8003570:	441a      	add	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	3304      	adds	r3, #4
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f7fe fdc0 	bl	80020fe <vListInsertEnd>
 800357e:	e005      	b.n	800358c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	3318      	adds	r3, #24
 8003584:	4619      	mov	r1, r3
 8003586:	480e      	ldr	r0, [pc, #56]	; (80035c0 <xTaskRemoveFromEventList+0xb8>)
 8003588:	f7fe fdb9 	bl	80020fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <xTaskRemoveFromEventList+0xbc>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	429a      	cmp	r2, r3
 8003598:	d905      	bls.n	80035a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800359a:	2301      	movs	r3, #1
 800359c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <xTaskRemoveFromEventList+0xc0>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e001      	b.n	80035aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80035aa:	697b      	ldr	r3, [r7, #20]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	2000044c 	.word	0x2000044c
 80035b8:	2000042c 	.word	0x2000042c
 80035bc:	20000328 	.word	0x20000328
 80035c0:	200003e4 	.word	0x200003e4
 80035c4:	20000324 	.word	0x20000324
 80035c8:	20000438 	.word	0x20000438

080035cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <vTaskInternalSetTimeOutState+0x24>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <vTaskInternalSetTimeOutState+0x28>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	605a      	str	r2, [r3, #4]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	2000043c 	.word	0x2000043c
 80035f4:	20000428 	.word	0x20000428

080035f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	613b      	str	r3, [r7, #16]
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	60fb      	str	r3, [r7, #12]
}
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800363a:	f000 fc57 	bl	8003eec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <xTaskCheckForTimeOut+0xbc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d102      	bne.n	800365e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	e023      	b.n	80036a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <xTaskCheckForTimeOut+0xc0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d007      	beq.n	800367a <xTaskCheckForTimeOut+0x82>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	429a      	cmp	r2, r3
 8003672:	d302      	bcc.n	800367a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003674:	2301      	movs	r3, #1
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	e015      	b.n	80036a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	429a      	cmp	r2, r3
 8003682:	d20b      	bcs.n	800369c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	1ad2      	subs	r2, r2, r3
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff9b 	bl	80035cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	e004      	b.n	80036a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036a2:	2301      	movs	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036a6:	f000 fc51 	bl	8003f4c <vPortExitCritical>

	return xReturn;
 80036aa:	69fb      	ldr	r3, [r7, #28]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000428 	.word	0x20000428
 80036b8:	2000043c 	.word	0x2000043c

080036bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <vTaskMissedYield+0x14>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
}
 80036c6:	bf00      	nop
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000438 	.word	0x20000438

080036d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036dc:	f000 f852 	bl	8003784 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <prvIdleTask+0x28>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d9f9      	bls.n	80036dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <prvIdleTask+0x2c>)
 80036ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036f8:	e7f0      	b.n	80036dc <prvIdleTask+0x8>
 80036fa:	bf00      	nop
 80036fc:	20000328 	.word	0x20000328
 8003700:	e000ed04 	.word	0xe000ed04

08003704 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	e00c      	b.n	800372a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4a12      	ldr	r2, [pc, #72]	; (8003764 <prvInitialiseTaskLists+0x60>)
 800371c:	4413      	add	r3, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fcc2 	bl	80020a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3301      	adds	r3, #1
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b06      	cmp	r3, #6
 800372e:	d9ef      	bls.n	8003710 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003730:	480d      	ldr	r0, [pc, #52]	; (8003768 <prvInitialiseTaskLists+0x64>)
 8003732:	f7fe fcb9 	bl	80020a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003736:	480d      	ldr	r0, [pc, #52]	; (800376c <prvInitialiseTaskLists+0x68>)
 8003738:	f7fe fcb6 	bl	80020a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800373c:	480c      	ldr	r0, [pc, #48]	; (8003770 <prvInitialiseTaskLists+0x6c>)
 800373e:	f7fe fcb3 	bl	80020a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003742:	480c      	ldr	r0, [pc, #48]	; (8003774 <prvInitialiseTaskLists+0x70>)
 8003744:	f7fe fcb0 	bl	80020a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003748:	480b      	ldr	r0, [pc, #44]	; (8003778 <prvInitialiseTaskLists+0x74>)
 800374a:	f7fe fcad 	bl	80020a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800374e:	4b0b      	ldr	r3, [pc, #44]	; (800377c <prvInitialiseTaskLists+0x78>)
 8003750:	4a05      	ldr	r2, [pc, #20]	; (8003768 <prvInitialiseTaskLists+0x64>)
 8003752:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <prvInitialiseTaskLists+0x7c>)
 8003756:	4a05      	ldr	r2, [pc, #20]	; (800376c <prvInitialiseTaskLists+0x68>)
 8003758:	601a      	str	r2, [r3, #0]
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000328 	.word	0x20000328
 8003768:	200003b4 	.word	0x200003b4
 800376c:	200003c8 	.word	0x200003c8
 8003770:	200003e4 	.word	0x200003e4
 8003774:	200003f8 	.word	0x200003f8
 8003778:	20000410 	.word	0x20000410
 800377c:	200003dc 	.word	0x200003dc
 8003780:	200003e0 	.word	0x200003e0

08003784 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800378a:	e019      	b.n	80037c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800378c:	f000 fbae 	bl	8003eec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003790:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <prvCheckTasksWaitingTermination+0x50>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe fd09 	bl	80021b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037a2:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <prvCheckTasksWaitingTermination+0x54>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	4a0b      	ldr	r2, [pc, #44]	; (80037d8 <prvCheckTasksWaitingTermination+0x54>)
 80037aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <prvCheckTasksWaitingTermination+0x58>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <prvCheckTasksWaitingTermination+0x58>)
 80037b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037b6:	f000 fbc9 	bl	8003f4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f810 	bl	80037e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <prvCheckTasksWaitingTermination+0x58>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e1      	bne.n	800378c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200003f8 	.word	0x200003f8
 80037d8:	20000424 	.word	0x20000424
 80037dc:	2000040c 	.word	0x2000040c

080037e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d108      	bne.n	8003804 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fd3c 	bl	8004274 <vPortFree>
				vPortFree( pxTCB );
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fd39 	bl	8004274 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003802:	e018      	b.n	8003836 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800380a:	2b01      	cmp	r3, #1
 800380c:	d103      	bne.n	8003816 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fd30 	bl	8004274 <vPortFree>
	}
 8003814:	e00f      	b.n	8003836 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381c:	2b02      	cmp	r3, #2
 800381e:	d00a      	beq.n	8003836 <prvDeleteTCB+0x56>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	60fb      	str	r3, [r7, #12]
}
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <prvDeleteTCB+0x54>
	}
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003846:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <prvResetNextTaskUnblockTime+0x40>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <prvResetNextTaskUnblockTime+0x14>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <prvResetNextTaskUnblockTime+0x16>
 8003854:	2300      	movs	r3, #0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <prvResetNextTaskUnblockTime+0x44>)
 800385c:	f04f 32ff 	mov.w	r2, #4294967295
 8003860:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003862:	e008      	b.n	8003876 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <prvResetNextTaskUnblockTime+0x40>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4a04      	ldr	r2, [pc, #16]	; (8003884 <prvResetNextTaskUnblockTime+0x44>)
 8003874:	6013      	str	r3, [r2, #0]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	200003dc 	.word	0x200003dc
 8003884:	20000444 	.word	0x20000444

08003888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <xTaskGetSchedulerState+0x34>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003896:	2301      	movs	r3, #1
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	e008      	b.n	80038ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <xTaskGetSchedulerState+0x38>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038a4:	2302      	movs	r3, #2
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	e001      	b.n	80038ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038ae:	687b      	ldr	r3, [r7, #4]
	}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000430 	.word	0x20000430
 80038c0:	2000044c 	.word	0x2000044c

080038c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d06e      	beq.n	80039b8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038de:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <xTaskPriorityInherit+0x100>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d25e      	bcs.n	80039a6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	db06      	blt.n	80038fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f0:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <xTaskPriorityInherit+0x100>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	f1c3 0207 	rsb	r2, r3, #7
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6959      	ldr	r1, [r3, #20]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4a2e      	ldr	r2, [pc, #184]	; (80039c8 <xTaskPriorityInherit+0x104>)
 8003910:	4413      	add	r3, r2
 8003912:	4299      	cmp	r1, r3
 8003914:	d101      	bne.n	800391a <xTaskPriorityInherit+0x56>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <xTaskPriorityInherit+0x58>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d03a      	beq.n	8003996 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	3304      	adds	r3, #4
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fc45 	bl	80021b4 <uxListRemove>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d115      	bne.n	800395c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	4924      	ldr	r1, [pc, #144]	; (80039c8 <xTaskPriorityInherit+0x104>)
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <xTaskPriorityInherit+0x98>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	2201      	movs	r2, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43da      	mvns	r2, r3
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <xTaskPriorityInherit+0x108>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4013      	ands	r3, r2
 8003958:	4a1c      	ldr	r2, [pc, #112]	; (80039cc <xTaskPriorityInherit+0x108>)
 800395a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <xTaskPriorityInherit+0x100>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	2201      	movs	r2, #1
 800396c:	409a      	lsls	r2, r3
 800396e:	4b17      	ldr	r3, [pc, #92]	; (80039cc <xTaskPriorityInherit+0x108>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	4a15      	ldr	r2, [pc, #84]	; (80039cc <xTaskPriorityInherit+0x108>)
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4a10      	ldr	r2, [pc, #64]	; (80039c8 <xTaskPriorityInherit+0x104>)
 8003986:	441a      	add	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f7fe fbb5 	bl	80020fe <vListInsertEnd>
 8003994:	e004      	b.n	80039a0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <xTaskPriorityInherit+0x100>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80039a0:	2301      	movs	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e008      	b.n	80039b8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <xTaskPriorityInherit+0x100>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d201      	bcs.n	80039b8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80039b4:	2301      	movs	r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039b8:	68fb      	ldr	r3, [r7, #12]
	}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000324 	.word	0x20000324
 80039c8:	20000328 	.word	0x20000328
 80039cc:	2000042c 	.word	0x2000042c

080039d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d06e      	beq.n	8003ac4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039e6:	4b3a      	ldr	r3, [pc, #232]	; (8003ad0 <xTaskPriorityDisinherit+0x100>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d00a      	beq.n	8003a06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	60fb      	str	r3, [r7, #12]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	60bb      	str	r3, [r7, #8]
}
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	1e5a      	subs	r2, r3, #1
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d044      	beq.n	8003ac4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d140      	bne.n	8003ac4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe fbb4 	bl	80021b4 <uxListRemove>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d115      	bne.n	8003a7e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a56:	491f      	ldr	r1, [pc, #124]	; (8003ad4 <xTaskPriorityDisinherit+0x104>)
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <xTaskPriorityDisinherit+0xae>
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43da      	mvns	r2, r3
 8003a74:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <xTaskPriorityDisinherit+0x108>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <xTaskPriorityDisinherit+0x108>)
 8003a7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	f1c3 0207 	rsb	r2, r3, #7
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	2201      	movs	r2, #1
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <xTaskPriorityDisinherit+0x108>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	4a0d      	ldr	r2, [pc, #52]	; (8003ad8 <xTaskPriorityDisinherit+0x108>)
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <xTaskPriorityDisinherit+0x104>)
 8003ab2:	441a      	add	r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4610      	mov	r0, r2
 8003abc:	f7fe fb1f 	bl	80020fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ac4:	697b      	ldr	r3, [r7, #20]
	}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000324 	.word	0x20000324
 8003ad4:	20000328 	.word	0x20000328
 8003ad8:	2000042c 	.word	0x2000042c

08003adc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003aea:	2301      	movs	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8088 	beq.w	8003c06 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	60fb      	str	r3, [r7, #12]
}
 8003b10:	bf00      	nop
 8003b12:	e7fe      	b.n	8003b12 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d902      	bls.n	8003b24 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	e002      	b.n	8003b2a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d068      	beq.n	8003c06 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d163      	bne.n	8003c06 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003b3e:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d10a      	bne.n	8003b5e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	60bb      	str	r3, [r7, #8]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	db04      	blt.n	8003b7c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f1c3 0207 	rsb	r2, r3, #7
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	6959      	ldr	r1, [r3, #20]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4299      	cmp	r1, r3
 8003b90:	d101      	bne.n	8003b96 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8003b96:	2300      	movs	r3, #0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d034      	beq.n	8003c06 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe fb07 	bl	80021b4 <uxListRemove>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d115      	bne.n	8003bd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	4918      	ldr	r1, [pc, #96]	; (8003c14 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43da      	mvns	r2, r3
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003bd6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	2201      	movs	r2, #1
 8003bde:	409a      	lsls	r2, r3
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4a07      	ldr	r2, [pc, #28]	; (8003c14 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003bf8:	441a      	add	r2, r3
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f7fe fa7c 	bl	80020fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c06:	bf00      	nop
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000324 	.word	0x20000324
 8003c14:	20000328 	.word	0x20000328
 8003c18:	2000042c 	.word	0x2000042c

08003c1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d004      	beq.n	8003c32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c2e:	3201      	adds	r2, #1
 8003c30:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003c32:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c34:	681b      	ldr	r3, [r3, #0]
	}
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000324 	.word	0x20000324

08003c44 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c54:	4b28      	ldr	r3, [pc, #160]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe faaa 	bl	80021b4 <uxListRemove>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10b      	bne.n	8003c7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43da      	mvns	r2, r3
 8003c74:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	4a20      	ldr	r2, [pc, #128]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d10a      	bne.n	8003c9c <prvAddCurrentTaskToDelayedList+0x58>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3304      	adds	r3, #4
 8003c92:	4619      	mov	r1, r3
 8003c94:	481a      	ldr	r0, [pc, #104]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c96:	f7fe fa32 	bl	80020fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c9a:	e026      	b.n	8003cea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ca4:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d209      	bcs.n	8003cc8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cb4:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7fe fa3f 	bl	8002144 <vListInsert>
}
 8003cc6:	e010      	b.n	8003cea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f7fe fa35 	bl	8002144 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d202      	bcs.n	8003cea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ce4:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6013      	str	r3, [r2, #0]
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000428 	.word	0x20000428
 8003cf8:	20000324 	.word	0x20000324
 8003cfc:	2000042c 	.word	0x2000042c
 8003d00:	20000410 	.word	0x20000410
 8003d04:	200003e0 	.word	0x200003e0
 8003d08:	200003dc 	.word	0x200003dc
 8003d0c:	20000444 	.word	0x20000444

08003d10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3b04      	subs	r3, #4
 8003d20:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3b04      	subs	r3, #4
 8003d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f023 0201 	bic.w	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b04      	subs	r3, #4
 8003d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d40:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <pxPortInitialiseStack+0x54>)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3b14      	subs	r3, #20
 8003d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3b20      	subs	r3, #32
 8003d56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d58:	68fb      	ldr	r3, [r7, #12]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr
 8003d64:	08003d69 	.word	0x08003d69

08003d68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <prvTaskExitError+0x54>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7a:	d00a      	beq.n	8003d92 <prvTaskExitError+0x2a>
	__asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	60fb      	str	r3, [r7, #12]
}
 8003d8e:	bf00      	nop
 8003d90:	e7fe      	b.n	8003d90 <prvTaskExitError+0x28>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	60bb      	str	r3, [r7, #8]
}
 8003da4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003da6:	bf00      	nop
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0fc      	beq.n	8003da8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003dae:	bf00      	nop
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	2000000c 	.word	0x2000000c

08003dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003dc0:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <pxCurrentTCBConst2>)
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	6808      	ldr	r0, [r1, #0]
 8003dc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003dca:	f380 8809 	msr	PSP, r0
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f380 8811 	msr	BASEPRI, r0
 8003dda:	f04e 0e0d 	orr.w	lr, lr, #13
 8003dde:	4770      	bx	lr

08003de0 <pxCurrentTCBConst2>:
 8003de0:	20000324 	.word	0x20000324
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop

08003de8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003de8:	4806      	ldr	r0, [pc, #24]	; (8003e04 <prvPortStartFirstTask+0x1c>)
 8003dea:	6800      	ldr	r0, [r0, #0]
 8003dec:	6800      	ldr	r0, [r0, #0]
 8003dee:	f380 8808 	msr	MSP, r0
 8003df2:	b662      	cpsie	i
 8003df4:	b661      	cpsie	f
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	df00      	svc	0
 8003e00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e02:	bf00      	nop
 8003e04:	e000ed08 	.word	0xe000ed08

08003e08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e0e:	4b32      	ldr	r3, [pc, #200]	; (8003ed8 <xPortStartScheduler+0xd0>)
 8003e10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	22ff      	movs	r2, #255	; 0xff
 8003e1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <xPortStartScheduler+0xd4>)
 8003e34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e36:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <xPortStartScheduler+0xd8>)
 8003e38:	2207      	movs	r2, #7
 8003e3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e3c:	e009      	b.n	8003e52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003e3e:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <xPortStartScheduler+0xd8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	4a26      	ldr	r2, [pc, #152]	; (8003ee0 <xPortStartScheduler+0xd8>)
 8003e46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5a:	2b80      	cmp	r3, #128	; 0x80
 8003e5c:	d0ef      	beq.n	8003e3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e5e:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <xPortStartScheduler+0xd8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1c3 0307 	rsb	r3, r3, #7
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d00a      	beq.n	8003e80 <xPortStartScheduler+0x78>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	60bb      	str	r3, [r7, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	e7fe      	b.n	8003e7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e80:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <xPortStartScheduler+0xd8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <xPortStartScheduler+0xd8>)
 8003e88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <xPortStartScheduler+0xd8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e92:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <xPortStartScheduler+0xd8>)
 8003e94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e9e:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <xPortStartScheduler+0xdc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a10      	ldr	r2, [pc, #64]	; (8003ee4 <xPortStartScheduler+0xdc>)
 8003ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ea8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <xPortStartScheduler+0xdc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a0d      	ldr	r2, [pc, #52]	; (8003ee4 <xPortStartScheduler+0xdc>)
 8003eb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003eb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003eb6:	f000 f8b9 	bl	800402c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <xPortStartScheduler+0xe0>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ec0:	f7ff ff92 	bl	8003de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ec4:	f7ff faa2 	bl	800340c <vTaskSwitchContext>
	prvTaskExitError();
 8003ec8:	f7ff ff4e 	bl	8003d68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	e000e400 	.word	0xe000e400
 8003edc:	20000450 	.word	0x20000450
 8003ee0:	20000454 	.word	0x20000454
 8003ee4:	e000ed20 	.word	0xe000ed20
 8003ee8:	2000000c 	.word	0x2000000c

08003eec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	607b      	str	r3, [r7, #4]
}
 8003f04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <vPortEnterCritical+0x58>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	4a0d      	ldr	r2, [pc, #52]	; (8003f44 <vPortEnterCritical+0x58>)
 8003f0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <vPortEnterCritical+0x58>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d10f      	bne.n	8003f38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <vPortEnterCritical+0x5c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	603b      	str	r3, [r7, #0]
}
 8003f34:	bf00      	nop
 8003f36:	e7fe      	b.n	8003f36 <vPortEnterCritical+0x4a>
	}
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	2000000c 	.word	0x2000000c
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f52:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <vPortExitCritical+0x4c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <vPortExitCritical+0x24>
	__asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	607b      	str	r3, [r7, #4]
}
 8003f6c:	bf00      	nop
 8003f6e:	e7fe      	b.n	8003f6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <vPortExitCritical+0x4c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <vPortExitCritical+0x4c>)
 8003f78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f7a:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <vPortExitCritical+0x4c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d105      	bne.n	8003f8e <vPortExitCritical+0x42>
 8003f82:	2300      	movs	r3, #0
 8003f84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f383 8811 	msr	BASEPRI, r3
}
 8003f8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr
 8003f98:	2000000c 	.word	0x2000000c
 8003f9c:	00000000 	.word	0x00000000

08003fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003fa0:	f3ef 8009 	mrs	r0, PSP
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <pxCurrentTCBConst>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fb0:	6010      	str	r0, [r2, #0]
 8003fb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003fb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003fba:	f380 8811 	msr	BASEPRI, r0
 8003fbe:	f7ff fa25 	bl	800340c <vTaskSwitchContext>
 8003fc2:	f04f 0000 	mov.w	r0, #0
 8003fc6:	f380 8811 	msr	BASEPRI, r0
 8003fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003fce:	6819      	ldr	r1, [r3, #0]
 8003fd0:	6808      	ldr	r0, [r1, #0]
 8003fd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fd6:	f380 8809 	msr	PSP, r0
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	4770      	bx	lr

08003fe0 <pxCurrentTCBConst>:
 8003fe0:	20000324 	.word	0x20000324
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop

08003fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
	__asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	607b      	str	r3, [r7, #4]
}
 8004000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004002:	f7ff f945 	bl	8003290 <xTaskIncrementTick>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <SysTick_Handler+0x40>)
 800400e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	2300      	movs	r3, #0
 8004016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	f383 8811 	msr	BASEPRI, r3
}
 800401e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <vPortSetupTimerInterrupt+0x30>)
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <vPortSetupTimerInterrupt+0x34>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <vPortSetupTimerInterrupt+0x38>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a09      	ldr	r2, [pc, #36]	; (8004068 <vPortSetupTimerInterrupt+0x3c>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	4a08      	ldr	r2, [pc, #32]	; (800406c <vPortSetupTimerInterrupt+0x40>)
 800404a:	3b01      	subs	r3, #1
 800404c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800404e:	4b03      	ldr	r3, [pc, #12]	; (800405c <vPortSetupTimerInterrupt+0x30>)
 8004050:	2207      	movs	r2, #7
 8004052:	601a      	str	r2, [r3, #0]
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	e000e010 	.word	0xe000e010
 8004060:	e000e018 	.word	0xe000e018
 8004064:	20000000 	.word	0x20000000
 8004068:	10624dd3 	.word	0x10624dd3
 800406c:	e000e014 	.word	0xe000e014

08004070 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004076:	f3ef 8305 	mrs	r3, IPSR
 800407a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b0f      	cmp	r3, #15
 8004080:	d914      	bls.n	80040ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004082:	4a16      	ldr	r2, [pc, #88]	; (80040dc <vPortValidateInterruptPriority+0x6c>)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800408c:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <vPortValidateInterruptPriority+0x70>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	7afa      	ldrb	r2, [r7, #11]
 8004092:	429a      	cmp	r2, r3
 8004094:	d20a      	bcs.n	80040ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	607b      	str	r3, [r7, #4]
}
 80040a8:	bf00      	nop
 80040aa:	e7fe      	b.n	80040aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <vPortValidateInterruptPriority+0x74>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <vPortValidateInterruptPriority+0x78>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d90a      	bls.n	80040d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	603b      	str	r3, [r7, #0]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <vPortValidateInterruptPriority+0x60>
	}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	e000e3f0 	.word	0xe000e3f0
 80040e0:	20000450 	.word	0x20000450
 80040e4:	e000ed0c 	.word	0xe000ed0c
 80040e8:	20000454 	.word	0x20000454

080040ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040f8:	f7ff f820 	bl	800313c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040fc:	4b58      	ldr	r3, [pc, #352]	; (8004260 <pvPortMalloc+0x174>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004104:	f000 f910 	bl	8004328 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004108:	4b56      	ldr	r3, [pc, #344]	; (8004264 <pvPortMalloc+0x178>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	f040 808e 	bne.w	8004232 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01d      	beq.n	8004158 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800411c:	2208      	movs	r2, #8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4413      	add	r3, r2
 8004122:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	2b00      	cmp	r3, #0
 800412c:	d014      	beq.n	8004158 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f023 0307 	bic.w	r3, r3, #7
 8004134:	3308      	adds	r3, #8
 8004136:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <pvPortMalloc+0x6c>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	617b      	str	r3, [r7, #20]
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d069      	beq.n	8004232 <pvPortMalloc+0x146>
 800415e:	4b42      	ldr	r3, [pc, #264]	; (8004268 <pvPortMalloc+0x17c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	429a      	cmp	r2, r3
 8004166:	d864      	bhi.n	8004232 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004168:	4b40      	ldr	r3, [pc, #256]	; (800426c <pvPortMalloc+0x180>)
 800416a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800416c:	4b3f      	ldr	r3, [pc, #252]	; (800426c <pvPortMalloc+0x180>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004172:	e004      	b.n	800417e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	429a      	cmp	r2, r3
 8004186:	d903      	bls.n	8004190 <pvPortMalloc+0xa4>
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f1      	bne.n	8004174 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004190:	4b33      	ldr	r3, [pc, #204]	; (8004260 <pvPortMalloc+0x174>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004196:	429a      	cmp	r2, r3
 8004198:	d04b      	beq.n	8004232 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2208      	movs	r2, #8
 80041a0:	4413      	add	r3, r2
 80041a2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1ad2      	subs	r2, r2, r3
 80041b4:	2308      	movs	r3, #8
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d91f      	bls.n	80041fc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4413      	add	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <pvPortMalloc+0xf8>
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	613b      	str	r3, [r7, #16]
}
 80041e0:	bf00      	nop
 80041e2:	e7fe      	b.n	80041e2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	1ad2      	subs	r2, r2, r3
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041f6:	69b8      	ldr	r0, [r7, #24]
 80041f8:	f000 f8f8 	bl	80043ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041fc:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <pvPortMalloc+0x17c>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	4a18      	ldr	r2, [pc, #96]	; (8004268 <pvPortMalloc+0x17c>)
 8004208:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800420a:	4b17      	ldr	r3, [pc, #92]	; (8004268 <pvPortMalloc+0x17c>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4b18      	ldr	r3, [pc, #96]	; (8004270 <pvPortMalloc+0x184>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d203      	bcs.n	800421e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004216:	4b14      	ldr	r3, [pc, #80]	; (8004268 <pvPortMalloc+0x17c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a15      	ldr	r2, [pc, #84]	; (8004270 <pvPortMalloc+0x184>)
 800421c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <pvPortMalloc+0x178>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	431a      	orrs	r2, r3
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004232:	f7fe ff91 	bl	8003158 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <pvPortMalloc+0x16a>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	60fb      	str	r3, [r7, #12]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <pvPortMalloc+0x168>
	return pvReturn;
 8004256:	69fb      	ldr	r3, [r7, #28]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3728      	adds	r7, #40	; 0x28
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20001060 	.word	0x20001060
 8004264:	2000106c 	.word	0x2000106c
 8004268:	20001064 	.word	0x20001064
 800426c:	20001058 	.word	0x20001058
 8004270:	20001068 	.word	0x20001068

08004274 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d048      	beq.n	8004318 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004286:	2308      	movs	r3, #8
 8004288:	425b      	negs	r3, r3
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4413      	add	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	4b21      	ldr	r3, [pc, #132]	; (8004320 <vPortFree+0xac>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4013      	ands	r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10a      	bne.n	80042b8 <vPortFree+0x44>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	60fb      	str	r3, [r7, #12]
}
 80042b4:	bf00      	nop
 80042b6:	e7fe      	b.n	80042b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <vPortFree+0x62>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	60bb      	str	r3, [r7, #8]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	4b11      	ldr	r3, [pc, #68]	; (8004320 <vPortFree+0xac>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d019      	beq.n	8004318 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d115      	bne.n	8004318 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <vPortFree+0xac>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	401a      	ands	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042fc:	f7fe ff1e 	bl	800313c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	4b07      	ldr	r3, [pc, #28]	; (8004324 <vPortFree+0xb0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4413      	add	r3, r2
 800430a:	4a06      	ldr	r2, [pc, #24]	; (8004324 <vPortFree+0xb0>)
 800430c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800430e:	6938      	ldr	r0, [r7, #16]
 8004310:	f000 f86c 	bl	80043ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004314:	f7fe ff20 	bl	8003158 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004318:	bf00      	nop
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	2000106c 	.word	0x2000106c
 8004324:	20001064 	.word	0x20001064

08004328 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800432e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004332:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004334:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <prvHeapInit+0xac>)
 8004336:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00c      	beq.n	800435c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	3307      	adds	r3, #7
 8004346:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0307 	bic.w	r3, r3, #7
 800434e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <prvHeapInit+0xac>)
 8004358:	4413      	add	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004360:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <prvHeapInit+0xb0>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004366:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <prvHeapInit+0xb0>)
 8004368:	2200      	movs	r2, #0
 800436a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	4413      	add	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004374:	2208      	movs	r2, #8
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0307 	bic.w	r3, r3, #7
 8004382:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a15      	ldr	r2, [pc, #84]	; (80043dc <prvHeapInit+0xb4>)
 8004388:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800438a:	4b14      	ldr	r3, [pc, #80]	; (80043dc <prvHeapInit+0xb4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2200      	movs	r2, #0
 8004390:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <prvHeapInit+0xb4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	1ad2      	subs	r2, r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <prvHeapInit+0xb4>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <prvHeapInit+0xb8>)
 80043b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <prvHeapInit+0xbc>)
 80043be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <prvHeapInit+0xc0>)
 80043c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043c6:	601a      	str	r2, [r3, #0]
}
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000458 	.word	0x20000458
 80043d8:	20001058 	.word	0x20001058
 80043dc:	20001060 	.word	0x20001060
 80043e0:	20001068 	.word	0x20001068
 80043e4:	20001064 	.word	0x20001064
 80043e8:	2000106c 	.word	0x2000106c

080043ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043f4:	4b27      	ldr	r3, [pc, #156]	; (8004494 <prvInsertBlockIntoFreeList+0xa8>)
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e002      	b.n	8004400 <prvInsertBlockIntoFreeList+0x14>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	429a      	cmp	r2, r3
 8004408:	d8f7      	bhi.n	80043fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4413      	add	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d108      	bne.n	800442e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	441a      	add	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	441a      	add	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d118      	bne.n	8004474 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <prvInsertBlockIntoFreeList+0xac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d00d      	beq.n	800446a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e008      	b.n	800447c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <prvInsertBlockIntoFreeList+0xac>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	e003      	b.n	800447c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d002      	beq.n	800448a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr
 8004494:	20001058 	.word	0x20001058
 8004498:	20001060 	.word	0x20001060

0800449c <__libc_init_array>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	2600      	movs	r6, #0
 80044a0:	4d0c      	ldr	r5, [pc, #48]	; (80044d4 <__libc_init_array+0x38>)
 80044a2:	4c0d      	ldr	r4, [pc, #52]	; (80044d8 <__libc_init_array+0x3c>)
 80044a4:	1b64      	subs	r4, r4, r5
 80044a6:	10a4      	asrs	r4, r4, #2
 80044a8:	42a6      	cmp	r6, r4
 80044aa:	d109      	bne.n	80044c0 <__libc_init_array+0x24>
 80044ac:	f000 f830 	bl	8004510 <_init>
 80044b0:	2600      	movs	r6, #0
 80044b2:	4d0a      	ldr	r5, [pc, #40]	; (80044dc <__libc_init_array+0x40>)
 80044b4:	4c0a      	ldr	r4, [pc, #40]	; (80044e0 <__libc_init_array+0x44>)
 80044b6:	1b64      	subs	r4, r4, r5
 80044b8:	10a4      	asrs	r4, r4, #2
 80044ba:	42a6      	cmp	r6, r4
 80044bc:	d105      	bne.n	80044ca <__libc_init_array+0x2e>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c4:	4798      	blx	r3
 80044c6:	3601      	adds	r6, #1
 80044c8:	e7ee      	b.n	80044a8 <__libc_init_array+0xc>
 80044ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ce:	4798      	blx	r3
 80044d0:	3601      	adds	r6, #1
 80044d2:	e7f2      	b.n	80044ba <__libc_init_array+0x1e>
 80044d4:	080046f4 	.word	0x080046f4
 80044d8:	080046f4 	.word	0x080046f4
 80044dc:	080046f4 	.word	0x080046f4
 80044e0:	080046f8 	.word	0x080046f8

080044e4 <memcpy>:
 80044e4:	440a      	add	r2, r1
 80044e6:	4291      	cmp	r1, r2
 80044e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80044ec:	d100      	bne.n	80044f0 <memcpy+0xc>
 80044ee:	4770      	bx	lr
 80044f0:	b510      	push	{r4, lr}
 80044f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044f6:	4291      	cmp	r1, r2
 80044f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044fc:	d1f9      	bne.n	80044f2 <memcpy+0xe>
 80044fe:	bd10      	pop	{r4, pc}

08004500 <memset>:
 8004500:	4603      	mov	r3, r0
 8004502:	4402      	add	r2, r0
 8004504:	4293      	cmp	r3, r2
 8004506:	d100      	bne.n	800450a <memset+0xa>
 8004508:	4770      	bx	lr
 800450a:	f803 1b01 	strb.w	r1, [r3], #1
 800450e:	e7f9      	b.n	8004504 <memset+0x4>

08004510 <_init>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr

0800451c <_fini>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	bf00      	nop
 8004520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004522:	bc08      	pop	{r3}
 8004524:	469e      	mov	lr, r3
 8004526:	4770      	bx	lr
