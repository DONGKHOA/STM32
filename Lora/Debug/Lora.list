
Lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080023b4  080023b4  000123b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023ec  080023ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080023ec  080023ec  000123ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023f4  080023f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023f4  080023f4  000123f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023f8  080023f8  000123f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000010  08002408  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002408  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000059fa  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016a5  00000000  00000000  00025a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000668  00000000  00000000  00027118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004b9  00000000  00000000  00027780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001646c  00000000  00000000  00027c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000778d  00000000  00000000  0003e0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e6d0  00000000  00000000  00045832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001880  00000000  00000000  000c3f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c5784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800239c 	.word	0x0800239c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800239c 	.word	0x0800239c

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b972 	b.w	800044c <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14c      	bne.n	800022a <__udivmoddi4+0xaa>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d967      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000196:	fab2 f382 	clz	r3, r2
 800019a:	b153      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa02 fc03 	lsl.w	ip, r2, r3
 80001a0:	f1c3 0220 	rsb	r2, r3, #32
 80001a4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001a8:	fa20 f202 	lsr.w	r2, r0, r2
 80001ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b6:	fbbe f1f7 	udiv	r1, lr, r7
 80001ba:	fa1f f58c 	uxth.w	r5, ip
 80001be:	fb07 ee11 	mls	lr, r7, r1, lr
 80001c2:	fb01 f005 	mul.w	r0, r1, r5
 80001c6:	0c22      	lsrs	r2, r4, #16
 80001c8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0202 	adds.w	r2, ip, r2
 80001d4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001d8:	f080 8119 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001dc:	4290      	cmp	r0, r2
 80001de:	f240 8116 	bls.w	800040e <__udivmoddi4+0x28e>
 80001e2:	3902      	subs	r1, #2
 80001e4:	4462      	add	r2, ip
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80001ec:	fb07 2210 	mls	r2, r7, r0, r2
 80001f0:	fb00 f505 	mul.w	r5, r0, r5
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a5      	cmp	r5, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 32ff 	add.w	r2, r0, #4294967295
 8000206:	f080 8104 	bcs.w	8000412 <__udivmoddi4+0x292>
 800020a:	42a5      	cmp	r5, r4
 800020c:	f240 8101 	bls.w	8000412 <__udivmoddi4+0x292>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000218:	2100      	movs	r1, #0
 800021a:	1b64      	subs	r4, r4, r5
 800021c:	b11e      	cbz	r6, 8000226 <__udivmoddi4+0xa6>
 800021e:	40dc      	lsrs	r4, r3
 8000220:	2300      	movs	r3, #0
 8000222:	e9c6 4300 	strd	r4, r3, [r6]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d908      	bls.n	8000240 <__udivmoddi4+0xc0>
 800022e:	2e00      	cmp	r6, #0
 8000230:	f000 80ea 	beq.w	8000408 <__udivmoddi4+0x288>
 8000234:	2100      	movs	r1, #0
 8000236:	e9c6 0500 	strd	r0, r5, [r6]
 800023a:	4608      	mov	r0, r1
 800023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000240:	fab3 f183 	clz	r1, r3
 8000244:	2900      	cmp	r1, #0
 8000246:	d148      	bne.n	80002da <__udivmoddi4+0x15a>
 8000248:	42ab      	cmp	r3, r5
 800024a:	d302      	bcc.n	8000252 <__udivmoddi4+0xd2>
 800024c:	4282      	cmp	r2, r0
 800024e:	f200 80f8 	bhi.w	8000442 <__udivmoddi4+0x2c2>
 8000252:	1a84      	subs	r4, r0, r2
 8000254:	eb65 0203 	sbc.w	r2, r5, r3
 8000258:	2001      	movs	r0, #1
 800025a:	4696      	mov	lr, r2
 800025c:	2e00      	cmp	r6, #0
 800025e:	d0e2      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000260:	e9c6 4e00 	strd	r4, lr, [r6]
 8000264:	e7df      	b.n	8000226 <__udivmoddi4+0xa6>
 8000266:	b902      	cbnz	r2, 800026a <__udivmoddi4+0xea>
 8000268:	deff      	udf	#255	; 0xff
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 808e 	bne.w	8000390 <__udivmoddi4+0x210>
 8000274:	1a88      	subs	r0, r1, r2
 8000276:	2101      	movs	r1, #1
 8000278:	0c17      	lsrs	r7, r2, #16
 800027a:	fa1f fe82 	uxth.w	lr, r2
 800027e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000282:	fb07 0015 	mls	r0, r7, r5, r0
 8000286:	0c22      	lsrs	r2, r4, #16
 8000288:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800028c:	fb0e f005 	mul.w	r0, lr, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d908      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f105 38ff 	add.w	r8, r5, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4290      	cmp	r0, r2
 80002a0:	f200 80cc 	bhi.w	800043c <__udivmoddi4+0x2bc>
 80002a4:	4645      	mov	r5, r8
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002ac:	fb07 2210 	mls	r2, r7, r0, r2
 80002b0:	fb0e fe00 	mul.w	lr, lr, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x150>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x14e>
 80002c8:	45a6      	cmp	lr, r4
 80002ca:	f200 80b4 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 80002ce:	4610      	mov	r0, r2
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002d8:	e7a0      	b.n	800021c <__udivmoddi4+0x9c>
 80002da:	f1c1 0720 	rsb	r7, r1, #32
 80002de:	408b      	lsls	r3, r1
 80002e0:	fa22 fc07 	lsr.w	ip, r2, r7
 80002e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e8:	fa25 fa07 	lsr.w	sl, r5, r7
 80002ec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f0:	fbba f8f9 	udiv	r8, sl, r9
 80002f4:	408d      	lsls	r5, r1
 80002f6:	fa20 f307 	lsr.w	r3, r0, r7
 80002fa:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	432b      	orrs	r3, r5
 8000304:	fa00 f501 	lsl.w	r5, r0, r1
 8000308:	fb08 f00e 	mul.w	r0, r8, lr
 800030c:	0c1c      	lsrs	r4, r3, #16
 800030e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000312:	42a0      	cmp	r0, r4
 8000314:	fa02 f201 	lsl.w	r2, r2, r1
 8000318:	d90b      	bls.n	8000332 <__udivmoddi4+0x1b2>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000322:	f080 8086 	bcs.w	8000432 <__udivmoddi4+0x2b2>
 8000326:	42a0      	cmp	r0, r4
 8000328:	f240 8083 	bls.w	8000432 <__udivmoddi4+0x2b2>
 800032c:	f1a8 0802 	sub.w	r8, r8, #2
 8000330:	4464      	add	r4, ip
 8000332:	1a24      	subs	r4, r4, r0
 8000334:	b298      	uxth	r0, r3
 8000336:	fbb4 f3f9 	udiv	r3, r4, r9
 800033a:	fb09 4413 	mls	r4, r9, r3, r4
 800033e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000342:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000346:	45a6      	cmp	lr, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000352:	d26a      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000354:	45a6      	cmp	lr, r4
 8000356:	d968      	bls.n	800042a <__udivmoddi4+0x2aa>
 8000358:	3b02      	subs	r3, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	fba0 9302 	umull	r9, r3, r0, r2
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	429c      	cmp	r4, r3
 800036a:	46c8      	mov	r8, r9
 800036c:	469e      	mov	lr, r3
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d067      	beq.n	8000446 <__udivmoddi4+0x2c6>
 8000376:	ebb5 0308 	subs.w	r3, r5, r8
 800037a:	eb64 040e 	sbc.w	r4, r4, lr
 800037e:	40cb      	lsrs	r3, r1
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	431f      	orrs	r7, r3
 8000386:	40cc      	lsrs	r4, r1
 8000388:	e9c6 7400 	strd	r7, r4, [r6]
 800038c:	2100      	movs	r1, #0
 800038e:	e74a      	b.n	8000226 <__udivmoddi4+0xa6>
 8000390:	fa02 fc03 	lsl.w	ip, r2, r3
 8000394:	f1c3 0020 	rsb	r0, r3, #32
 8000398:	40c1      	lsrs	r1, r0
 800039a:	409d      	lsls	r5, r3
 800039c:	fa24 f000 	lsr.w	r0, r4, r0
 80003a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a4:	4328      	orrs	r0, r5
 80003a6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003aa:	fb07 1115 	mls	r1, r7, r5, r1
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	0c02      	lsrs	r2, r0, #16
 80003b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003b8:	fb05 f10e 	mul.w	r1, r5, lr
 80003bc:	4291      	cmp	r1, r2
 80003be:	fa04 f403 	lsl.w	r4, r4, r3
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x256>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	d22f      	bcs.n	800042e <__udivmoddi4+0x2ae>
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d92d      	bls.n	800042e <__udivmoddi4+0x2ae>
 80003d2:	3d02      	subs	r5, #2
 80003d4:	4462      	add	r2, ip
 80003d6:	1a52      	subs	r2, r2, r1
 80003d8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003dc:	fb07 2211 	mls	r2, r7, r1, r2
 80003e0:	b280      	uxth	r0, r0
 80003e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003e6:	fb01 f20e 	mul.w	r2, r1, lr
 80003ea:	4282      	cmp	r2, r0
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x280>
 80003ee:	eb1c 0000 	adds.w	r0, ip, r0
 80003f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003f6:	d216      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 80003f8:	4282      	cmp	r2, r0
 80003fa:	d914      	bls.n	8000426 <__udivmoddi4+0x2a6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	4460      	add	r0, ip
 8000400:	1a80      	subs	r0, r0, r2
 8000402:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4631      	mov	r1, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e70b      	b.n	8000226 <__udivmoddi4+0xa6>
 800040e:	4671      	mov	r1, lr
 8000410:	e6e9      	b.n	80001e6 <__udivmoddi4+0x66>
 8000412:	4610      	mov	r0, r2
 8000414:	e6fe      	b.n	8000214 <__udivmoddi4+0x94>
 8000416:	454d      	cmp	r5, r9
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb9 0802 	subs.w	r8, r9, r2
 800041e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000422:	3801      	subs	r0, #1
 8000424:	e7a5      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000426:	4641      	mov	r1, r8
 8000428:	e7ea      	b.n	8000400 <__udivmoddi4+0x280>
 800042a:	4603      	mov	r3, r0
 800042c:	e796      	b.n	800035c <__udivmoddi4+0x1dc>
 800042e:	4645      	mov	r5, r8
 8000430:	e7d1      	b.n	80003d6 <__udivmoddi4+0x256>
 8000432:	46d0      	mov	r8, sl
 8000434:	e77d      	b.n	8000332 <__udivmoddi4+0x1b2>
 8000436:	4464      	add	r4, ip
 8000438:	3802      	subs	r0, #2
 800043a:	e749      	b.n	80002d0 <__udivmoddi4+0x150>
 800043c:	3d02      	subs	r5, #2
 800043e:	4462      	add	r2, ip
 8000440:	e731      	b.n	80002a6 <__udivmoddi4+0x126>
 8000442:	4608      	mov	r0, r1
 8000444:	e70a      	b.n	800025c <__udivmoddi4+0xdc>
 8000446:	4631      	mov	r1, r6
 8000448:	e6ed      	b.n	8000226 <__udivmoddi4+0xa6>
 800044a:	bf00      	nop

0800044c <__aeabi_idiv0>:
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000456:	f000 fa07 	bl	8000868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045a:	f000 f849 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045e:	f000 f8c3 	bl	80005e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000462:	f000 f88b 	bl	800057c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000466:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <main+0x88>)
 8000468:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <main+0x8c>)
 800046a:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <main+0x88>)
 800046e:	2202      	movs	r2, #2
 8000470:	721a      	strb	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000472:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <main+0x88>)
 8000474:	4a19      	ldr	r2, [pc, #100]	; (80004dc <main+0x8c>)
 8000476:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8000478:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <main+0x88>)
 800047a:	2201      	movs	r2, #1
 800047c:	741a      	strb	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 800047e:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <main+0x88>)
 8000480:	4a17      	ldr	r2, [pc, #92]	; (80004e0 <main+0x90>)
 8000482:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <main+0x88>)
 8000486:	2210      	movs	r2, #16
 8000488:	701a      	strb	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <main+0x88>)
 800048c:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <main+0x94>)
 800048e:	619a      	str	r2, [r3, #24]

	SX_1278_Init(&SX1278, 434000000, SX1278_POWER_20DBM, SX1278_LORA_SF_7,
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <main+0x88>)
 8000492:	9306      	str	r3, [sp, #24]
 8000494:	230a      	movs	r3, #10
 8000496:	9305      	str	r3, [sp, #20]
 8000498:	2301      	movs	r3, #1
 800049a:	9304      	str	r3, [sp, #16]
 800049c:	2301      	movs	r3, #1
 800049e:	9303      	str	r3, [sp, #12]
 80004a0:	2309      	movs	r3, #9
 80004a2:	9302      	str	r3, [sp, #8]
 80004a4:	2307      	movs	r3, #7
 80004a6:	9301      	str	r3, [sp, #4]
 80004a8:	23ff      	movs	r3, #255	; 0xff
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	a308      	add	r3, pc, #32	; (adr r3, 80004d0 <main+0x80>)
 80004ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004b2:	480d      	ldr	r0, [pc, #52]	; (80004e8 <main+0x98>)
 80004b4:	f001 fd45 	bl	8001f42 <SX_1278_Init>
	SX1278_LORA_BW_500KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10, &SX1278_hw);

	ret = SX_1278_TX_Init(&SX1278, 10, 2000);
 80004b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80004bc:	210a      	movs	r1, #10
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <main+0x98>)
 80004c0:	f001 fe64 	bl	800218c <SX_1278_TX_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	461a      	mov	r2, r3
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <main+0x9c>)
 80004ca:	601a      	str	r2, [r3, #0]
//	ret = SX_1278_RX_Init(&SX1278, 10, 2000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <main+0x7c>
 80004ce:	bf00      	nop
 80004d0:	19de5080 	.word	0x19de5080
 80004d4:	00000000 	.word	0x00000000
 80004d8:	20000084 	.word	0x20000084
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	40010800 	.word	0x40010800
 80004e4:	2000002c 	.word	0x2000002c
 80004e8:	200000a0 	.word	0x200000a0
 80004ec:	200001b8 	.word	0x200001b8

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b090      	sub	sp, #64	; 0x40
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0318 	add.w	r3, r7, #24
 80004fa:	2228      	movs	r2, #40	; 0x28
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 ff1f 	bl	8002342 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000512:	2301      	movs	r3, #1
 8000514:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800051a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000520:	2301      	movs	r3, #1
 8000522:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	2302      	movs	r3, #2
 8000526:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800052e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000532:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000534:	f107 0318 	add.w	r3, r7, #24
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fc9b 	bl	8000e74 <HAL_RCC_OscConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000544:	f000 f8ba 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	230f      	movs	r3, #15
 800054a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800054c:	2302      	movs	r3, #2
 800054e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000558:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2102      	movs	r1, #2
 8000562:	4618      	mov	r0, r3
 8000564:	f000 ff08 	bl	8001378 <HAL_RCC_ClockConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800056e:	f000 f8a5 	bl	80006bc <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3740      	adds	r7, #64	; 0x40
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <MX_SPI1_Init+0x64>)
 8000582:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <MX_SPI1_Init+0x68>)
 8000584:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <MX_SPI1_Init+0x64>)
 8000588:	f44f 7282 	mov.w	r2, #260	; 0x104
 800058c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <MX_SPI1_Init+0x64>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <MX_SPI1_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_SPI1_Init+0x64>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_SPI1_Init+0x64>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_SPI1_Init+0x64>)
 80005a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_SPI1_Init+0x64>)
 80005b0:	2210      	movs	r2, #16
 80005b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <MX_SPI1_Init+0x64>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_SPI1_Init+0x64>)
 80005bc:	2200      	movs	r2, #0
 80005be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <MX_SPI1_Init+0x64>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_SPI1_Init+0x64>)
 80005c8:	220a      	movs	r2, #10
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <MX_SPI1_Init+0x64>)
 80005ce:	f001 f82f 	bl	8001630 <HAL_SPI_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005d8:	f000 f870 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	2000002c 	.word	0x2000002c
 80005e4:	40013000 	.word	0x40013000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_GPIO_Init+0xc8>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a2b      	ldr	r2, [pc, #172]	; (80006b0 <MX_GPIO_Init+0xc8>)
 8000602:	f043 0320 	orr.w	r3, r3, #32
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <MX_GPIO_Init+0xc8>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0320 	and.w	r3, r3, #32
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_GPIO_Init+0xc8>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a25      	ldr	r2, [pc, #148]	; (80006b0 <MX_GPIO_Init+0xc8>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_GPIO_Init+0xc8>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_GPIO_Init+0xc8>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <MX_GPIO_Init+0xc8>)
 8000632:	f043 0308 	orr.w	r3, r3, #8
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_GPIO_Init+0xc8>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0308 	and.w	r3, r3, #8
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2110      	movs	r1, #16
 8000648:	481a      	ldr	r0, [pc, #104]	; (80006b4 <MX_GPIO_Init+0xcc>)
 800064a:	f000 fbfb 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2101      	movs	r1, #1
 8000652:	4819      	ldr	r0, [pc, #100]	; (80006b8 <MX_GPIO_Init+0xd0>)
 8000654:	f000 fbf6 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000658:	2310      	movs	r3, #16
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2302      	movs	r3, #2
 8000666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	4811      	ldr	r0, [pc, #68]	; (80006b4 <MX_GPIO_Init+0xcc>)
 8000670:	f000 fa64 	bl	8000b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000674:	2301      	movs	r3, #1
 8000676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4619      	mov	r1, r3
 800068a:	480b      	ldr	r0, [pc, #44]	; (80006b8 <MX_GPIO_Init+0xd0>)
 800068c:	f000 fa56 	bl	8000b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_GPIO_Init+0xd0>)
 80006a4:	f000 fa4a 	bl	8000b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010800 	.word	0x40010800
 80006b8:	40010c00 	.word	0x40010c00

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <Error_Handler+0x8>
	...

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_MspInit+0x5c>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_MspInit+0x5c>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_MspInit+0x5c>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_MspInit+0x5c>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <HAL_MspInit+0x5c>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <HAL_MspInit+0x5c>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_MspInit+0x60>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_MspInit+0x60>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40021000 	.word	0x40021000
 8000728:	40010000 	.word	0x40010000

0800072c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <HAL_SPI_MspInit+0x88>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d12f      	bne.n	80007ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 8000752:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	480b      	ldr	r0, [pc, #44]	; (80007bc <HAL_SPI_MspInit+0x90>)
 8000790:	f000 f9d4 	bl	8000b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000794:	2340      	movs	r3, #64	; 0x40
 8000796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <HAL_SPI_MspInit+0x90>)
 80007a8:	f000 f9c8 	bl	8000b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40013000 	.word	0x40013000
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000806:	f000 f875 	bl	80008f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}

0800080e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
	...

0800081c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800081c:	f7ff fff7 	bl	800080e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000822:	490c      	ldr	r1, [pc, #48]	; (8000854 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000824:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a09      	ldr	r2, [pc, #36]	; (800085c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000838:	4c09      	ldr	r4, [pc, #36]	; (8000860 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000846:	f001 fd85 	bl	8002354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084a:	f7ff fe01 	bl	8000450 <main>
  bx lr
 800084e:	4770      	bx	lr
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000858:	080023fc 	.word	0x080023fc
  ldr r2, =_sbss
 800085c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000860:	200001c0 	.word	0x200001c0

08000864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_2_IRQHandler>
	...

08000868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_Init+0x28>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_Init+0x28>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 f92b 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087e:	200f      	movs	r0, #15
 8000880:	f000 f808 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000884:	f7ff ff20 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40022000 	.word	0x40022000

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x54>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x58>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f935 	bl	8000b22 <HAL_SYSTICK_Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e00e      	b.n	80008e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d80a      	bhi.n	80008de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f000 f90b 	bl	8000aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <HAL_InitTick+0x5c>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	e000      	b.n	80008e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000000 	.word	0x20000000
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000004 	.word	0x20000004

080008f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x1c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x20>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <HAL_IncTick+0x20>)
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	20000008 	.word	0x20000008
 8000914:	200001bc 	.word	0x200001bc

08000918 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <HAL_GetTick+0x10>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	200001bc 	.word	0x200001bc

0800092c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000934:	f7ff fff0 	bl	8000918 <HAL_GetTick>
 8000938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000944:	d005      	beq.n	8000952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_Delay+0x44>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4413      	add	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000952:	bf00      	nop
 8000954:	f7ff ffe0 	bl	8000918 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8f7      	bhi.n	8000954 <HAL_Delay+0x28>
  {
  }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000008 	.word	0x20000008

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	; (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa0:	d301      	bcc.n	8000aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00f      	b.n	8000ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <SysTick_Config+0x40>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aae:	210f      	movs	r1, #15
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f7ff ff90 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <SysTick_Config+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SysTick_Config+0x40>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff49 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000afc:	f7ff ff5e 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f7ff ff90 	bl	8000a2c <NVIC_EncodePriority>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff5f 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ffb0 	bl	8000a90 <SysTick_Config>
 8000b30:	4603      	mov	r3, r0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b08b      	sub	sp, #44	; 0x2c
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4e:	e169      	b.n	8000e24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b50:	2201      	movs	r2, #1
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	4013      	ands	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	f040 8158 	bne.w	8000e1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4a9a      	ldr	r2, [pc, #616]	; (8000ddc <HAL_GPIO_Init+0x2a0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d05e      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000b78:	4a98      	ldr	r2, [pc, #608]	; (8000ddc <HAL_GPIO_Init+0x2a0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d875      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000b7e:	4a98      	ldr	r2, [pc, #608]	; (8000de0 <HAL_GPIO_Init+0x2a4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d058      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000b84:	4a96      	ldr	r2, [pc, #600]	; (8000de0 <HAL_GPIO_Init+0x2a4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d86f      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000b8a:	4a96      	ldr	r2, [pc, #600]	; (8000de4 <HAL_GPIO_Init+0x2a8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d052      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000b90:	4a94      	ldr	r2, [pc, #592]	; (8000de4 <HAL_GPIO_Init+0x2a8>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d869      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000b96:	4a94      	ldr	r2, [pc, #592]	; (8000de8 <HAL_GPIO_Init+0x2ac>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d04c      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000b9c:	4a92      	ldr	r2, [pc, #584]	; (8000de8 <HAL_GPIO_Init+0x2ac>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d863      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000ba2:	4a92      	ldr	r2, [pc, #584]	; (8000dec <HAL_GPIO_Init+0x2b0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d046      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000ba8:	4a90      	ldr	r2, [pc, #576]	; (8000dec <HAL_GPIO_Init+0x2b0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d85d      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000bae:	2b12      	cmp	r3, #18
 8000bb0:	d82a      	bhi.n	8000c08 <HAL_GPIO_Init+0xcc>
 8000bb2:	2b12      	cmp	r3, #18
 8000bb4:	d859      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000bb6:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <HAL_GPIO_Init+0x80>)
 8000bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbc:	08000c37 	.word	0x08000c37
 8000bc0:	08000c11 	.word	0x08000c11
 8000bc4:	08000c23 	.word	0x08000c23
 8000bc8:	08000c65 	.word	0x08000c65
 8000bcc:	08000c6b 	.word	0x08000c6b
 8000bd0:	08000c6b 	.word	0x08000c6b
 8000bd4:	08000c6b 	.word	0x08000c6b
 8000bd8:	08000c6b 	.word	0x08000c6b
 8000bdc:	08000c6b 	.word	0x08000c6b
 8000be0:	08000c6b 	.word	0x08000c6b
 8000be4:	08000c6b 	.word	0x08000c6b
 8000be8:	08000c6b 	.word	0x08000c6b
 8000bec:	08000c6b 	.word	0x08000c6b
 8000bf0:	08000c6b 	.word	0x08000c6b
 8000bf4:	08000c6b 	.word	0x08000c6b
 8000bf8:	08000c6b 	.word	0x08000c6b
 8000bfc:	08000c6b 	.word	0x08000c6b
 8000c00:	08000c19 	.word	0x08000c19
 8000c04:	08000c2d 	.word	0x08000c2d
 8000c08:	4a79      	ldr	r2, [pc, #484]	; (8000df0 <HAL_GPIO_Init+0x2b4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d013      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c0e:	e02c      	b.n	8000c6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	623b      	str	r3, [r7, #32]
          break;
 8000c16:	e029      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	623b      	str	r3, [r7, #32]
          break;
 8000c20:	e024      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	3308      	adds	r3, #8
 8000c28:	623b      	str	r3, [r7, #32]
          break;
 8000c2a:	e01f      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	330c      	adds	r3, #12
 8000c32:	623b      	str	r3, [r7, #32]
          break;
 8000c34:	e01a      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d102      	bne.n	8000c44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	623b      	str	r3, [r7, #32]
          break;
 8000c42:	e013      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d105      	bne.n	8000c58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	611a      	str	r2, [r3, #16]
          break;
 8000c56:	e009      	b.n	8000c6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	615a      	str	r2, [r3, #20]
          break;
 8000c62:	e003      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e000      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          break;
 8000c6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	2bff      	cmp	r3, #255	; 0xff
 8000c70:	d801      	bhi.n	8000c76 <HAL_GPIO_Init+0x13a>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	e001      	b.n	8000c7a <HAL_GPIO_Init+0x13e>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2bff      	cmp	r3, #255	; 0xff
 8000c80:	d802      	bhi.n	8000c88 <HAL_GPIO_Init+0x14c>
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x152>
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	3b08      	subs	r3, #8
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	210f      	movs	r1, #15
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	6a39      	ldr	r1, [r7, #32]
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cbc:	4b4d      	ldr	r3, [pc, #308]	; (8000df4 <HAL_GPIO_Init+0x2b8>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a4c      	ldr	r2, [pc, #304]	; (8000df4 <HAL_GPIO_Init+0x2b8>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b4a      	ldr	r3, [pc, #296]	; (8000df4 <HAL_GPIO_Init+0x2b8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cd4:	4a48      	ldr	r2, [pc, #288]	; (8000df8 <HAL_GPIO_Init+0x2bc>)
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	089b      	lsrs	r3, r3, #2
 8000cda:	3302      	adds	r3, #2
 8000cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	220f      	movs	r2, #15
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a40      	ldr	r2, [pc, #256]	; (8000dfc <HAL_GPIO_Init+0x2c0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d013      	beq.n	8000d28 <HAL_GPIO_Init+0x1ec>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a3f      	ldr	r2, [pc, #252]	; (8000e00 <HAL_GPIO_Init+0x2c4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d00d      	beq.n	8000d24 <HAL_GPIO_Init+0x1e8>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a3e      	ldr	r2, [pc, #248]	; (8000e04 <HAL_GPIO_Init+0x2c8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d007      	beq.n	8000d20 <HAL_GPIO_Init+0x1e4>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a3d      	ldr	r2, [pc, #244]	; (8000e08 <HAL_GPIO_Init+0x2cc>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d101      	bne.n	8000d1c <HAL_GPIO_Init+0x1e0>
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e006      	b.n	8000d2a <HAL_GPIO_Init+0x1ee>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	e004      	b.n	8000d2a <HAL_GPIO_Init+0x1ee>
 8000d20:	2302      	movs	r3, #2
 8000d22:	e002      	b.n	8000d2a <HAL_GPIO_Init+0x1ee>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <HAL_GPIO_Init+0x1ee>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d2c:	f002 0203 	and.w	r2, r2, #3
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	4093      	lsls	r3, r2
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d3a:	492f      	ldr	r1, [pc, #188]	; (8000df8 <HAL_GPIO_Init+0x2bc>)
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3302      	adds	r3, #2
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	492c      	ldr	r1, [pc, #176]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	608b      	str	r3, [r1, #8]
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	4928      	ldr	r1, [pc, #160]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	4922      	ldr	r1, [pc, #136]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60cb      	str	r3, [r1, #12]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	491e      	ldr	r1, [pc, #120]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4918      	ldr	r1, [pc, #96]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4914      	ldr	r1, [pc, #80]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d021      	beq.n	8000e10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	490e      	ldr	r1, [pc, #56]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]
 8000dd8:	e021      	b.n	8000e1e <HAL_GPIO_Init+0x2e2>
 8000dda:	bf00      	nop
 8000ddc:	10320000 	.word	0x10320000
 8000de0:	10310000 	.word	0x10310000
 8000de4:	10220000 	.word	0x10220000
 8000de8:	10210000 	.word	0x10210000
 8000dec:	10120000 	.word	0x10120000
 8000df0:	10110000 	.word	0x10110000
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	40010c00 	.word	0x40010c00
 8000e04:	40011000 	.word	0x40011000
 8000e08:	40011400 	.word	0x40011400
 8000e0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_GPIO_Init+0x304>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	4909      	ldr	r1, [pc, #36]	; (8000e40 <HAL_GPIO_Init+0x304>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	3301      	adds	r3, #1
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f47f ae8e 	bne.w	8000b50 <HAL_GPIO_Init+0x14>
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	372c      	adds	r7, #44	; 0x2c
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40010400 	.word	0x40010400

08000e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
 8000e50:	4613      	mov	r3, r2
 8000e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e54:	787b      	ldrb	r3, [r7, #1]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e60:	e003      	b.n	8000e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	041a      	lsls	r2, r3, #16
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	611a      	str	r2, [r3, #16]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e272      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8087 	beq.w	8000fa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e94:	4b92      	ldr	r3, [pc, #584]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 030c 	and.w	r3, r3, #12
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d00c      	beq.n	8000eba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea0:	4b8f      	ldr	r3, [pc, #572]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d112      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x5e>
 8000eac:	4b8c      	ldr	r3, [pc, #560]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eba:	4b89      	ldr	r3, [pc, #548]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d06c      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x12c>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d168      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e24c      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eda:	d106      	bne.n	8000eea <HAL_RCC_OscConfig+0x76>
 8000edc:	4b80      	ldr	r3, [pc, #512]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a7f      	ldr	r2, [pc, #508]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	e02e      	b.n	8000f48 <HAL_RCC_OscConfig+0xd4>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x98>
 8000ef2:	4b7b      	ldr	r3, [pc, #492]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a7a      	ldr	r2, [pc, #488]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b78      	ldr	r3, [pc, #480]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a77      	ldr	r2, [pc, #476]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e01d      	b.n	8000f48 <HAL_RCC_OscConfig+0xd4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0xbc>
 8000f16:	4b72      	ldr	r3, [pc, #456]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a71      	ldr	r2, [pc, #452]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b6f      	ldr	r3, [pc, #444]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a6e      	ldr	r2, [pc, #440]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e00b      	b.n	8000f48 <HAL_RCC_OscConfig+0xd4>
 8000f30:	4b6b      	ldr	r3, [pc, #428]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a6a      	ldr	r2, [pc, #424]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b68      	ldr	r3, [pc, #416]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a67      	ldr	r2, [pc, #412]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d013      	beq.n	8000f78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fce2 	bl	8000918 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f58:	f7ff fcde 	bl	8000918 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b64      	cmp	r3, #100	; 0x64
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e200      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	4b5d      	ldr	r3, [pc, #372]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f0      	beq.n	8000f58 <HAL_RCC_OscConfig+0xe4>
 8000f76:	e014      	b.n	8000fa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fcce 	bl	8000918 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f80:	f7ff fcca 	bl	8000918 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b64      	cmp	r3, #100	; 0x64
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e1ec      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	4b53      	ldr	r3, [pc, #332]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x10c>
 8000f9e:	e000      	b.n	8000fa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d063      	beq.n	8001076 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fae:	4b4c      	ldr	r3, [pc, #304]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00b      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fba:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d11c      	bne.n	8001000 <HAL_RCC_OscConfig+0x18c>
 8000fc6:	4b46      	ldr	r3, [pc, #280]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d116      	bne.n	8001000 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd2:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <HAL_RCC_OscConfig+0x176>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d001      	beq.n	8000fea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e1c0      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4939      	ldr	r1, [pc, #228]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffe:	e03a      	b.n	8001076 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d020      	beq.n	800104a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001008:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <HAL_RCC_OscConfig+0x270>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fc83 	bl	8000918 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001016:	f7ff fc7f 	bl	8000918 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e1a1      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001028:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4927      	ldr	r1, [pc, #156]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
 8001048:	e015      	b.n	8001076 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <HAL_RCC_OscConfig+0x270>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fc62 	bl	8000918 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001058:	f7ff fc5e 	bl	8000918 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e180      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	2b00      	cmp	r3, #0
 8001080:	d03a      	beq.n	80010f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d019      	beq.n	80010be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_RCC_OscConfig+0x274>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001090:	f7ff fc42 	bl	8000918 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001098:	f7ff fc3e 	bl	8000918 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e160      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 fa9c 	bl	80015f4 <RCC_Delay>
 80010bc:	e01c      	b.n	80010f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_RCC_OscConfig+0x274>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fc28 	bl	8000918 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ca:	e00f      	b.n	80010ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010cc:	f7ff fc24 	bl	8000918 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d908      	bls.n	80010ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e146      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	42420000 	.word	0x42420000
 80010e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ec:	4b92      	ldr	r3, [pc, #584]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1e9      	bne.n	80010cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80a6 	beq.w	8001252 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800110a:	4b8b      	ldr	r3, [pc, #556]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10d      	bne.n	8001132 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b88      	ldr	r3, [pc, #544]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a87      	ldr	r2, [pc, #540]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b85      	ldr	r3, [pc, #532]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800112e:	2301      	movs	r3, #1
 8001130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001132:	4b82      	ldr	r3, [pc, #520]	; (800133c <HAL_RCC_OscConfig+0x4c8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113a:	2b00      	cmp	r3, #0
 800113c:	d118      	bne.n	8001170 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800113e:	4b7f      	ldr	r3, [pc, #508]	; (800133c <HAL_RCC_OscConfig+0x4c8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a7e      	ldr	r2, [pc, #504]	; (800133c <HAL_RCC_OscConfig+0x4c8>)
 8001144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800114a:	f7ff fbe5 	bl	8000918 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001152:	f7ff fbe1 	bl	8000918 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b64      	cmp	r3, #100	; 0x64
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e103      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001164:	4b75      	ldr	r3, [pc, #468]	; (800133c <HAL_RCC_OscConfig+0x4c8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d106      	bne.n	8001186 <HAL_RCC_OscConfig+0x312>
 8001178:	4b6f      	ldr	r3, [pc, #444]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4a6e      	ldr	r2, [pc, #440]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6213      	str	r3, [r2, #32]
 8001184:	e02d      	b.n	80011e2 <HAL_RCC_OscConfig+0x36e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x334>
 800118e:	4b6a      	ldr	r3, [pc, #424]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	4a69      	ldr	r2, [pc, #420]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	6213      	str	r3, [r2, #32]
 800119a:	4b67      	ldr	r3, [pc, #412]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	4a66      	ldr	r2, [pc, #408]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	f023 0304 	bic.w	r3, r3, #4
 80011a4:	6213      	str	r3, [r2, #32]
 80011a6:	e01c      	b.n	80011e2 <HAL_RCC_OscConfig+0x36e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	d10c      	bne.n	80011ca <HAL_RCC_OscConfig+0x356>
 80011b0:	4b61      	ldr	r3, [pc, #388]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	4a60      	ldr	r2, [pc, #384]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6213      	str	r3, [r2, #32]
 80011bc:	4b5e      	ldr	r3, [pc, #376]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4a5d      	ldr	r2, [pc, #372]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6213      	str	r3, [r2, #32]
 80011c8:	e00b      	b.n	80011e2 <HAL_RCC_OscConfig+0x36e>
 80011ca:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	4a5a      	ldr	r2, [pc, #360]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	6213      	str	r3, [r2, #32]
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a57      	ldr	r2, [pc, #348]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	f023 0304 	bic.w	r3, r3, #4
 80011e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d015      	beq.n	8001216 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fb95 	bl	8000918 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f2:	f7ff fb91 	bl	8000918 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001200:	4293      	cmp	r3, r2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e0b1      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0ee      	beq.n	80011f2 <HAL_RCC_OscConfig+0x37e>
 8001214:	e014      	b.n	8001240 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fb7f 	bl	8000918 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121c:	e00a      	b.n	8001234 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121e:	f7ff fb7b 	bl	8000918 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e09b      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001234:	4b40      	ldr	r3, [pc, #256]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1ee      	bne.n	800121e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d105      	bne.n	8001252 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001246:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a3b      	ldr	r2, [pc, #236]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001250:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8087 	beq.w	800136a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	2b08      	cmp	r3, #8
 8001266:	d061      	beq.n	800132c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d146      	bne.n	80012fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001270:	4b33      	ldr	r3, [pc, #204]	; (8001340 <HAL_RCC_OscConfig+0x4cc>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fb4f 	bl	8000918 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff fb4b 	bl	8000918 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e06d      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a4:	d108      	bne.n	80012b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	4921      	ldr	r1, [pc, #132]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a19      	ldr	r1, [r3, #32]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	430b      	orrs	r3, r1
 80012ca:	491b      	ldr	r1, [pc, #108]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_RCC_OscConfig+0x4cc>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d6:	f7ff fb1f 	bl	8000918 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012de:	f7ff fb1b 	bl	8000918 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e03d      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x46a>
 80012fc:	e035      	b.n	800136a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_RCC_OscConfig+0x4cc>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fb08 	bl	8000918 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130c:	f7ff fb04 	bl	8000918 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e026      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x498>
 800132a:	e01e      	b.n	800136a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d107      	bne.n	8001344 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e019      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
 8001338:	40021000 	.word	0x40021000
 800133c:	40007000 	.word	0x40007000
 8001340:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	429a      	cmp	r2, r3
 8001356:	d106      	bne.n	8001366 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	429a      	cmp	r2, r3
 8001364:	d001      	beq.n	800136a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0d0      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800138c:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d910      	bls.n	80013bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b67      	ldr	r3, [pc, #412]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 0207 	bic.w	r2, r3, #7
 80013a2:	4965      	ldr	r1, [pc, #404]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013aa:	4b63      	ldr	r3, [pc, #396]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0b8      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d020      	beq.n	800140a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d4:	4b59      	ldr	r3, [pc, #356]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a58      	ldr	r2, [pc, #352]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f8:	4b50      	ldr	r3, [pc, #320]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	494d      	ldr	r1, [pc, #308]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d040      	beq.n	8001498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d115      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e07f      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e073      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e06b      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001456:	4b39      	ldr	r3, [pc, #228]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f023 0203 	bic.w	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4936      	ldr	r1, [pc, #216]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001468:	f7ff fa56 	bl	8000918 <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	e00a      	b.n	8001486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001470:	f7ff fa52 	bl	8000918 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e053      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 020c 	and.w	r2, r3, #12
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	429a      	cmp	r2, r3
 8001496:	d1eb      	bne.n	8001470 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d210      	bcs.n	80014c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 0207 	bic.w	r2, r3, #7
 80014ae:	4922      	ldr	r1, [pc, #136]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e032      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4916      	ldr	r1, [pc, #88]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	490e      	ldr	r1, [pc, #56]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001506:	f000 f821 	bl	800154c <HAL_RCC_GetSysClockFreq>
 800150a:	4602      	mov	r2, r0
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	490a      	ldr	r1, [pc, #40]	; (8001540 <HAL_RCC_ClockConfig+0x1c8>)
 8001518:	5ccb      	ldrb	r3, [r1, r3]
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_RCC_ClockConfig+0x1cc>)
 8001520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x1d0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f9b4 	bl	8000894 <HAL_InitTick>

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40022000 	.word	0x40022000
 800153c:	40021000 	.word	0x40021000
 8001540:	080023b4 	.word	0x080023b4
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b04      	cmp	r3, #4
 8001574:	d002      	beq.n	800157c <HAL_RCC_GetSysClockFreq+0x30>
 8001576:	2b08      	cmp	r3, #8
 8001578:	d003      	beq.n	8001582 <HAL_RCC_GetSysClockFreq+0x36>
 800157a:	e027      	b.n	80015cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800157e:	613b      	str	r3, [r7, #16]
      break;
 8001580:	e027      	b.n	80015d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	0c9b      	lsrs	r3, r3, #18
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800158c:	5cd3      	ldrb	r3, [r2, r3]
 800158e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d010      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	0c5b      	lsrs	r3, r3, #17
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	4a11      	ldr	r2, [pc, #68]	; (80015ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ae:	fb03 f202 	mul.w	r2, r3, r2
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e004      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015c0:	fb02 f303 	mul.w	r3, r2, r3
 80015c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	613b      	str	r3, [r7, #16]
      break;
 80015ca:	e002      	b.n	80015d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ce:	613b      	str	r3, [r7, #16]
      break;
 80015d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d2:	693b      	ldr	r3, [r7, #16]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	007a1200 	.word	0x007a1200
 80015e8:	080023c4 	.word	0x080023c4
 80015ec:	080023d4 	.word	0x080023d4
 80015f0:	003d0900 	.word	0x003d0900

080015f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <RCC_Delay+0x34>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <RCC_Delay+0x38>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	0a5b      	lsrs	r3, r3, #9
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001610:	bf00      	nop
  }
  while (Delay --);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1e5a      	subs	r2, r3, #1
 8001616:	60fa      	str	r2, [r7, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f9      	bne.n	8001610 <RCC_Delay+0x1c>
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000000 	.word	0x20000000
 800162c:	10624dd3 	.word	0x10624dd3

08001630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e076      	b.n	8001730 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	2b00      	cmp	r3, #0
 8001648:	d108      	bne.n	800165c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001652:	d009      	beq.n	8001668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
 800165a:	e005      	b.n	8001668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d106      	bne.n	8001688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff f852 	bl	800072c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2202      	movs	r2, #2
 800168c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800169e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ec:	ea42 0103 	orr.w	r1, r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	0c1a      	lsrs	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f002 0204 	and.w	r2, r2, #4
 800170e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800171e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_SPI_Transmit+0x22>
 8001756:	2302      	movs	r3, #2
 8001758:	e12d      	b.n	80019b6 <HAL_SPI_Transmit+0x27e>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001762:	f7ff f8d9 	bl	8000918 <HAL_GetTick>
 8001766:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d002      	beq.n	800177e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001778:	2302      	movs	r3, #2
 800177a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800177c:	e116      	b.n	80019ac <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <HAL_SPI_Transmit+0x52>
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800178e:	e10d      	b.n	80019ac <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2203      	movs	r2, #3
 8001794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	88fa      	ldrh	r2, [r7, #6]
 80017a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	88fa      	ldrh	r2, [r7, #6]
 80017ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017d6:	d10f      	bne.n	80017f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001802:	2b40      	cmp	r3, #64	; 0x40
 8001804:	d007      	beq.n	8001816 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800181e:	d14f      	bne.n	80018c0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <HAL_SPI_Transmit+0xf6>
 8001828:	8afb      	ldrh	r3, [r7, #22]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d142      	bne.n	80018b4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	881a      	ldrh	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	1c9a      	adds	r2, r3, #2
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001852:	e02f      	b.n	80018b4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b02      	cmp	r3, #2
 8001860:	d112      	bne.n	8001888 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	1c9a      	adds	r2, r3, #2
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	86da      	strh	r2, [r3, #54]	; 0x36
 8001886:	e015      	b.n	80018b4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001888:	f7ff f846 	bl	8000918 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d803      	bhi.n	80018a0 <HAL_SPI_Transmit+0x168>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189e:	d102      	bne.n	80018a6 <HAL_SPI_Transmit+0x16e>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d106      	bne.n	80018b4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80018b2:	e07b      	b.n	80019ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ca      	bne.n	8001854 <HAL_SPI_Transmit+0x11c>
 80018be:	e050      	b.n	8001962 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <HAL_SPI_Transmit+0x196>
 80018c8:	8afb      	ldrh	r3, [r7, #22]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d144      	bne.n	8001958 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	330c      	adds	r3, #12
 80018d8:	7812      	ldrb	r2, [r2, #0]
 80018da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80018f4:	e030      	b.n	8001958 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b02      	cmp	r3, #2
 8001902:	d113      	bne.n	800192c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	330c      	adds	r3, #12
 800190e:	7812      	ldrb	r2, [r2, #0]
 8001910:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001920:	b29b      	uxth	r3, r3
 8001922:	3b01      	subs	r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	86da      	strh	r2, [r3, #54]	; 0x36
 800192a:	e015      	b.n	8001958 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800192c:	f7fe fff4 	bl	8000918 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d803      	bhi.n	8001944 <HAL_SPI_Transmit+0x20c>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001942:	d102      	bne.n	800194a <HAL_SPI_Transmit+0x212>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001956:	e029      	b.n	80019ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800195c:	b29b      	uxth	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1c9      	bne.n	80018f6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	6839      	ldr	r1, [r7, #0]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fa6e 	bl	8001e48 <SPI_EndRxTxTransaction>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2220      	movs	r2, #32
 8001976:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10a      	bne.n	8001996 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	77fb      	strb	r3, [r7, #31]
 80019a2:	e003      	b.n	80019ac <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80019b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b08c      	sub	sp, #48	; 0x30
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_SPI_TransmitReceive+0x26>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e198      	b.n	8001d16 <HAL_SPI_TransmitReceive+0x358>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019ec:	f7fe ff94 	bl	8000918 <HAL_GetTick>
 80019f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d00f      	beq.n	8001a2e <HAL_SPI_TransmitReceive+0x70>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a14:	d107      	bne.n	8001a26 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d103      	bne.n	8001a26 <HAL_SPI_TransmitReceive+0x68>
 8001a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d003      	beq.n	8001a2e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001a26:	2302      	movs	r3, #2
 8001a28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a2c:	e16d      	b.n	8001d0a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_SPI_TransmitReceive+0x82>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_SPI_TransmitReceive+0x82>
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d103      	bne.n	8001a48 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a46:	e160      	b.n	8001d0a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d003      	beq.n	8001a5c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2205      	movs	r2, #5
 8001a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	887a      	ldrh	r2, [r7, #2]
 8001a72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	887a      	ldrh	r2, [r7, #2]
 8001a7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9c:	2b40      	cmp	r3, #64	; 0x40
 8001a9e:	d007      	beq.n	8001ab0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ab8:	d17c      	bne.n	8001bb4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_SPI_TransmitReceive+0x10a>
 8001ac2:	8b7b      	ldrh	r3, [r7, #26]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d16a      	bne.n	8001b9e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	881a      	ldrh	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	1c9a      	adds	r2, r3, #2
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001aec:	e057      	b.n	8001b9e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d11b      	bne.n	8001b34 <HAL_SPI_TransmitReceive+0x176>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d016      	beq.n	8001b34 <HAL_SPI_TransmitReceive+0x176>
 8001b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d113      	bne.n	8001b34 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	1c9a      	adds	r2, r3, #2
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d119      	bne.n	8001b76 <HAL_SPI_TransmitReceive+0x1b8>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d014      	beq.n	8001b76 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	b292      	uxth	r2, r2
 8001b58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	1c9a      	adds	r2, r3, #2
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b72:	2301      	movs	r3, #1
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b76:	f7fe fecf 	bl	8000918 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d80b      	bhi.n	8001b9e <HAL_SPI_TransmitReceive+0x1e0>
 8001b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d007      	beq.n	8001b9e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001b9c:	e0b5      	b.n	8001d0a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1a2      	bne.n	8001aee <HAL_SPI_TransmitReceive+0x130>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d19d      	bne.n	8001aee <HAL_SPI_TransmitReceive+0x130>
 8001bb2:	e080      	b.n	8001cb6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_SPI_TransmitReceive+0x204>
 8001bbc:	8b7b      	ldrh	r3, [r7, #26]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d16f      	bne.n	8001ca2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	330c      	adds	r3, #12
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001be8:	e05b      	b.n	8001ca2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d11c      	bne.n	8001c32 <HAL_SPI_TransmitReceive+0x274>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d017      	beq.n	8001c32 <HAL_SPI_TransmitReceive+0x274>
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d114      	bne.n	8001c32 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	330c      	adds	r3, #12
 8001c12:	7812      	ldrb	r2, [r2, #0]
 8001c14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d119      	bne.n	8001c74 <HAL_SPI_TransmitReceive+0x2b6>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d014      	beq.n	8001c74 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c70:	2301      	movs	r3, #1
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c74:	f7fe fe50 	bl	8000918 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d803      	bhi.n	8001c8c <HAL_SPI_TransmitReceive+0x2ce>
 8001c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8a:	d102      	bne.n	8001c92 <HAL_SPI_TransmitReceive+0x2d4>
 8001c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d107      	bne.n	8001ca2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001ca0:	e033      	b.n	8001d0a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d19e      	bne.n	8001bea <HAL_SPI_TransmitReceive+0x22c>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d199      	bne.n	8001bea <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f8c4 	bl	8001e48 <SPI_EndRxTxTransaction>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001cd2:	e01a      	b.n	8001d0a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10a      	bne.n	8001cf2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001d00:	e003      	b.n	8001d0a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3730      	adds	r7, #48	; 0x30
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d2c:	b2db      	uxtb	r3, r3
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d48:	f7fe fde6 	bl	8000918 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d58:	f7fe fdde 	bl	8000918 <HAL_GetTick>
 8001d5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d5e:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	015b      	lsls	r3, r3, #5
 8001d64:	0d1b      	lsrs	r3, r3, #20
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	fb02 f303 	mul.w	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d6e:	e054      	b.n	8001e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d76:	d050      	beq.n	8001e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d78:	f7fe fdce 	bl	8000918 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d902      	bls.n	8001d8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d13d      	bne.n	8001e0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001da6:	d111      	bne.n	8001dcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db0:	d004      	beq.n	8001dbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dba:	d107      	bne.n	8001dcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd4:	d10f      	bne.n	8001df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001df4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e017      	b.n	8001e3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4013      	ands	r3, r2
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d19b      	bne.n	8001d70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000

08001e48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff ff6a 	bl	8001d38 <SPI_WaitFlagStateUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f043 0220 	orr.w	r2, r3, #32
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e000      	b.n	8001e7c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <SX_1278_SPIWrite>:
 * write to.
 * @param value The "value" parameter in the SX_1278_SPIWrite function is the data value that you want
 * to write to the specified address in the SX1278 module.
 */
static void SX_1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t value)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
 8001e90:	4613      	mov	r3, r2
 8001e92:	70bb      	strb	r3, [r7, #2]
    SX_1278_HW_Set_NSS(module->hw, GPIO_PIN_RESET);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fa39 	bl	8002312 <SX_1278_HW_Set_NSS>
    SX_1278_HW_Command(module->hw, addr | 0x80, WRITE_OPTION);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2201      	movs	r2, #1
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f000 f9ec 	bl	800228c <SX_1278_HW_Command>
    SX_1278_HW_Command(module->hw, value, WRITE_OPTION);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	78b9      	ldrb	r1, [r7, #2]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 f9e5 	bl	800228c <SX_1278_HW_Command>
    SX_1278_HW_Set_NSS(module->hw, GPIO_PIN_SET);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fa22 	bl	8002312 <SX_1278_HW_Set_NSS>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <SX_1278_SPIRead>:
 * SX1278 module.
 * 
 * @return a uint8_t value, which is an unsigned 8-bit integer.
 */
static uint8_t SX_1278_SPIRead(SX1278_t *module, uint8_t addr)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
    SX_1278_HW_Set_NSS(module->hw, GPIO_PIN_RESET);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 fa10 	bl	8002312 <SX_1278_HW_Set_NSS>
    SX_1278_HW_Command(module->hw, addr, WRITE_OPTION);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	78f9      	ldrb	r1, [r7, #3]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f9c6 	bl	800228c <SX_1278_HW_Command>
    value = SX_1278_HW_Command(module->hw, addr, READ_OPTION);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	78f9      	ldrb	r1, [r7, #3]
 8001f06:	2200      	movs	r2, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f9bf 	bl	800228c <SX_1278_HW_Command>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	73fb      	strb	r3, [r7, #15]
    SX_1278_HW_Set_NSS(module->hw, GPIO_PIN_SET);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2101      	movs	r1, #1
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 f9fa 	bl	8002312 <SX_1278_HW_Set_NSS>
    return value;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <SX_1278_MODE_Lora>:
 * @param module The parameter "module" is a pointer to a structure of type SX1278_t. This structure
 * likely contains various configuration parameters and status variables related to the SX1278 LoRa
 * module.
 */
static void SX_1278_MODE_Lora(SX1278_t *module)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    SX_1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001f30:	2288      	movs	r2, #136	; 0x88
 8001f32:	2101      	movs	r1, #1
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ffa5 	bl	8001e84 <SX_1278_SPIWrite>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <SX_1278_Init>:
 * such as the SPI interface pins, reset pin, and other necessary pins for communication with the
 * module
 */
void SX_1278_Init(SX1278_t *module, uint64_t frequency, uint8_t power, uint8_t LoRa_SF,
                  uint8_t LoRa_BW, uint8_t LoRa_CR, uint8_t LoRa_CRC_sum, uint8_t packetLength, SX1278_hw_t *sx_1278_hw)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	e9c7 2300 	strd	r2, r3, [r7]
    module->frequency = frequency;
 8001f4e:	68f9      	ldr	r1, [r7, #12]
 8001f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f54:	e9c1 2302 	strd	r2, r3, [r1, #8]
    module->power = power;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	7e3a      	ldrb	r2, [r7, #24]
 8001f5c:	741a      	strb	r2, [r3, #16]
    module->LoRa_SF = LoRa_SF;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	7f3a      	ldrb	r2, [r7, #28]
 8001f62:	745a      	strb	r2, [r3, #17]
    module->LoRa_BW = LoRa_BW;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f6a:	749a      	strb	r2, [r3, #18]
    module->LoRa_CR = LoRa_CR;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f72:	74da      	strb	r2, [r3, #19]
    module->LoRa_CRC_sum = LoRa_CRC_sum;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001f7a:	751a      	strb	r2, [r3, #20]
    module->packetLength = packetLength;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001f82:	755a      	strb	r2, [r3, #21]
    module->hw = sx_1278_hw;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f88:	601a      	str	r2, [r3, #0]

    SX_1278_HW_Init(module->hw);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f967 	bl	8002262 <SX_1278_HW_Init>
    SX_1278_Config(module);
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f805 	bl	8001fa4 <SX_1278_Config>
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <SX_1278_Config>:
 * 
 * @param module A pointer to the SX1278_t structure, which contains the configuration parameters for
 * the SX1278 module.
 */
void SX_1278_Config(SX1278_t *module)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    SX_1278_SLEEP(module);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f8dd 	bl	800216c <SX_1278_SLEEP>
    HAL_Delay(15);
 8001fb2:	200f      	movs	r0, #15
 8001fb4:	f7fe fcba 	bl	800092c <HAL_Delay>
    SX_1278_MODE_Lora(module);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ffb5 	bl	8001f28 <SX_1278_MODE_Lora>

    // setting  frequency parameter
    uint64_t freq = ((uint64_t)module->frequency << 19) / 32000000;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001fc4:	f04f 0000 	mov.w	r0, #0
 8001fc8:	f04f 0100 	mov.w	r1, #0
 8001fcc:	04d9      	lsls	r1, r3, #19
 8001fce:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001fd2:	04d0      	lsls	r0, r2, #19
 8001fd4:	4a5b      	ldr	r2, [pc, #364]	; (8002144 <SX_1278_Config+0x1a0>)
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	f7fe f8b9 	bl	8000150 <__aeabi_uldivmod>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    SX_1278_SPIWrite(module, LR_RegFrMsb, (uint8_t)(freq << 16));
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2106      	movs	r1, #6
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ff4a 	bl	8001e84 <SX_1278_SPIWrite>
    SX_1278_SPIWrite(module, LR_RegFrMid, (uint8_t)(freq << 8));
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2107      	movs	r1, #7
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff45 	bl	8001e84 <SX_1278_SPIWrite>
    SX_1278_SPIWrite(module, LR_RegFrLsb, (uint8_t)(freq << 0));
 8001ffa:	7c3b      	ldrb	r3, [r7, #16]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2108      	movs	r1, #8
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff3f 	bl	8001e84 <SX_1278_SPIWrite>

    SX_1278_SPIWrite(module, RegSyncWord, 0x34);
 8002006:	2234      	movs	r2, #52	; 0x34
 8002008:	2139      	movs	r1, #57	; 0x39
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff3a 	bl	8001e84 <SX_1278_SPIWrite>

    // setting base parameter

    if (module->LoRa_SF == SX1278_LORA_SF_6)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7c5b      	ldrb	r3, [r3, #17]
 8002014:	2b06      	cmp	r3, #6
 8002016:	d12c      	bne.n	8002072 <SX_1278_Config+0xce>
    {
        SX_1278_SPIWrite(module,
                         LR_RegModemConfig1,
                         ((module->LoRa_BW << 4) + (module->LoRa_CR << 1) + 0x01)); // Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7c9b      	ldrb	r3, [r3, #18]
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	b2da      	uxtb	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7cdb      	ldrb	r3, [r3, #19]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	4413      	add	r3, r2
 800202a:	b2db      	uxtb	r3, r3
        SX_1278_SPIWrite(module,
 800202c:	3301      	adds	r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	211d      	movs	r1, #29
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff25 	bl	8001e84 <SX_1278_SPIWrite>

        SX_1278_SPIWrite(module,
                         LR_RegModemConfig2,
                         ((module->LoRa_SF << 4) + (module->LoRa_CRC_sum << 2) + 0x03)); // normal mode
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7c5b      	ldrb	r3, [r3, #17]
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	b2da      	uxtb	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7d1b      	ldrb	r3, [r3, #20]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	b2db      	uxtb	r3, r3
 800204a:	4413      	add	r3, r2
 800204c:	b2db      	uxtb	r3, r3
        SX_1278_SPIWrite(module,
 800204e:	3303      	adds	r3, #3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	211e      	movs	r1, #30
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ff14 	bl	8001e84 <SX_1278_SPIWrite>
        SX_1278_SPIWrite(module, LR_RegDetectOptimize, 0x05);
 800205c:	2205      	movs	r2, #5
 800205e:	2131      	movs	r1, #49	; 0x31
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff0f 	bl	8001e84 <SX_1278_SPIWrite>
        SX_1278_SPIWrite(module, LR_RegDetectionThreshold, 0x0C);
 8002066:	220c      	movs	r2, #12
 8002068:	2137      	movs	r1, #55	; 0x37
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ff0a 	bl	8001e84 <SX_1278_SPIWrite>
 8002070:	e029      	b.n	80020c6 <SX_1278_Config+0x122>
    }
    else
    {
        SX_1278_SPIWrite(module,
                         LR_RegModemConfig1,
                         ((module->LoRa_BW << 4) + (module->LoRa_CR << 1) + 0x00)); // Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7c9b      	ldrb	r3, [r3, #18]
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	b2da      	uxtb	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7cdb      	ldrb	r3, [r3, #19]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
        SX_1278_SPIWrite(module,
 8002082:	4413      	add	r3, r2
 8002084:	b2db      	uxtb	r3, r3
 8002086:	461a      	mov	r2, r3
 8002088:	211d      	movs	r1, #29
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fefa 	bl	8001e84 <SX_1278_SPIWrite>

        SX_1278_SPIWrite(module,
                         LR_RegModemConfig2,
                         ((module->LoRa_SF << 4) + (module->LoRa_CRC_sum << 2) + 0x03)); // normal mode
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7c5b      	ldrb	r3, [r3, #17]
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	b2da      	uxtb	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7d1b      	ldrb	r3, [r3, #20]
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	b2db      	uxtb	r3, r3
        SX_1278_SPIWrite(module,
 80020a4:	3303      	adds	r3, #3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	211e      	movs	r1, #30
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff fee9 	bl	8001e84 <SX_1278_SPIWrite>
        SX_1278_SPIWrite(module, LR_RegDetectOptimize, 0x03);
 80020b2:	2203      	movs	r2, #3
 80020b4:	2131      	movs	r1, #49	; 0x31
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff fee4 	bl	8001e84 <SX_1278_SPIWrite>
        SX_1278_SPIWrite(module, LR_RegDetectionThreshold, 0x0A);
 80020bc:	220a      	movs	r2, #10
 80020be:	2137      	movs	r1, #55	; 0x37
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff fedf 	bl	8001e84 <SX_1278_SPIWrite>
    }
    uint8_t tmp = (((uint8_t)((1 << module->LoRa_SF) / SX1278_LoRaBandwidth[module->LoRa_BW]) & 0xF0) >= 16) ? 0x80 : 0;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7c5b      	ldrb	r3, [r3, #17]
 80020ca:	461a      	mov	r2, r3
 80020cc:	2301      	movs	r3, #1
 80020ce:	4093      	lsls	r3, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	7c92      	ldrb	r2, [r2, #18]
 80020d4:	4611      	mov	r1, r2
 80020d6:	4a1c      	ldr	r2, [pc, #112]	; (8002148 <SX_1278_Config+0x1a4>)
 80020d8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80020dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	dd01      	ble.n	80020ee <SX_1278_Config+0x14a>
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	e000      	b.n	80020f0 <SX_1278_Config+0x14c>
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
    SX_1278_SPIWrite(module, LR_RegModemConfig3, 0x04 | tmp);
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	2126      	movs	r1, #38	; 0x26
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fec0 	bl	8001e84 <SX_1278_SPIWrite>
    SX_1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); // RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8002104:	2208      	movs	r2, #8
 8002106:	211f      	movs	r1, #31
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff febb 	bl	8001e84 <SX_1278_SPIWrite>
    SX_1278_SPIWrite(module, LR_RegPreambleMsb, 0x00);    // RegPreambleMsb
 800210e:	2200      	movs	r2, #0
 8002110:	2120      	movs	r1, #32
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff feb6 	bl	8001e84 <SX_1278_SPIWrite>
    SX_1278_SPIWrite(module, LR_RegPreambleLsb, 8);       // RegPreambleLsb 8+4=12byte Preamble
 8002118:	2208      	movs	r2, #8
 800211a:	2121      	movs	r1, #33	; 0x21
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff feb1 	bl	8001e84 <SX_1278_SPIWrite>
    SX_1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01);   // RegDioMapping2 DIO5=00, DIO4=01
 8002122:	2201      	movs	r2, #1
 8002124:	2141      	movs	r1, #65	; 0x41
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff feac 	bl	8001e84 <SX_1278_SPIWrite>

    module->readBytes = 0;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
    SX_1278_STANDBY(module);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f809 	bl	800214c <SX_1278_STANDBY>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	01e84800 	.word	0x01e84800
 8002148:	080023d8 	.word	0x080023d8

0800214c <SX_1278_STANDBY>:
 * @param module The parameter "module" is a pointer to a structure of type SX1278_t. This structure
 * likely contains various variables and settings related to the SX1278 module, such as the SPI
 * interface, register addresses, and current status.
 */
void SX_1278_STANDBY(SX1278_t *module)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    SX_1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8002154:	2209      	movs	r2, #9
 8002156:	2101      	movs	r1, #1
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff fe93 	bl	8001e84 <SX_1278_SPIWrite>
    module->status = STANDBY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	759a      	strb	r2, [r3, #22]
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <SX_1278_SLEEP>:
 * 
 * @param module The parameter "module" is a pointer to a structure of type SX1278_t. This structure
 * contains information about the SX1278 module, such as its SPI interface and current status.
 */
void SX_1278_SLEEP(SX1278_t *module)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    SX_1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8002174:	2208      	movs	r2, #8
 8002176:	2101      	movs	r1, #1
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fe83 	bl	8001e84 <SX_1278_SPIWrite>
    module->status = SLEEP;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	759a      	strb	r2, [r3, #22]
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <SX_1278_TX_Init>:
 * 
 * @return a uint8_t value. If the condition "temp == length" is true, it returns 1. If the timeout is
 * reached (HAL_GetTick() - time >= timeout), it returns 0.
 */
uint8_t SX_1278_TX_Init(SX1278_t *module, uint8_t length, uint32_t timeout)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	460b      	mov	r3, r1
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	72fb      	strb	r3, [r7, #11]
    uint8_t addr;
    uint8_t temp;
    uint32_t time = HAL_GetTick();
 800219a:	f7fe fbbd 	bl	8000918 <HAL_GetTick>
 800219e:	6178      	str	r0, [r7, #20]
    module->packetLength = length;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	7afa      	ldrb	r2, [r7, #11]
 80021a4:	755a      	strb	r2, [r3, #21]
    SX_1278_SPIWrite(module, LR_RegPaConfig, module->power); // Setting output power parameter
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	7c1b      	ldrb	r3, [r3, #16]
 80021aa:	461a      	mov	r2, r3
 80021ac:	2109      	movs	r1, #9
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff fe68 	bl	8001e84 <SX_1278_SPIWrite>
    SX_1278_SPIWrite(module, LR_RegOcp, 0x1B);               // OCP = 1
 80021b4:	221b      	movs	r2, #27
 80021b6:	210b      	movs	r1, #11
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff fe63 	bl	8001e84 <SX_1278_SPIWrite>

    SX_1278_SPIWrite(module, REG_LR_PADAC, 0x87);       // Tx for 20dBm
 80021be:	2287      	movs	r2, #135	; 0x87
 80021c0:	214d      	movs	r1, #77	; 0x4d
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f7ff fe5e 	bl	8001e84 <SX_1278_SPIWrite>
    SX_1278_SPIWrite(module, LR_RegHopPeriod, 0x00);    // RegHopPeriod NO FHSS
 80021c8:	2200      	movs	r2, #0
 80021ca:	2124      	movs	r1, #36	; 0x24
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff fe59 	bl	8001e84 <SX_1278_SPIWrite>
    SX_1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); // DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80021d2:	2241      	movs	r2, #65	; 0x41
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f7ff fe54 	bl	8001e84 <SX_1278_SPIWrite>
    SX_1278_ClearIRQ(module);
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f833 	bl	8002248 <SX_1278_ClearIRQ>
    SX_1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7);    // Open TxDone interrupt
 80021e2:	22f7      	movs	r2, #247	; 0xf7
 80021e4:	2111      	movs	r1, #17
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff fe4c 	bl	8001e84 <SX_1278_SPIWrite>
    SX_1278_SPIWrite(module, LR_RegPayloadLength, length); // RegPayloadLength 21byte
 80021ec:	7afb      	ldrb	r3, [r7, #11]
 80021ee:	461a      	mov	r2, r3
 80021f0:	2122      	movs	r1, #34	; 0x22
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff fe46 	bl	8001e84 <SX_1278_SPIWrite>
    addr = SX_1278_SPIRead(module, LR_RegFifoTxBaseAddr);  // RegFiFoTxBaseAddr
 80021f8:	210e      	movs	r1, #14
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff fe6b 	bl	8001ed6 <SX_1278_SPIRead>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]
    SX_1278_SPIWrite(module, LR_RegFifoAddrPtr, addr);     // RegFifoAddrPtr
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	461a      	mov	r2, r3
 8002208:	210d      	movs	r1, #13
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7ff fe3a 	bl	8001e84 <SX_1278_SPIWrite>

    while (1)
    {
        temp = SX_1278_SPIRead(module, LR_RegPayloadLength);
 8002210:	2122      	movs	r1, #34	; 0x22
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff fe5f 	bl	8001ed6 <SX_1278_SPIRead>
 8002218:	4603      	mov	r3, r0
 800221a:	74bb      	strb	r3, [r7, #18]
        if (temp == length)
 800221c:	7cba      	ldrb	r2, [r7, #18]
 800221e:	7afb      	ldrb	r3, [r7, #11]
 8002220:	429a      	cmp	r2, r3
 8002222:	d104      	bne.n	800222e <SX_1278_TX_Init+0xa2>
        {
            module->status = TX;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2202      	movs	r2, #2
 8002228:	759a      	strb	r2, [r3, #22]
            return 1;
 800222a:	2301      	movs	r3, #1
 800222c:	e008      	b.n	8002240 <SX_1278_TX_Init+0xb4>
        }

        if (HAL_GetTick() - time >= timeout)
 800222e:	f7fe fb73 	bl	8000918 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	d8e8      	bhi.n	8002210 <SX_1278_TX_Init+0x84>
        {
            return 0;
 800223e:	2300      	movs	r3, #0
        }
    }
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <SX_1278_ClearIRQ>:
 * @param module The parameter "module" is a pointer to a structure of type SX1278_t. This structure
 * likely contains information about the SX1278 module, such as its SPI interface and other
 * configuration settings.
 */
void SX_1278_ClearIRQ(SX1278_t *module)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    SX_1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8002250:	22ff      	movs	r2, #255	; 0xff
 8002252:	2112      	movs	r1, #18
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fe15 	bl	8001e84 <SX_1278_SPIWrite>
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <SX_1278_HW_Init>:
 * reset pin.
 * 
 * @param sx_1278_hw A pointer to a structure of type SX1278_hw_t.
 */
void SX_1278_HW_Init(SX1278_hw_t *sx_1278_hw)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
    SX_1278_HW_Set_NSS(sx_1278_hw, 1);
 800226a:	2101      	movs	r1, #1
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f850 	bl	8002312 <SX_1278_HW_Set_NSS>
    HAL_GPIO_WritePin(sx_1278_hw->reset.port, sx_1278_hw->reset.pin,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6858      	ldr	r0, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	2201      	movs	r2, #1
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe fde0 	bl	8000e44 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <SX_1278_HW_Command>:
 * If the value of "option" is not WRITE_OPTION, it means that the command is a read
 * 
 * @return either 1 or the value of rx_Byte, depending on the value of the option parameter.
 */
uint8_t SX_1278_HW_Command(SX1278_hw_t *sx_1278_hw, uint8_t cmd, uint8_t option)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af02      	add	r7, sp, #8
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
 8002298:	4613      	mov	r3, r2
 800229a:	70bb      	strb	r3, [r7, #2]
    uint32_t time = HAL_GetTick();
 800229c:	f7fe fb3c 	bl	8000918 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    uint8_t tx_Byte = 0x00;
 80022a2:	2300      	movs	r3, #0
 80022a4:	72fb      	strb	r3, [r7, #11]
    uint8_t rx_Byte = 0x00;
 80022a6:	2300      	movs	r3, #0
 80022a8:	72bb      	strb	r3, [r7, #10]

    if (option == WRITE_OPTION)
 80022aa:	78bb      	ldrb	r3, [r7, #2]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <SX_1278_HW_Command+0x34>
    {
        HAL_SPI_Transmit(sx_1278_hw->spi, &cmd, 1, 100);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6998      	ldr	r0, [r3, #24]
 80022b4:	1cf9      	adds	r1, r7, #3
 80022b6:	2364      	movs	r3, #100	; 0x64
 80022b8:	2201      	movs	r2, #1
 80022ba:	f7ff fa3d 	bl	8001738 <HAL_SPI_Transmit>
 80022be:	e016      	b.n	80022ee <SX_1278_HW_Command+0x62>
    }
    else
    {
        HAL_SPI_TransmitReceive(sx_1278_hw->spi, &tx_Byte, &rx_Byte, 1, 1000);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6998      	ldr	r0, [r3, #24]
 80022c4:	f107 020a 	add.w	r2, r7, #10
 80022c8:	f107 010b 	add.w	r1, r7, #11
 80022cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2301      	movs	r3, #1
 80022d4:	f7ff fb73 	bl	80019be <HAL_SPI_TransmitReceive>
    }

    while (HAL_SPI_GetState(sx_1278_hw->spi) != HAL_SPI_STATE_READY)
 80022d8:	e009      	b.n	80022ee <SX_1278_HW_Command+0x62>
    {
        if ((HAL_GetTick() - time) > TIME_OUT)
 80022da:	f7fe fb1d 	bl	8000918 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022e8:	d901      	bls.n	80022ee <SX_1278_HW_Command+0x62>
            return 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e00d      	b.n	800230a <SX_1278_HW_Command+0x7e>
    while (HAL_SPI_GetState(sx_1278_hw->spi) != HAL_SPI_STATE_READY)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fd13 	bl	8001d1e <HAL_SPI_GetState>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d1ed      	bne.n	80022da <SX_1278_HW_Command+0x4e>
    }
    return (option == WRITE_OPTION) ? 1 : rx_Byte;
 80022fe:	78bb      	ldrb	r3, [r7, #2]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d001      	beq.n	8002308 <SX_1278_HW_Command+0x7c>
 8002304:	7abb      	ldrb	r3, [r7, #10]
 8002306:	e000      	b.n	800230a <SX_1278_HW_Command+0x7e>
 8002308:	2301      	movs	r3, #1
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <SX_1278_HW_Set_NSS>:
 * NSS (chip select) signal.
 * @param value The value parameter is a uint8_t type variable that represents the value to be written
 * to the NSS (chip select) pin. It can be either 0 or 1.
 */
void SX_1278_HW_Set_NSS(SX1278_hw_t *sx_1278_hw, uint8_t value)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(sx_1278_hw->nss.port, sx_1278_hw->nss.pin,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6958      	ldr	r0, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7c1b      	ldrb	r3, [r3, #16]
 8002326:	b299      	uxth	r1, r3
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	2b01      	cmp	r3, #1
 800232c:	bf0c      	ite	eq
 800232e:	2301      	moveq	r3, #1
 8002330:	2300      	movne	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	f7fe fd85 	bl	8000e44 <HAL_GPIO_WritePin>
                      (value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <memset>:
 8002342:	4603      	mov	r3, r0
 8002344:	4402      	add	r2, r0
 8002346:	4293      	cmp	r3, r2
 8002348:	d100      	bne.n	800234c <memset+0xa>
 800234a:	4770      	bx	lr
 800234c:	f803 1b01 	strb.w	r1, [r3], #1
 8002350:	e7f9      	b.n	8002346 <memset+0x4>
	...

08002354 <__libc_init_array>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	2600      	movs	r6, #0
 8002358:	4d0c      	ldr	r5, [pc, #48]	; (800238c <__libc_init_array+0x38>)
 800235a:	4c0d      	ldr	r4, [pc, #52]	; (8002390 <__libc_init_array+0x3c>)
 800235c:	1b64      	subs	r4, r4, r5
 800235e:	10a4      	asrs	r4, r4, #2
 8002360:	42a6      	cmp	r6, r4
 8002362:	d109      	bne.n	8002378 <__libc_init_array+0x24>
 8002364:	f000 f81a 	bl	800239c <_init>
 8002368:	2600      	movs	r6, #0
 800236a:	4d0a      	ldr	r5, [pc, #40]	; (8002394 <__libc_init_array+0x40>)
 800236c:	4c0a      	ldr	r4, [pc, #40]	; (8002398 <__libc_init_array+0x44>)
 800236e:	1b64      	subs	r4, r4, r5
 8002370:	10a4      	asrs	r4, r4, #2
 8002372:	42a6      	cmp	r6, r4
 8002374:	d105      	bne.n	8002382 <__libc_init_array+0x2e>
 8002376:	bd70      	pop	{r4, r5, r6, pc}
 8002378:	f855 3b04 	ldr.w	r3, [r5], #4
 800237c:	4798      	blx	r3
 800237e:	3601      	adds	r6, #1
 8002380:	e7ee      	b.n	8002360 <__libc_init_array+0xc>
 8002382:	f855 3b04 	ldr.w	r3, [r5], #4
 8002386:	4798      	blx	r3
 8002388:	3601      	adds	r6, #1
 800238a:	e7f2      	b.n	8002372 <__libc_init_array+0x1e>
 800238c:	080023f4 	.word	0x080023f4
 8002390:	080023f4 	.word	0x080023f4
 8002394:	080023f4 	.word	0x080023f4
 8002398:	080023f8 	.word	0x080023f8

0800239c <_init>:
 800239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239e:	bf00      	nop
 80023a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a2:	bc08      	pop	{r3}
 80023a4:	469e      	mov	lr, r3
 80023a6:	4770      	bx	lr

080023a8 <_fini>:
 80023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023aa:	bf00      	nop
 80023ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ae:	bc08      	pop	{r3}
 80023b0:	469e      	mov	lr, r3
 80023b2:	4770      	bx	lr
